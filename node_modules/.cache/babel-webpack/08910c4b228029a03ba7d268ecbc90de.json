{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Equipo/source/Tgsc-Proyectos/rrhh-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { getOperationLocation, getOperationStatus, getResourceLocation, inferLroMode, parseRetryAfter } from \"./operation\";\nimport { buildCreatePoller } from \"../poller/poller\";\n/**\n * Creates a poller that can be used to poll a long-running operation.\n * @param lro - Description of the long-running operation\n * @param options - options to configure the poller\n * @returns an initialized poller\n */\n\nexport function createHttpPoller(_x, _x2) {\n  return _createHttpPoller.apply(this, arguments);\n} //# sourceMappingURL=poller.js.map\n\nfunction _createHttpPoller() {\n  _createHttpPoller = _asyncToGenerator(function* (lro, options) {\n    const {\n      resourceLocationConfig,\n      intervalInMs,\n      processResult,\n      restoreFrom,\n      updateState,\n      withOperationLocation\n    } = options || {};\n    return buildCreatePoller({\n      getStatusFromInitialResponse: (response, state) => {\n        var _a;\n\n        const mode = (_a = state.config.metadata) === null || _a === void 0 ? void 0 : _a[\"mode\"];\n        return mode === undefined || mode === \"Body\" && getOperationStatus(response, state) === \"succeeded\" ? \"succeeded\" : \"running\";\n      },\n      getStatusFromPollResponse: getOperationStatus,\n      getOperationLocation,\n      getResourceLocation,\n      getPollingInterval: parseRetryAfter\n    })({\n      init: function () {\n        var _ref = _asyncToGenerator(function* () {\n          const response = yield lro.sendInitialRequest();\n          const config = inferLroMode({\n            rawResponse: response.rawResponse,\n            requestPath: lro.requestPath,\n            requestMethod: lro.requestMethod,\n            resourceLocationConfig\n          });\n          return Object.assign({\n            response,\n            operationLocation: config === null || config === void 0 ? void 0 : config.operationLocation,\n            resourceLocation: config === null || config === void 0 ? void 0 : config.resourceLocation\n          }, (config === null || config === void 0 ? void 0 : config.mode) ? {\n            metadata: {\n              mode: config.mode\n            }\n          } : {});\n        });\n\n        return function init() {\n          return _ref.apply(this, arguments);\n        };\n      }(),\n      poll: lro.sendPollRequest\n    }, {\n      intervalInMs,\n      withOperationLocation,\n      restoreFrom,\n      updateState,\n      processResult: processResult ? ({\n        flatResponse\n      }, state) => processResult(flatResponse, state) : ({\n        flatResponse\n      }) => flatResponse\n    });\n  });\n  return _createHttpPoller.apply(this, arguments);\n}","map":{"version":3,"sources":["C:/Users/Equipo/source/Tgsc-Proyectos/rrhh-web/node_modules/@azure/core-lro/dist-esm/src/http/poller.js"],"names":["getOperationLocation","getOperationStatus","getResourceLocation","inferLroMode","parseRetryAfter","buildCreatePoller","createHttpPoller","lro","options","resourceLocationConfig","intervalInMs","processResult","restoreFrom","updateState","withOperationLocation","getStatusFromInitialResponse","response","state","_a","mode","config","metadata","undefined","getStatusFromPollResponse","getPollingInterval","init","sendInitialRequest","rawResponse","requestPath","requestMethod","Object","assign","operationLocation","resourceLocation","poll","sendPollRequest","flatResponse"],"mappings":";AAAA;AACA;AACA,SAASA,oBAAT,EAA+BC,kBAA/B,EAAmDC,mBAAnD,EAAwEC,YAAxE,EAAsFC,eAAtF,QAA8G,aAA9G;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,gBAAsBC,gBAAtB;AAAA;AAAA,C,CAqCA;;;wCArCO,WAAgCC,GAAhC,EAAqCC,OAArC,EAA8C;AACjD,UAAM;AAAEC,MAAAA,sBAAF;AAA0BC,MAAAA,YAA1B;AAAwCC,MAAAA,aAAxC;AAAuDC,MAAAA,WAAvD;AAAoEC,MAAAA,WAApE;AAAiFC,MAAAA;AAAjF,QAA4GN,OAAO,IAAI,EAA7H;AACA,WAAOH,iBAAiB,CAAC;AACrBU,MAAAA,4BAA4B,EAAE,CAACC,QAAD,EAAWC,KAAX,KAAqB;AAC/C,YAAIC,EAAJ;;AACA,cAAMC,IAAI,GAAG,CAACD,EAAE,GAAGD,KAAK,CAACG,MAAN,CAAaC,QAAnB,MAAiC,IAAjC,IAAyCH,EAAE,KAAK,KAAK,CAArD,GAAyD,KAAK,CAA9D,GAAkEA,EAAE,CAAC,MAAD,CAAjF;AACA,eAAOC,IAAI,KAAKG,SAAT,IACFH,IAAI,KAAK,MAAT,IAAmBlB,kBAAkB,CAACe,QAAD,EAAWC,KAAX,CAAlB,KAAwC,WADzD,GAED,WAFC,GAGD,SAHN;AAIH,OARoB;AASrBM,MAAAA,yBAAyB,EAAEtB,kBATN;AAUrBD,MAAAA,oBAVqB;AAWrBE,MAAAA,mBAXqB;AAYrBsB,MAAAA,kBAAkB,EAAEpB;AAZC,KAAD,CAAjB,CAaJ;AACCqB,MAAAA,IAAI;AAAA,qCAAE,aAAY;AACd,gBAAMT,QAAQ,SAAST,GAAG,CAACmB,kBAAJ,EAAvB;AACA,gBAAMN,MAAM,GAAGjB,YAAY,CAAC;AACxBwB,YAAAA,WAAW,EAAEX,QAAQ,CAACW,WADE;AAExBC,YAAAA,WAAW,EAAErB,GAAG,CAACqB,WAFO;AAGxBC,YAAAA,aAAa,EAAEtB,GAAG,CAACsB,aAHK;AAIxBpB,YAAAA;AAJwB,WAAD,CAA3B;AAMA,iBAAOqB,MAAM,CAACC,MAAP,CAAc;AAAEf,YAAAA,QAAF;AAAYgB,YAAAA,iBAAiB,EAAEZ,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACY,iBAAtF;AAAyGC,YAAAA,gBAAgB,EAAEb,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACa;AAAlL,WAAd,EAAqN,CAACb,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACD,IAAxD,IAAgE;AAAEE,YAAAA,QAAQ,EAAE;AAAEF,cAAAA,IAAI,EAAEC,MAAM,CAACD;AAAf;AAAZ,WAAhE,GAAsG,EAA3T,CAAP;AACH,SATG;;AAAA;AAAA;AAAA;AAAA,SADL;AAWCe,MAAAA,IAAI,EAAE3B,GAAG,CAAC4B;AAXX,KAbI,EAyBJ;AACCzB,MAAAA,YADD;AAECI,MAAAA,qBAFD;AAGCF,MAAAA,WAHD;AAICC,MAAAA,WAJD;AAKCF,MAAAA,aAAa,EAAEA,aAAa,GACtB,CAAC;AAAEyB,QAAAA;AAAF,OAAD,EAAmBnB,KAAnB,KAA6BN,aAAa,CAACyB,YAAD,EAAenB,KAAf,CADpB,GAEtB,CAAC;AAAEmB,QAAAA;AAAF,OAAD,KAAsBA;AAP7B,KAzBI,CAAP;AAkCH,G","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { getOperationLocation, getOperationStatus, getResourceLocation, inferLroMode, parseRetryAfter, } from \"./operation\";\nimport { buildCreatePoller } from \"../poller/poller\";\n/**\n * Creates a poller that can be used to poll a long-running operation.\n * @param lro - Description of the long-running operation\n * @param options - options to configure the poller\n * @returns an initialized poller\n */\nexport async function createHttpPoller(lro, options) {\n    const { resourceLocationConfig, intervalInMs, processResult, restoreFrom, updateState, withOperationLocation, } = options || {};\n    return buildCreatePoller({\n        getStatusFromInitialResponse: (response, state) => {\n            var _a;\n            const mode = (_a = state.config.metadata) === null || _a === void 0 ? void 0 : _a[\"mode\"];\n            return mode === undefined ||\n                (mode === \"Body\" && getOperationStatus(response, state) === \"succeeded\")\n                ? \"succeeded\"\n                : \"running\";\n        },\n        getStatusFromPollResponse: getOperationStatus,\n        getOperationLocation,\n        getResourceLocation,\n        getPollingInterval: parseRetryAfter,\n    })({\n        init: async () => {\n            const response = await lro.sendInitialRequest();\n            const config = inferLroMode({\n                rawResponse: response.rawResponse,\n                requestPath: lro.requestPath,\n                requestMethod: lro.requestMethod,\n                resourceLocationConfig,\n            });\n            return Object.assign({ response, operationLocation: config === null || config === void 0 ? void 0 : config.operationLocation, resourceLocation: config === null || config === void 0 ? void 0 : config.resourceLocation }, ((config === null || config === void 0 ? void 0 : config.mode) ? { metadata: { mode: config.mode } } : {}));\n        },\n        poll: lro.sendPollRequest,\n    }, {\n        intervalInMs,\n        withOperationLocation,\n        restoreFrom,\n        updateState,\n        processResult: processResult\n            ? ({ flatResponse }, state) => processResult(flatResponse, state)\n            : ({ flatResponse }) => flatResponse,\n    });\n}\n//# sourceMappingURL=poller.js.map"]},"metadata":{},"sourceType":"module"}