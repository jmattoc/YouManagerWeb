{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Equipo/source/Tgsc-Proyectos/youManager-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { environment } from \"../../../environments/environment\";\nimport { BlockBlobClient, BlobServiceClient } from '@azure/storage-blob';\nimport * as i0 from \"@angular/core\";\nexport class AzureService {\n  constructor() {}\n\n  uploadFile(file, filename) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const extension = \".\" + filename.split(\".\").pop();\n\n      const uuidFileName = _this.generateUUID();\n\n      const cn = _this.getConnectionURL(uuidFileName + extension);\n\n      const blobBlockClient = new BlockBlobClient(cn);\n      const res = yield blobBlockClient.uploadBrowserData(file);\n      return {\n        response: res,\n        uuidFileName: uuidFileName + extension\n      };\n    })();\n  }\n\n  containerClient(sas) {\n    return new BlobServiceClient(`https://${environment.azureAccountName}.blob.core.windows.net?${sas}`).getContainerClient(environment.azureContaineName);\n  }\n\n  deleteImage(name, handler) {\n    this.deleteBlob(name, this.containerClient(environment.azureSas), handler);\n  }\n\n  deleteBlob(name, client, handler) {\n    client.deleteBlob(name).then(() => {\n      handler();\n    });\n  }\n\n  downloadImage(name, handler) {\n    this.downloadBlob(name, this.containerClient(environment.azureSas), handler);\n  }\n\n  downloadBlob(name, client, handler) {\n    const blobClient = client.getBlobClient(name);\n    blobClient.download().then(resp => {\n      resp.blobBody.then(blob => {\n        handler(blob);\n      });\n    });\n  }\n\n  getConnectionURL(resourceName) {\n    const base = this.getResourceUrl(resourceName);\n    const sas = environment.azureSas;\n    return `${base}?${sas}`;\n  }\n\n  getResourceUrl(resourceName) {\n    return `https://${environment.azureAccountName}.blob.core.windows.net/${environment.azureContaineName}/${resourceName}`;\n  }\n\n  generateUUID() {\n    var d = new Date().getTime();\n    const time = d;\n    var d2 = performance && performance.now && performance.now() * 1000 || 0;\n    return \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n      var r = Math.random() * 16;\n\n      if (d > 0) {\n        r = (d + r) % 16 | 0;\n        d = Math.floor(d / 16);\n      } else {\n        r = (d2 + r) % 16 | 0;\n        d2 = Math.floor(d2 / 16);\n      }\n\n      return (c === \"x\" ? r : r & 0x3 | 0x8).toString(16);\n    }) + \"-\" + String(time);\n  }\n\n  downloadImagefile(row) {\n    this.downloadImage(row.stNombreArchivoRuta, blob => {\n      let url = window.URL.createObjectURL(blob);\n      let a = document.createElement(\"a\");\n      a.href = url;\n      a.download = row.stNombreArchivo + row.nombreExtension;\n      document.body.appendChild(a);\n      a.click();\n      a.remove();\n    });\n  }\n\n  downloadImagefilePersonalizado(nombrearchivo) {\n    this.downloadImage(nombrearchivo, blob => {\n      let url = window.URL.createObjectURL(blob);\n      let a = document.createElement(\"a\");\n      a.href = url;\n      a.download = nombrearchivo;\n      document.body.appendChild(a);\n      a.click();\n      a.remove();\n    });\n  }\n\n}\n\nAzureService.ɵfac = function AzureService_Factory(t) {\n  return new (t || AzureService)();\n};\n\nAzureService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AzureService,\n  factory: AzureService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"sources":["C:\\Users\\Equipo\\source\\Tgsc-Proyectos\\youManager-web\\src\\app\\core\\azure\\azure.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport {environment} from \"../../../environments/environment\";\r\nimport { BlockBlobClient ,BlobServiceClient, ContainerClient } from '@azure/storage-blob';\r\n@Injectable({ providedIn: \"root\" })\r\nexport class AzureService {\r\n  constructor() {}\r\n  async uploadFile(\r\n    file: any,\r\n    filename: any\r\n  ): Promise<{\r\n    response:any;\r\n    uuidFileName:any;\r\n  }> {\r\n    const extension = \".\" + filename.split(\".\").pop();\r\n    const uuidFileName = this.generateUUID();\r\n    const cn = this.getConnectionURL(uuidFileName + extension);\r\n    const blobBlockClient = new BlockBlobClient(cn);\r\n    const res = await blobBlockClient.uploadBrowserData(file);\r\n    return { response: res, uuidFileName: uuidFileName + extension };\r\n  }\r\n  private containerClient(sas: string): ContainerClient {\r\n    return new BlobServiceClient(`https://${environment.azureAccountName}.blob.core.windows.net?${sas}`)\r\n      .getContainerClient(environment.azureContaineName);\r\n  }\r\n  public deleteImage(name: string, handler: () => void) {\r\n    this.deleteBlob(name, this.containerClient(environment.azureSas), handler)\r\n  }\r\n  private deleteBlob(name: string, client: ContainerClient, handler: () => void) {\r\n    client.deleteBlob(name).then(() => {\r\n      handler()\r\n    })\r\n  }\r\n  public downloadImage( name: string, handler: (blob: Blob) => void) {\r\n    this.downloadBlob(name, this.containerClient(environment.azureSas), handler)\r\n  }\r\n  private downloadBlob(name: string, client: ContainerClient, handler: (blob: Blob) => void) {\r\n    const blobClient = client.getBlobClient(name);\r\n    blobClient.download().then((resp:any) => {\r\n      resp.blobBody.then((blob :any)=> {\r\n        handler(blob)\r\n      })\r\n    })\r\n  }\r\n  getConnectionURL(resourceName: any): string {\r\n    const base = this.getResourceUrl(resourceName);\r\n    const sas = environment.azureSas;\r\n    return `${base}?${sas}`;\r\n  }\r\n  getResourceUrl(resourceName: any): string {\r\n    return `https://${environment.azureAccountName}.blob.core.windows.net/${environment.azureContaineName}/${resourceName}`;\r\n  }\r\n  generateUUID(): any {\r\n    var d = new Date().getTime();\r\n    const time = d;\r\n    var d2 = (performance && performance.now && performance.now() * 1000) || 0;\r\n    return (\r\n      \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\r\n        var r = Math.random() * 16;\r\n        if (d > 0) {\r\n          r = (d + r) % 16 | 0;\r\n          d = Math.floor(d / 16);\r\n        } else {\r\n          r = (d2 + r) % 16 | 0;\r\n          d2 = Math.floor(d2 / 16);\r\n        }\r\n        return (c === \"x\" ? r : (r & 0x3) | 0x8).toString(16);\r\n      }) +\r\n      \"-\" +\r\n      String(time)\r\n    );\r\n  }\r\n  downloadImagefile(row: any) {\r\n    this.downloadImage(row.stNombreArchivoRuta, blob => {\r\n     \r\n      let url = window.URL.createObjectURL(blob);\r\n      let a = document.createElement(\"a\");\r\n      a.href = url;\r\n      a.download = row.stNombreArchivo+row.nombreExtension;\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      a.remove();\r\n    })\r\n  }\r\n  downloadImagefilePersonalizado(nombrearchivo: string) {\r\n    this.downloadImage(nombrearchivo, blob => {\r\n     \r\n      let url = window.URL.createObjectURL(blob);\r\n      let a = document.createElement(\"a\");\r\n      a.href = url;\r\n      a.download = nombrearchivo;\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      a.remove();\r\n    })\r\n  }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}