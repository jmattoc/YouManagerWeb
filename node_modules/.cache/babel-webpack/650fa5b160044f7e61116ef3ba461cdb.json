{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Equipo/source/Tgsc-Proyectos/youManager-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { EventEmitter } from '@angular/core';\nimport { FormGroup, Validators, FormControl } from '@angular/forms';\nimport { DialogoConfirmacionComponent } from '@shared/components/dialogo-confirmacion/dialogo-confirmacion.component';\nimport { BehaviorSubject } from 'rxjs';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../services/roles.service\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"xng-breadcrumb\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/icon\";\nimport * as i8 from \"@angular/material/form-field\";\nimport * as i9 from \"@angular/material/input\";\nimport * as i10 from \"@angular/common\";\nimport * as i11 from \"@angular/material/tree\";\nimport * as i12 from \"@angular/material/checkbox\";\n\nfunction FormRolesComponent_mat_error_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Este campo es obligatorio \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction FormRolesComponent_mat_error_39_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Este campo es obligatorio \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction FormRolesComponent_mat_tree_node_46_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 24);\n    i0.ɵɵelement(1, \"button\", 25);\n    i0.ɵɵelementStart(2, \"mat-checkbox\", 26);\n    i0.ɵɵlistener(\"change\", function FormRolesComponent_mat_tree_node_46_Template_mat_checkbox_change_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const node_r4 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.todoLeafItemSelectionToggle(node_r4);\n    });\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const node_r4 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"checked\", ctx_r2.checklistSelection.isSelected(node_r4));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(node_r4.title);\n  }\n}\n\nfunction FormRolesComponent_mat_tree_node_47_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 27);\n    i0.ɵɵelementStart(1, \"button\", 28);\n    i0.ɵɵelementStart(2, \"mat-icon\", 29);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"mat-checkbox\", 30);\n    i0.ɵɵlistener(\"change\", function FormRolesComponent_mat_tree_node_47_Template_mat_checkbox_change_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const node_r7 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.todoItemSelectionToggle(node_r7);\n    });\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const node_r7 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"aria-label\", \"toggle \" + node_r7.filename);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.treeControl.isExpanded(node_r7) ? \"expand_more\" : \"chevron_right\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"checked\", ctx_r3.descendantsAllSelected(node_r7))(\"indeterminate\", ctx_r3.descendantsPartiallySelected(node_r7));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(node_r7.title);\n  }\n}\n\nconst _c0 = function () {\n  return [\"/seguridad/bandusuario\"];\n};\n\nexport class TodoItemNode {}\n/** Flat to-do item node with expandable and level information */\n\nexport class TodoItemFlatNode {}\nexport class ChecklistDatabase {\n  constructor(rolesService) {\n    this.rolesService = rolesService;\n    this.dataChange = new BehaviorSubject([]);\n    this.treeData = [];\n    this.initialize();\n  }\n\n  get data() {\n    return this.dataChange.value;\n  }\n\n  initialize() {\n    // Build the tree nodes from Json object. The result is a list of `TodoItemNode` with nested\n    //     file node as children.\n    //const data = this.buildFileTree(TREE_DATA, 0);\n    //this.treeData = TREE_DATA;\n    this.rolesService.listarOpciones().then(data => {\n      this.treeData = data;\n      this.dataChange.next(this.treeData);\n    }); // Notify the change.\n  }\n  /**\r\n   * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\r\n   * The return value is the list of `TodoItemNode`.\r\n   */\n\n  /* buildFileTree(obj: { [key: string]: any }, level: number): TodoItemNode[] {\r\n     return Object.keys(obj).reduce<TodoItemNode[]>((accumulator, key) => {\r\n       const value = obj[key];\r\n       const node = new TodoItemNode();\r\n       node.item = key;\r\n  \n       if (value != null) {\r\n         if (typeof value === 'object') {\r\n           node.children = this.buildFileTree(value, level + 1);\r\n         } else {\r\n           node.item = value;\r\n         }\r\n       }\r\n  \n       return accumulator.concat(node);\r\n     }, []);\r\n   }*/\n\n\n  filterTree(array, text) {\n    const getNodes = (result, object) => {\n      if (object.name.toLocaleLowerCase().indexOf(text.toLocaleLowerCase()) > -1) {\n        result.push(object);\n        return result;\n      }\n\n      if (Array.isArray(object.children)) {\n        const children = object.children.reduce(getNodes, []);\n        if (children.length) result.push(Object.assign(Object.assign({}, object), {\n          children\n        }));\n      }\n\n      return result;\n    };\n\n    return array.reduce(getNodes, []);\n  }\n\n  filter(filterText) {\n    let filteredTreeData;\n\n    if (filterText) {\n      filteredTreeData = this.filterTree(this.treeData, filterText);\n    } else {\n      filteredTreeData = this.treeData;\n    } // Notify the change.\n\n\n    this.dataChange.next(filteredTreeData);\n  } //https://stackblitz.com/edit/angular-3d8j5b?file=app%2Ftree-checklist-example.ts,app%2Ftree-checklist-example.html\n\n  /** Add an item to to-do list */\n\n\n  insertItem(parent, name) {\n    if (parent.children) {\n      parent.children.push({\n        title: name\n      });\n      this.dataChange.next(this.data);\n    }\n  }\n\n  updateItem(node, name) {\n    node.title = name;\n    this.dataChange.next(this.data);\n  }\n\n}\n\nChecklistDatabase.ɵfac = function ChecklistDatabase_Factory(t) {\n  return new (t || ChecklistDatabase)(i0.ɵɵinject(i1.RolesService));\n};\n\nChecklistDatabase.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ChecklistDatabase,\n  factory: ChecklistDatabase.ɵfac\n});\nexport class FormRolesComponent {\n  constructor(database, rolesService, dialogo, router, fb) {\n    this.database = database;\n    this.rolesService = rolesService;\n    this.dialogo = dialogo;\n    this.router = router;\n    this.fb = fb;\n    this.onGuardar = new EventEmitter(); //Registro de Expresiones\n\n    this.RegEx_mailPattern = \"^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\";\n    this.requestUsuario = {\n      id: undefined,\n      nombre: '',\n      descripcion: '',\n      listOpciones: [],\n      listAcciones: []\n    };\n    /*\r\n    private _transformer = (node: FoodNode, level: number) => {\r\n      return {\r\n        expandable: !!node.children && node.children.length > 0,\r\n        name: node.name,\r\n        level: level,\r\n      };\r\n    }*/\n\n    /** Map from flat node to nested node. This helps us finding the nested node to be modified */\n\n    /** Map from flat node to nested node. This helps us finding the nested node to be modified */\n\n    this.flatNodeMap = new Map();\n    /** Map from nested node to flattened node. This helps us to keep the same object for selection */\n\n    this.nestedNodeMap = new Map();\n    /** A selected parent node to be inserted */\n\n    this.selectedParent = null;\n    /** The new item's name */\n\n    this.newItemName = '';\n    /** The selection for checklist */\n\n    this.checklistSelection = new SelectionModel(true\n    /* multiple */\n    );\n\n    this.getLevel = node => node.level;\n\n    this.isExpandable = node => node.expandable;\n\n    this.getChildren = node => node.children;\n\n    this.hasChild = (_, _nodeData) => _nodeData.expandable;\n\n    this.hasNoContent = (_, _nodeData) => _nodeData.title === '';\n    /**\r\n     * Transformer to convert nested node to flat node. Record the nodes in maps for later use.\r\n     */\n\n\n    this.transformer = (node, level) => {\n      const existingNode = this.nestedNodeMap.get(node);\n      const flatNode = existingNode && existingNode.title === node.title ? existingNode : new TodoItemFlatNode();\n      flatNode.title = node.title;\n      flatNode.level = level;\n      flatNode.expandable = node.children.length > 0;\n      this.flatNodeMap.set(flatNode, node);\n      this.nestedNodeMap.set(node, flatNode);\n      return flatNode;\n    };\n\n    this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n    this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable);\n    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n    database.dataChange.subscribe(data => {\n      this.dataSource.data = data;\n    });\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.formulario = new FormGroup({\n        nombre: new FormControl('', [Validators.required]),\n        descripcion: new FormControl('', [Validators.required]) // id: new FormControl(0),\n        // codigo: new FormControl(''),\n\n        /*apellidoPaterno: new FormControl('', [Validators.required]),\r\n        apellidoMaterno: new FormControl('', [Validators.required]),\r\n        email: new FormControl('', [Validators.required, Validators.pattern(this.RegEx_mailPattern)])*/\n\n      });\n      /*\r\n      this.listarOpcionesDto = await this.rolesService.listarOpciones();\r\n      this.rolesService.listarOpciones().subscribe((data: any[]) => {\r\n        this.listarOpcionesDto  = data;\r\n        \r\n      });*/\n\n      if (_this.usuario) {\n        /*\r\n        this.formulario.patchValue({\r\n          id: this.usuario.id,\r\n          login: this.usuario.login,\r\n          nombre: this.usuario.nombre,\r\n          apellidoPaterno: this.usuario.apellidoPaterno,\r\n          apellidoMaterno: this.usuario.apellidoMaterno,\r\n          email: this.usuario.correo   ,\r\n          codigo: this.usuario.codigo\r\n        });\r\n        this.formulario.controls.codigo.disable();*/\n      }\n    })();\n  }\n\n  guardar() {\n    var _this2 = this;\n\n    if (this.formulario.invalid) {\n      this.formulario.markAllAsTouched();\n      return;\n    }\n\n    this.dialogo.open(DialogoConfirmacionComponent, {\n      maxWidth: '25vw',\n      maxHeight: 'auto',\n      height: 'auto',\n      width: '25%',\n      disableClose: true,\n      data: {\n        titulo: `Registro de Roles`,\n        mensaje: `¿Está seguro que desea grabar?`\n      }\n    }).afterClosed().subscribe( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (confirmado) {\n        if (confirmado) {\n          _this2.requestUsuario.id = _this2.formulario.value.id;\n          _this2.requestUsuario.nombre = _this2.formulario.value.nombre;\n          _this2.requestUsuario.descripcion = _this2.formulario.value.descripcion;\n          _this2.requestUsuario.listOpciones = [1];\n          _this2.requestUsuario.listAcciones = [1];\n\n          _this2.onGuardar.emit(_this2.requestUsuario);\n        }\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n  /** Whether all the descendants of the node are selected. */\n\n\n  descendantsAllSelected(node) {\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected = descendants.every(child => {\n      this.checklistSelection.isSelected(child);\n    });\n    return descAllSelected;\n  }\n  /** Whether part of the descendants are selected */\n\n\n  descendantsPartiallySelected(node) {\n    const descendants = this.treeControl.getDescendants(node);\n    const result = descendants.some(child => this.checklistSelection.isSelected(child));\n    return result && !this.descendantsAllSelected(node);\n  }\n  /** Toggle the to-do item selection. Select/deselect all the descendants node */\n\n\n  todoItemSelectionToggle(node) {\n    this.checklistSelection.toggle(node);\n    const descendants = this.treeControl.getDescendants(node);\n    this.checklistSelection.isSelected(node) ? this.checklistSelection.select(...descendants) : this.checklistSelection.deselect(...descendants); // Force update for the parent\n\n    descendants.every(child => this.checklistSelection.isSelected(child));\n    this.checkAllParentsSelection(node);\n  }\n  /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */\n\n\n  todoLeafItemSelectionToggle(node) {\n    console.log(node);\n    this.checklistSelection.toggle(node);\n    this.checkAllParentsSelection(node);\n  }\n  /* Checks all the parents when a leaf node is selected/unselected */\n\n\n  checkAllParentsSelection(node) {\n    let parent = this.getParentNode(node);\n\n    while (parent) {\n      this.checkRootNodeSelection(parent);\n      parent = this.getParentNode(parent);\n    }\n  }\n  /** Check root node checked state and change it accordingly */\n\n\n  checkRootNodeSelection(node) {\n    const nodeSelected = this.checklistSelection.isSelected(node);\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected = descendants.every(child => this.checklistSelection.isSelected(child)); // console.log(nodeSelected);\n    // console.log(descAllSelected);\n    //this.checklistSelection.select(node);\n\n    if (nodeSelected && !descAllSelected) {\n      this.checklistSelection.deselect(node);\n    } else if (!nodeSelected && descAllSelected) {\n      this.checklistSelection.select(node);\n    }\n  }\n  /* Get the parent node of a node */\n\n\n  getParentNode(node) {\n    const currentLevel = this.getLevel(node);\n\n    if (currentLevel < 1) {\n      return null;\n    }\n\n    const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n\n    for (let i = startIndex; i >= 0; i--) {\n      const currentNode = this.treeControl.dataNodes[i];\n\n      if (this.getLevel(currentNode) < currentLevel) {\n        return currentNode;\n      }\n    }\n\n    return null;\n  }\n\n}\n\nFormRolesComponent.ɵfac = function FormRolesComponent_Factory(t) {\n  return new (t || FormRolesComponent)(i0.ɵɵdirectiveInject(ChecklistDatabase), i0.ɵɵdirectiveInject(i1.RolesService), i0.ɵɵdirectiveInject(i2.MatDialog), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.FormBuilder));\n};\n\nFormRolesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FormRolesComponent,\n  selectors: [[\"app-form-roles-page\"]],\n  inputs: {\n    usuario: \"usuario\"\n  },\n  outputs: {\n    onGuardar: \"onGuardar\"\n  },\n  features: [i0.ɵɵProvidersFeature([ChecklistDatabase])],\n  decls: 48,\n  vars: 8,\n  consts: [[1, \"main-content\"], [1, \"container-fluid\"], [1, \"form-group\", \"row\"], [1, \"col-md-12\"], [1, \"card\"], [1, \"card-header\", \"card-header-rose\", \"card-header-icon\"], [1, \"card-icon\"], [1, \"material-icons\"], [1, \"card-title\"], [1, \"card-body\"], [1, \"row\"], [\"autocomplete\", \"on\", 3, \"formGroup\", \"ngSubmit\"], [\"mat-raised-button\", \"\", 1, \"btn\"], [\"mat-raised-button\", \"\", 1, \"btn\", \"btn-info\", 3, \"routerLink\"], [1, \"form-group\", \"border\", \"p-3\"], [1, \"col-md-6\"], [\"appearance\", \"outline\"], [\"matInput\", \"\", \"formControlName\", \"nombre\"], [4, \"ngIf\"], [\"matInput\", \"\", \"formControlName\", \"descripcion\"], [1, \"w-auto\", \"px-2\"], [3, \"dataSource\", \"treeControl\"], [\"matTreeNodeToggle\", \"\", \"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\", \"matTreeNodeDefWhen\"], [\"matTreeNodeToggle\", \"\", \"matTreeNodePadding\", \"\"], [\"mat-icon-button\", \"\", \"disabled\", \"\"], [1, \"checklist-leaf-node\", 3, \"checked\", \"change\"], [\"matTreeNodePadding\", \"\"], [\"mat-icon-button\", \"\", \"matTreeNodeToggle\", \"\"], [1, \"mat-icon-rtl-mirror\"], [3, \"checked\", \"indeterminate\", \"change\"]],\n  template: function FormRolesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelementStart(2, \"div\", 2);\n      i0.ɵɵelementStart(3, \"div\", 3);\n      i0.ɵɵelement(4, \"xng-breadcrumb\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\", 2);\n      i0.ɵɵelementStart(6, \"div\", 3);\n      i0.ɵɵelementStart(7, \"div\", 4);\n      i0.ɵɵelementStart(8, \"div\", 5);\n      i0.ɵɵelementStart(9, \"div\", 6);\n      i0.ɵɵelementStart(10, \"i\", 7);\n      i0.ɵɵtext(11, \"mail_outline\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"h4\", 8);\n      i0.ɵɵtext(13, \"REGISTRAR ROLES\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"div\", 9);\n      i0.ɵɵelementStart(15, \"div\", 10);\n      i0.ɵɵelementStart(16, \"div\", 3);\n      i0.ɵɵelementStart(17, \"form\", 11);\n      i0.ɵɵlistener(\"ngSubmit\", function FormRolesComponent_Template_form_ngSubmit_17_listener() {\n        return ctx.guardar();\n      });\n      i0.ɵɵelementStart(18, \"div\", 10);\n      i0.ɵɵelementStart(19, \"div\", 3);\n      i0.ɵɵelementStart(20, \"button\", 12);\n      i0.ɵɵtext(21, \" Guardar \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"a\", 13);\n      i0.ɵɵtext(23, \" Cancelar \");\n      i0.ɵɵelementStart(24, \"mat-icon\");\n      i0.ɵɵtext(25, \"block\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(26, \"fieldset\", 14);\n      i0.ɵɵelementStart(27, \"div\", 10);\n      i0.ɵɵelementStart(28, \"div\", 15);\n      i0.ɵɵelementStart(29, \"mat-form-field\", 16);\n      i0.ɵɵelementStart(30, \"mat-label\");\n      i0.ɵɵtext(31, \"Nombre\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(32, \"input\", 17);\n      i0.ɵɵtemplate(33, FormRolesComponent_mat_error_33_Template, 2, 0, \"mat-error\", 18);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(34, \"div\", 15);\n      i0.ɵɵelementStart(35, \"mat-form-field\", 16);\n      i0.ɵɵelementStart(36, \"mat-label\");\n      i0.ɵɵtext(37, \"Descripci\\u00F3n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(38, \"input\", 19);\n      i0.ɵɵtemplate(39, FormRolesComponent_mat_error_39_Template, 2, 0, \"mat-error\", 18);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(40, \"fieldset\", 14);\n      i0.ɵɵelementStart(41, \"legend\", 20);\n      i0.ɵɵtext(42, \"OPCIONES Y BOTONES DEL SISTEMA\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(43, \"div\", 10);\n      i0.ɵɵelementStart(44, \"div\", 3);\n      i0.ɵɵelementStart(45, \"mat-tree\", 21);\n      i0.ɵɵtemplate(46, FormRolesComponent_mat_tree_node_46_Template, 4, 2, \"mat-tree-node\", 22);\n      i0.ɵɵtemplate(47, FormRolesComponent_mat_tree_node_47_Template, 6, 5, \"mat-tree-node\", 23);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(17);\n      i0.ɵɵproperty(\"formGroup\", ctx.formulario);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(7, _c0));\n      i0.ɵɵadvance(11);\n      i0.ɵɵproperty(\"ngIf\", ctx.formulario.controls[\"nombre\"].hasError(\"required\"));\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", ctx.formulario.controls[\"descripcion\"].hasError(\"required\"));\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasChild);\n    }\n  },\n  directives: [i5.BreadcrumbComponent, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i6.MatButton, i6.MatAnchor, i3.RouterLinkWithHref, i7.MatIcon, i8.MatFormField, i8.MatLabel, i9.MatInput, i4.DefaultValueAccessor, i4.NgControlStatus, i4.FormControlName, i10.NgIf, i11.MatTree, i11.MatTreeNodeDef, i8.MatError, i11.MatTreeNode, i11.MatTreeNodeToggle, i11.MatTreeNodePadding, i12.MatCheckbox],\n  styles: [\".mat-mdc-form-field[_ngcontent-%COMP%] {\\r\\n    margin-right: 4px;\\r\\n  }\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvcm0tcm9sZXMtcGFnZS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksaUJBQWlCO0VBQ25CIiwiZmlsZSI6ImZvcm0tcm9sZXMtcGFnZS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLm1hdC1tZGMtZm9ybS1maWVsZCB7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDRweDtcclxuICB9Il19 */\"]\n});","map":{"version":3,"sources":["C:\\Users\\Equipo\\source\\Tgsc-Proyectos\\youManager-web\\src\\app\\modules\\seguridad\\pages\\roles\\form-roles-page\\form-roles-page.component.ts","C:\\Users\\Equipo\\source\\Tgsc-Proyectos\\youManager-web\\src\\app\\modules\\seguridad\\pages\\roles\\form-roles-page\\form-roles-page.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output, Injectable, Inject } from '@angular/core';\r\nimport { Router } from \"@angular/router\";\r\nimport { RolesDto } from '@core/models/seguridad/RolesDto';\r\nimport { FormGroup, FormBuilder, Validators, FormControl, FormArray, ValidatorFn, AbstractControl } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { DialogoConfirmacionComponent } from '@shared/components/dialogo-confirmacion/dialogo-confirmacion.component';\r\nimport { RolesService } from '../../../services/roles.service';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { FlatTreeControl } from '@angular/cdk/tree';\r\nimport { MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\n\r\nexport class TodoItemNode {\r\n  children: TodoItemNode[];\r\n  title: string;\r\n}\r\n/** Flat to-do item node with expandable and level information */\r\nexport class TodoItemFlatNode {\r\n  title: string;\r\n  level: number;\r\n  expandable: boolean;\r\n}\r\n\r\n@Injectable()\r\nexport class ChecklistDatabase {\r\n  dataChange = new BehaviorSubject<TodoItemNode[]>([]);\r\n  treeData: any = [];\r\n  get data(): TodoItemNode[] {\r\n    return this.dataChange.value;\r\n  }\r\n\r\n  constructor(private rolesService: RolesService) {\r\n    this.initialize();\r\n  }\r\n\r\n  initialize() {\r\n    // Build the tree nodes from Json object. The result is a list of `TodoItemNode` with nested\r\n    //     file node as children.\r\n    //const data = this.buildFileTree(TREE_DATA, 0);\r\n    \r\n    //this.treeData = TREE_DATA;\r\n    \r\n    this.rolesService.listarOpciones().then((data: any[]) => {      \r\n      this.treeData  = data;            \r\n      this.dataChange.next(this.treeData);  \r\n    });\r\n\r\n    // Notify the change.\r\n    \r\n  }\r\n\r\n  /**\r\n   * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\r\n   * The return value is the list of `TodoItemNode`.\r\n   */\r\n /* buildFileTree(obj: { [key: string]: any }, level: number): TodoItemNode[] {\r\n    return Object.keys(obj).reduce<TodoItemNode[]>((accumulator, key) => {\r\n      const value = obj[key];\r\n      const node = new TodoItemNode();\r\n      node.item = key;\r\n\r\n      if (value != null) {\r\n        if (typeof value === 'object') {\r\n          node.children = this.buildFileTree(value, level + 1);\r\n        } else {\r\n          node.item = value;\r\n        }\r\n      }\r\n\r\n      return accumulator.concat(node);\r\n    }, []);\r\n  }*/\r\n  filterTree(array: any, text: any) {\r\n    const getNodes = (result: any, object: any) => {\r\n      if (object.name.toLocaleLowerCase().indexOf(text.toLocaleLowerCase()) > -1) {\r\n        result.push(object);\r\n        return result;\r\n      }\r\n      if (Array.isArray(object.children)) {\r\n        const children = object.children.reduce(getNodes, []);\r\n        if (children.length) result.push({...object, children});\r\n      }\r\n      return result;\r\n    };\r\n    return array.reduce(getNodes, []);\r\n  }\r\n  public filter(filterText: string) {\r\n    let filteredTreeData: any;\r\n    if (filterText) {\r\n      filteredTreeData = this.filterTree(this.treeData, filterText)\r\n    } else {\r\n      filteredTreeData = this.treeData;\r\n    }\r\n    // Notify the change.\r\n    this.dataChange.next(filteredTreeData);\r\n  }\r\n//https://stackblitz.com/edit/angular-3d8j5b?file=app%2Ftree-checklist-example.ts,app%2Ftree-checklist-example.html\r\n  /** Add an item to to-do list */\r\n  insertItem(parent: TodoItemNode, name: string) {\r\n    if (parent.children) {\r\n      parent.children.push({ title: name } as TodoItemNode);\r\n      this.dataChange.next(this.data);\r\n    }\r\n  }\r\n\r\n  updateItem(node: TodoItemNode, name: string) {\r\n    node.title = name;\r\n    this.dataChange.next(this.data);\r\n  }\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-form-roles-page',\r\n  templateUrl: './form-roles-page.component.html',\r\n  styleUrls:['./form-roles-page.component.css'],\r\n  providers: [ChecklistDatabase]\r\n})\r\nexport class FormRolesComponent implements OnInit {\r\n  @Input() usuario: any;\r\n  @Output() onGuardar: EventEmitter<RolesDto> = new EventEmitter();\r\n  \r\n  formulario: FormGroup;\r\n  listarOpcionesDto: any[];\r\n  //Registro de Expresiones\r\n  RegEx_mailPattern = \"^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\";\r\n  requestUsuario: RolesDto = {\r\n    id: undefined,\r\n    nombre: '',\r\n    descripcion: '',\r\n    listOpciones: [],\r\n    listAcciones: []\r\n  };\r\n\r\n  async ngOnInit() {\r\n    this.formulario = new FormGroup({\r\n      nombre: new FormControl('', [Validators.required]),\r\n      descripcion: new FormControl('', [Validators.required])\r\n      // id: new FormControl(0),\r\n      // codigo: new FormControl(''),\r\n      \r\n\r\n      /*apellidoPaterno: new FormControl('', [Validators.required]),\r\n      apellidoMaterno: new FormControl('', [Validators.required]),\r\n      email: new FormControl('', [Validators.required, Validators.pattern(this.RegEx_mailPattern)])*/\r\n    });\r\n\r\n    /*\r\n    this.listarOpcionesDto = await this.rolesService.listarOpciones();    \r\n    this.rolesService.listarOpciones().subscribe((data: any[]) => {\r\n      this.listarOpcionesDto  = data;      \r\n      \r\n    });*/\r\n\r\n   \r\n\r\n    if (this.usuario) {\r\n      /*\r\n      this.formulario.patchValue({\r\n        id: this.usuario.id,\r\n        login: this.usuario.login,\r\n        nombre: this.usuario.nombre,\r\n        apellidoPaterno: this.usuario.apellidoPaterno,\r\n        apellidoMaterno: this.usuario.apellidoMaterno,\r\n        email: this.usuario.correo   ,    \r\n        codigo: this.usuario.codigo \r\n      });\r\n      this.formulario.controls.codigo.disable();*/\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n  private _transformer = (node: FoodNode, level: number) => {\r\n    return {\r\n      expandable: !!node.children && node.children.length > 0,\r\n      name: node.name,\r\n      level: level,\r\n    };\r\n  }*/\r\n   /** Map from flat node to nested node. This helps us finding the nested node to be modified */\r\n   /** Map from flat node to nested node. This helps us finding the nested node to be modified */\r\n   flatNodeMap = new Map<TodoItemFlatNode, TodoItemNode>();\r\n   /** Map from nested node to flattened node. This helps us to keep the same object for selection */\r\n   nestedNodeMap = new Map<TodoItemNode, TodoItemFlatNode>();\r\n   /** A selected parent node to be inserted */\r\n   selectedParent: TodoItemFlatNode | null = null;\r\n   /** The new item's name */\r\n   newItemName = '';\r\n \r\n   treeControl: FlatTreeControl<TodoItemFlatNode>;\r\n \r\n   treeFlattener: MatTreeFlattener<TodoItemNode, TodoItemFlatNode>;\r\n \r\n   dataSource: MatTreeFlatDataSource<TodoItemNode, TodoItemFlatNode>;\r\n \r\n   /** The selection for checklist */\r\n   checklistSelection = new SelectionModel<TodoItemFlatNode>(\r\n     true /* multiple */\r\n   );\r\n   \r\n  constructor(\r\n    private database: ChecklistDatabase,\r\n    private rolesService: RolesService,\r\n    public dialogo: MatDialog,\r\n    public router: Router,\r\n    private fb: FormBuilder\r\n  ) {\r\n\r\n    this.treeFlattener = new MatTreeFlattener(\r\n      this.transformer,\r\n      this.getLevel,\r\n      this.isExpandable,\r\n      this.getChildren\r\n    );\r\n    this.treeControl = new FlatTreeControl<TodoItemFlatNode>(\r\n      this.getLevel,\r\n      this.isExpandable\r\n    );\r\n    this.dataSource = new MatTreeFlatDataSource(\r\n      this.treeControl,\r\n      this.treeFlattener\r\n    );\r\n\r\n    database.dataChange.subscribe((data) => {\r\n      this.dataSource.data = data;\r\n    });\r\n  }\r\n\r\n  guardar() {\r\n\r\n    if (this.formulario.invalid) {\r\n      this.formulario.markAllAsTouched();\r\n      return;\r\n    }\r\n    this.dialogo.open(DialogoConfirmacionComponent, {\r\n      maxWidth: '25vw',\r\n      maxHeight: 'auto',\r\n      height: 'auto',\r\n      width: '25%',\r\n      disableClose: true,\r\n      data: {\r\n        titulo: `Registro de Roles`,\r\n        mensaje: `¿Está seguro que desea grabar?`\r\n      }\r\n    }).afterClosed()\r\n      .subscribe(async (confirmado: Boolean) => {\r\n\r\n        if (confirmado) {\r\n          this.requestUsuario.id = this.formulario.value.id;\r\n          this.requestUsuario.nombre = this.formulario.value.nombre;\r\n          this.requestUsuario.descripcion = this.formulario.value.descripcion;\r\n          this.requestUsuario.listOpciones = [1];\r\n          this.requestUsuario.listAcciones = [1];\r\n          this.onGuardar.emit(this.requestUsuario);\r\n        }\r\n      });\r\n  }\r\n  \r\n\r\n  getLevel = (node: TodoItemFlatNode) => node.level;\r\n\r\n  isExpandable = (node: TodoItemFlatNode) => node.expandable;\r\n\r\n  getChildren = (node: TodoItemNode): TodoItemNode[] => node.children;\r\n\r\n  hasChild = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.expandable;\r\n\r\n  hasNoContent = (_: number, _nodeData: TodoItemFlatNode) =>\r\n    _nodeData.title === '';\r\n\r\n  /**\r\n   * Transformer to convert nested node to flat node. Record the nodes in maps for later use.\r\n   */\r\n  transformer = (node: TodoItemNode, level: number) => {\r\n    const existingNode = this.nestedNodeMap.get(node);\r\n    const flatNode =\r\n      existingNode && existingNode.title === node.title\r\n        ? existingNode\r\n        : new TodoItemFlatNode();\r\n    flatNode.title = node.title;\r\n    flatNode.level = level;    \r\n    flatNode.expandable = node.children.length >0;\r\n    this.flatNodeMap.set(flatNode, node);\r\n    this.nestedNodeMap.set(node, flatNode);\r\n    return flatNode;\r\n  };\r\n\r\n  /** Whether all the descendants of the node are selected. */\r\n  descendantsAllSelected(node: TodoItemFlatNode): boolean {\r\n    \r\n    const descendants = this.treeControl.getDescendants(node);\r\n    const descAllSelected = descendants.every((child) =>{      \r\n      this.checklistSelection.isSelected(child)}\r\n    );\r\n    return descAllSelected;\r\n  }\r\n\r\n  /** Whether part of the descendants are selected */\r\n  descendantsPartiallySelected(node: TodoItemFlatNode): boolean {\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    const result = descendants.some((child) =>\r\n      this.checklistSelection.isSelected(child)\r\n    );\r\n    return result && !this.descendantsAllSelected(node);\r\n  }\r\n\r\n  /** Toggle the to-do item selection. Select/deselect all the descendants node */\r\n  todoItemSelectionToggle(node: TodoItemFlatNode): void {\r\n    \r\n    this.checklistSelection.toggle(node);\r\n    const descendants = this.treeControl.getDescendants(node);    \r\n    this.checklistSelection.isSelected(node)\r\n      ? this.checklistSelection.select(...descendants)\r\n      : this.checklistSelection.deselect(...descendants);\r\n\r\n    // Force update for the parent\r\n    descendants.every((child) => this.checklistSelection.isSelected(child));\r\n    \r\n    \r\n    this.checkAllParentsSelection(node);\r\n  }\r\n\r\n  /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */\r\n  todoLeafItemSelectionToggle(node: TodoItemFlatNode): void {\r\n    console.log(node);\r\n    this.checklistSelection.toggle(node);\r\n    this.checkAllParentsSelection(node);\r\n  }\r\n\r\n  /* Checks all the parents when a leaf node is selected/unselected */\r\n  checkAllParentsSelection(node: TodoItemFlatNode): void {\r\n    let parent: TodoItemFlatNode | null = this.getParentNode(node);\r\n    while (parent) {      \r\n      this.checkRootNodeSelection(parent);\r\n      parent = this.getParentNode(parent);\r\n    }\r\n  }\r\n\r\n  /** Check root node checked state and change it accordingly */\r\n  checkRootNodeSelection(node: TodoItemFlatNode): void {\r\n    const nodeSelected = this.checklistSelection.isSelected(node);\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    const descAllSelected = descendants.every((child) =>\r\n      this.checklistSelection.isSelected(child)\r\n    );\r\n    // console.log(nodeSelected);\r\n    // console.log(descAllSelected);\r\n    //this.checklistSelection.select(node);\r\n    if (nodeSelected && !descAllSelected) {\r\n      this.checklistSelection.deselect(node);\r\n    } else if (!nodeSelected && descAllSelected) {\r\n      this.checklistSelection.select(node);\r\n    }\r\n  }\r\n\r\n  /* Get the parent node of a node */\r\n  getParentNode(node: TodoItemFlatNode): TodoItemFlatNode | null {\r\n    const currentLevel = this.getLevel(node);\r\n\r\n    if (currentLevel < 1) {\r\n      return null;\r\n    }\r\n\r\n    const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\r\n\r\n    for (let i = startIndex; i >= 0; i--) {\r\n      const currentNode = this.treeControl.dataNodes[i];\r\n\r\n      if (this.getLevel(currentNode) < currentLevel) {\r\n        return currentNode;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n","<div class=\"main-content\">\r\n    <div class=\"container-fluid\">\r\n      <div class=\"form-group row\">\r\n        <div class=\"col-md-12\">\r\n          <xng-breadcrumb></xng-breadcrumb>\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group row\">\r\n        <div class=\"col-md-12\">\r\n          <div class=\"card\">\r\n            <div class=\"card-header card-header-rose card-header-icon\">\r\n              <div class=\"card-icon\"><i class=\"material-icons\">mail_outline</i></div>\r\n              <h4 class=\"card-title\">REGISTRAR ROLES</h4>\r\n            </div>\r\n            <div class=\"card-body\">\r\n              <div class=\"row\">\r\n                <div class=\"col-md-12\">       \r\n                    <form autocomplete=\"on\" [formGroup]=\"formulario\" (ngSubmit)=\"guardar()\">\r\n                        <div class=\"row\">\r\n                            <div class=\"col-md-12\">\r\n                                <button mat-raised-button class=\"btn\">\r\n                                    Guardar\r\n                                </button>\r\n                                <a class=\"btn btn-info\" mat-raised-button [routerLink]=\"['/seguridad/bandusuario']\">\r\n                                    Cancelar\r\n                                    <mat-icon>block</mat-icon>\r\n                                </a>\r\n                            </div>\r\n                        </div>\r\n                        <fieldset class=\"form-group border p-3\">        \r\n                            <div class=\"row\">\r\n                                <div class=\"col-md-6\">\r\n                                    <mat-form-field appearance=\"outline\">\r\n                                        <mat-label>Nombre</mat-label>\r\n                                        <input matInput formControlName=\"nombre\">\r\n                                        <mat-error *ngIf=\"formulario.controls['nombre'].hasError('required')\">\r\n                                            Este campo es obligatorio\r\n                                        </mat-error>\r\n                                    </mat-form-field>\r\n                                </div>\r\n                                <div class=\"col-md-6\">\r\n                                    <mat-form-field appearance=\"outline\">\r\n                                        <mat-label>Descripción</mat-label>\r\n                                        <input matInput formControlName=\"descripcion\">\r\n                                        <mat-error *ngIf=\"formulario.controls['descripcion'].hasError('required')\">\r\n                                            Este campo es obligatorio\r\n                                        </mat-error> \r\n                                    </mat-form-field>\r\n                                </div> \r\n                            </div>\r\n                        </fieldset>\r\n                    </form>\r\n                        <fieldset class=\"form-group border p-3\">\r\n                            <legend class=\"w-auto px-2\">OPCIONES Y BOTONES DEL SISTEMA</legend>\r\n                            <div class=\"row\">\r\n                                <div class=\"col-md-12\">                        \r\n                                        <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\r\n                                            <mat-tree-node\r\n                                            *matTreeNodeDef=\"let node\" matTreeNodeToggle matTreeNodePadding>\r\n                                            <button mat-icon-button disabled></button>\r\n                                            <mat-checkbox\r\n                                                class=\"checklist-leaf-node\"\r\n                                                [checked]=\"checklistSelection.isSelected(node)\"\r\n                                                (change)=\"todoLeafItemSelectionToggle(node)\">{{node.title}}</mat-checkbox>\r\n                                            </mat-tree-node>\r\n                                        \r\n                                            <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\r\n                                            <button\r\n                                                mat-icon-button\r\n                                                matTreeNodeToggle\r\n                                                [attr.aria-label]=\"'toggle ' + node.filename\"\r\n                                            >\r\n                                                <mat-icon class=\"mat-icon-rtl-mirror\">\r\n                                                {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\r\n                                                </mat-icon>\r\n                                            </button>\r\n                                            <mat-checkbox\r\n                                                [checked]=\"descendantsAllSelected(node)\"\r\n                                                [indeterminate]=\"descendantsPartiallySelected(node)\"\r\n                                                (change)=\"todoItemSelectionToggle(node)\"\r\n                                                >{{node.title}}</mat-checkbox\r\n                                            >\r\n                                            </mat-tree-node>\r\n                                        </mat-tree>\r\n                                </div>\r\n                            </div>\r\n                        </fieldset>\r\n                    \r\n                </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n   </div>\r\n</div>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}