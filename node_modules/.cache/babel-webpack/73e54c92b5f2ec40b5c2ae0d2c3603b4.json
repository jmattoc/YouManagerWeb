{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Equipo/source/Tgsc-Proyectos/youManager-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { EventEmitter } from '@angular/core';\nimport { FormGroup, Validators, FormControl } from '@angular/forms';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';\nimport { BehaviorSubject } from 'rxjs';\nimport { DialogoConfirmacionComponent } from '@shared/components/dialogo-confirmacion/dialogo-confirmacion.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@modules/seguridad/services/opcion.service\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/tree\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/icon\";\nimport * as i8 from \"@angular/router\";\nimport * as i9 from \"@angular/material/form-field\";\nimport * as i10 from \"@angular/material/input\";\nimport * as i11 from \"@angular/material/checkbox\";\n\nfunction FormAplicacionComponent_form_0_mat_error_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Este campo es obligatorio \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction FormAplicacionComponent_form_0_mat_error_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Este campo debe contener 3 caracteres como m\\u00EDnimo \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction FormAplicacionComponent_form_0_mat_error_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Este campo debe contener 50 caracteres como m\\u00E1ximo \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction FormAplicacionComponent_form_0_mat_error_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Este campo es obligatorio \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction FormAplicacionComponent_form_0_mat_error_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Este campo debe contener 3 caracteres como m\\u00EDnimo \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction FormAplicacionComponent_form_0_mat_error_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Este campo debe contener 50 caracteres como m\\u00E1ximo \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction FormAplicacionComponent_form_0_mat_error_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Este campo es obligatorio \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c0 = function () {\n  return [\"/seguridad/bandusuario\"];\n};\n\nfunction FormAplicacionComponent_form_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"form\", 8);\n    i0.ɵɵlistener(\"ngSubmit\", function FormAplicacionComponent_form_0_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.guardar();\n    });\n    i0.ɵɵelementStart(1, \"div\", 3);\n    i0.ɵɵelementStart(2, \"div\", 4);\n    i0.ɵɵelementStart(3, \"button\", 9);\n    i0.ɵɵtext(4, \"Guardar\");\n    i0.ɵɵelementStart(5, \"mat-icon\");\n    i0.ɵɵtext(6, \"save\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"a\", 10);\n    i0.ɵɵtext(8, \"Cancelar\");\n    i0.ɵɵelementStart(9, \"mat-icon\");\n    i0.ɵɵtext(10, \"block\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"fieldset\", 1);\n    i0.ɵɵelementStart(12, \"div\", 3);\n    i0.ɵɵelementStart(13, \"div\", 11);\n    i0.ɵɵelementStart(14, \"mat-form-field\", 12);\n    i0.ɵɵelementStart(15, \"mat-label\");\n    i0.ɵɵtext(16, \"Nombre\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(17, \"input\", 13);\n    i0.ɵɵtemplate(18, FormAplicacionComponent_form_0_mat_error_18_Template, 2, 0, \"mat-error\", 14);\n    i0.ɵɵtemplate(19, FormAplicacionComponent_form_0_mat_error_19_Template, 2, 0, \"mat-error\", 14);\n    i0.ɵɵtemplate(20, FormAplicacionComponent_form_0_mat_error_20_Template, 2, 0, \"mat-error\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"div\", 11);\n    i0.ɵɵelementStart(22, \"mat-form-field\", 12);\n    i0.ɵɵelementStart(23, \"mat-label\");\n    i0.ɵɵtext(24, \"Descripci\\u00F3n\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(25, \"input\", 15);\n    i0.ɵɵtemplate(26, FormAplicacionComponent_form_0_mat_error_26_Template, 2, 0, \"mat-error\", 14);\n    i0.ɵɵtemplate(27, FormAplicacionComponent_form_0_mat_error_27_Template, 2, 0, \"mat-error\", 14);\n    i0.ɵɵtemplate(28, FormAplicacionComponent_form_0_mat_error_28_Template, 2, 0, \"mat-error\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(29, \"div\", 16);\n    i0.ɵɵelementStart(30, \"mat-form-field\", 12);\n    i0.ɵɵelementStart(31, \"mat-label\");\n    i0.ɵɵtext(32, \"Peso\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(33, \"input\", 17);\n    i0.ɵɵtemplate(34, FormAplicacionComponent_form_0_mat_error_34_Template, 2, 0, \"mat-error\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.formulario);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(9, _c0));\n    i0.ɵɵadvance(11);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.formulario.controls[\"nombre\"].hasError(\"required\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.formulario.controls[\"nombre\"].hasError(\"minlength\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.formulario.controls[\"nombre\"].hasError(\"maxlength\"));\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.formulario.controls[\"descripcion\"].hasError(\"required\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.formulario.controls[\"descripcion\"].hasError(\"minlength\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.formulario.controls[\"descripcion\"].hasError(\"maxlength\"));\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.formulario.controls[\"Peso\"].hasError(\"required\"));\n  }\n}\n\nfunction FormAplicacionComponent_mat_tree_node_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 18);\n    i0.ɵɵelement(1, \"button\", 19);\n    i0.ɵɵelementStart(2, \"mat-checkbox\", 20);\n    i0.ɵɵlistener(\"change\", function FormAplicacionComponent_mat_tree_node_7_Template_mat_checkbox_change_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r15);\n      const node_r13 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.todoLeafItemSelectionToggle(node_r13);\n    });\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const node_r13 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"checked\", ctx_r1.checklistSelection.isSelected(node_r13));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(node_r13.title);\n  }\n}\n\nfunction FormAplicacionComponent_mat_tree_node_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 21);\n    i0.ɵɵelement(1, \"button\", 19);\n    i0.ɵɵelementStart(2, \"mat-form-field\", 22);\n    i0.ɵɵelementStart(3, \"mat-label\");\n    i0.ɵɵtext(4, \"New item...\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"input\", 23, 24);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"button\", 25);\n    i0.ɵɵlistener(\"click\", function FormAplicacionComponent_mat_tree_node_8_Template_button_click_7_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r19);\n      const node_r16 = restoredCtx.$implicit;\n\n      const _r17 = i0.ɵɵreference(6);\n\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.saveNode(node_r16, _r17.value);\n    });\n    i0.ɵɵtext(8, \"Save\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction FormAplicacionComponent_mat_tree_node_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 21);\n    i0.ɵɵelementStart(1, \"button\", 26);\n    i0.ɵɵelementStart(2, \"mat-icon\", 27);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"mat-checkbox\", 28);\n    i0.ɵɵlistener(\"change\", function FormAplicacionComponent_mat_tree_node_9_Template_mat_checkbox_change_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r22);\n      const node_r20 = restoredCtx.$implicit;\n      const ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.todoItemSelectionToggle(node_r20);\n    });\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"button\", 29);\n    i0.ɵɵlistener(\"click\", function FormAplicacionComponent_mat_tree_node_9_Template_button_click_6_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r22);\n      const node_r20 = restoredCtx.$implicit;\n      const ctx_r23 = i0.ɵɵnextContext();\n      return ctx_r23.addNewItem(node_r20);\n    });\n    i0.ɵɵelementStart(7, \"mat-icon\");\n    i0.ɵɵtext(8, \"add\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const node_r20 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"aria-label\", \"Toggle \" + node_r20.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.treeControl.isExpanded(node_r20) ? \"expand_more\" : \"chevron_right\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"checked\", ctx_r3.descendantsAllSelected(node_r20))(\"indeterminate\", ctx_r3.descendantsPartiallySelected(node_r20));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(node_r20.title);\n  }\n}\n/**\r\n * Node for to-do item\r\n */\n\n\nexport class TodoItemNode {}\n/** Flat to-do item node with expandable and level information */\n\nexport class TodoItemFlatNode {}\n/**\r\n * Checklist database, it can build a tree structured Json object.\r\n * Each node in Json object represents a to-do item or a category.\r\n * If a node is a category, it has children ite|s and new items can be added under the category.\r\n */\n\nexport class ChecklistDatabase {\n  constructor(opcionService) {\n    this.opcionService = opcionService;\n    this.dataChange = new BehaviorSubject([]);\n    this.initialize();\n  }\n\n  get data() {\n    return this.dataChange.value;\n  }\n\n  initialize() {\n    if (localStorage.getItem(\"idRegistro\") != \"null\") {\n      //EsEdicion\n      this.opcionService.listarOpcionesxPerfil(parseInt(localStorage.getItem(\"idRegistro\"))).then(data => {\n        this.dataChange.next(data);\n      });\n    } else {\n      this.opcionService.listarOpcionesxApp().then(data => {\n        this.dataChange.next(data);\n      });\n    }\n  }\n  /** Add an item to to-do list */\n\n\n  insertItem(parent, name) {\n    if (parent.children) {\n      parent.children.push({\n        title: name\n      });\n      this.dataChange.next(this.data);\n    }\n  }\n\n  updateItem(node, name) {\n    node.title = name;\n    this.dataChange.next(this.data);\n  }\n\n}\n\nChecklistDatabase.ɵfac = function ChecklistDatabase_Factory(t) {\n  return new (t || ChecklistDatabase)(i0.ɵɵinject(i1.OpcionService));\n};\n\nChecklistDatabase.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ChecklistDatabase,\n  factory: ChecklistDatabase.ɵfac\n});\nexport class FormAplicacionComponent {\n  constructor(_database, dialogo, fb) {\n    this._database = _database;\n    this.dialogo = dialogo;\n    this.fb = fb;\n    this.onGuardar = new EventEmitter();\n    /** Map from flat node to nested node. This helps us finding the nested node to be modified */\n\n    this.flatNodeMap = new Map();\n    /** Map from nested node to flattened node. This helps us to keep the same object for selection */\n\n    this.nestedNodeMap = new Map();\n    /** A selected parent node to be inserted */\n\n    this.selectedParent = null;\n    /** The new item's name */\n\n    this.newItemName = '';\n    /** The selection for checklist */\n\n    this.checklistSelection = new SelectionModel(true\n    /* multiple */\n    );\n\n    this.getLevel = node => node.level;\n\n    this.isExpandable = node => node.expandable;\n\n    this.getChildren = node => node.children;\n\n    this.hasChild = (_, _nodeData) => _nodeData.expandable;\n\n    this.hasNoContent = (_, _nodeData) => _nodeData.title === '';\n    /**\r\n     * Transformer to convert nested node to flat node. Record the nodes in maps for later use.\r\n     */\n\n\n    this.transformer = (node, level) => {\n      var _a;\n\n      const existingNode = this.nestedNodeMap.get(node);\n      const flatNode = existingNode && existingNode.title === node.title ? existingNode : new TodoItemFlatNode();\n      flatNode.title = node.title;\n      flatNode.level = level;\n      flatNode.expandable = !!((_a = node.children) === null || _a === void 0 ? void 0 : _a.length);\n      flatNode.id = node.id;\n      flatNode.isboton = node.isboton;\n      flatNode.parentId = node.parentId;\n      flatNode.isSelected = node.isSelected; //console.log(node);\n\n      this.flatNodeMap.set(flatNode, node);\n      this.nestedNodeMap.set(node, flatNode);\n      return flatNode;\n    };\n\n    this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n    this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable);\n    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n    _database.dataChange.subscribe(data => {\n      this.dataSource.data = data;\n      this.checkAll();\n    });\n  }\n\n  checkAll() {\n    for (let item of this.treeControl.dataNodes) {\n      if (item.isSelected == true) this.checklistSelection.select(item);\n    }\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.objRegistro) {\n        //EsEdicion            \n        _this.formulario = _this.fb.group({\n          nombre: [{\n            value: _this.objRegistro.Nombre,\n            disabled: false\n          }, [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],\n          descripcion: [{\n            value: _this.objRegistro.Descripcion,\n            disabled: false\n          }, [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],\n          Peso: [{\n            value: _this.objRegistro.Peso,\n            disabled: false\n          }, [Validators.required]]\n        });\n      } else {\n        _this.formulario = new FormGroup({\n          nombre: new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]),\n          descripcion: new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]),\n          Peso: new FormControl('', [Validators.required])\n        });\n      }\n    })();\n  }\n  /** Whether all the descendants of the node are selected. */\n\n\n  descendantsAllSelected(node) {\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected = descendants.length > 0 && descendants.every(child => {\n      return this.checklistSelection.isSelected(child);\n    });\n    return descAllSelected;\n  }\n  /** Whether part of the descendants are selected */\n\n\n  descendantsPartiallySelected(node) {\n    const descendants = this.treeControl.getDescendants(node);\n    const result = descendants.some(child => this.checklistSelection.isSelected(child));\n    return result && !this.descendantsAllSelected(node);\n  }\n  /** Toggle the to-do item selection. Select/deselect all the descendants node */\n\n\n  todoItemSelectionToggle(node) {\n    this.checklistSelection.toggle(node);\n    const descendants = this.treeControl.getDescendants(node);\n    this.checklistSelection.isSelected(node) ? this.checklistSelection.select(...descendants) : this.checklistSelection.deselect(...descendants); // Force update for the parent\n\n    descendants.forEach(child => this.checklistSelection.isSelected(child));\n    this.checkAllParentsSelection(node);\n  }\n  /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */\n\n\n  todoLeafItemSelectionToggle(node) {\n    this.checklistSelection.toggle(node);\n    this.checkAllParentsSelection(node);\n  }\n  /* Checks all the parents when a leaf node is selected/unselected */\n\n\n  checkAllParentsSelection(node) {\n    let parent = this.getParentNode(node);\n\n    while (parent) {\n      this.checkRootNodeSelection(parent);\n      parent = this.getParentNode(parent);\n    }\n  }\n  /** Check root node checked state and change it accordingly */\n\n\n  checkRootNodeSelection(node) {\n    const nodeSelected = this.checklistSelection.isSelected(node);\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected = descendants.length > 0 && descendants.every(child => {\n      return this.checklistSelection.isSelected(child);\n    });\n\n    if (nodeSelected && !descAllSelected) {\n      this.checklistSelection.deselect(node);\n    } else if (!nodeSelected && descAllSelected) {\n      this.checklistSelection.select(node);\n    }\n  }\n  /* Get the parent node of a node */\n\n\n  getParentNode(node) {\n    const currentLevel = this.getLevel(node);\n\n    if (currentLevel < 1) {\n      return null;\n    }\n\n    const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n\n    for (let i = startIndex; i >= 0; i--) {\n      const currentNode = this.treeControl.dataNodes[i];\n\n      if (this.getLevel(currentNode) < currentLevel) {\n        return currentNode;\n      }\n    }\n\n    return null;\n  }\n  /** Select the category so we can insert the new item. */\n\n\n  addNewItem(node) {\n    const parentNode = this.flatNodeMap.get(node);\n\n    this._database.insertItem(parentNode, '');\n\n    this.treeControl.expand(node);\n  }\n  /** Save the node to database */\n\n\n  saveNode(node, itemValue) {\n    const nestedNode = this.flatNodeMap.get(node);\n\n    this._database.updateItem(nestedNode, itemValue);\n  }\n\n  guardar() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this2.formulario.invalid) {\n        _this2.formulario.markAllAsTouched();\n\n        return;\n      }\n\n      _this2.dialogo.open(DialogoConfirmacionComponent, {\n        maxWidth: '25vw',\n        maxHeight: 'auto',\n        height: 'auto',\n        width: '25%',\n        disableClose: true,\n        data: {\n          titulo: `Registro de Roles`,\n          mensaje: `¿Está seguro que desea grabar?`\n        }\n      }).afterClosed().subscribe( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (Ok) {\n          if (Ok) {\n            var menuSelect = _this2.checklistSelection.selected;\n\n            var botones = _this2.checklistSelection.selected.filter(a => a.isboton).map(x => {\n              return x.id;\n            });\n\n            var opciones = menuSelect.map(x => {\n              return x.parentId;\n            }); //tomamos todos los parenId, ya que son opciones\n\n            menuSelect.filter(a => !a.isboton).map(x => {\n              opciones.push(x.id);\n            }); //opciones de los botones    \n\n            _this2.treeControl.dataNodes.filter(a => opciones.includes(a.id)).map(x => {\n              opciones.push(x.parentId);\n            }); //lectura de modulos\n\n\n            opciones = opciones.filter((item, i, arr) => arr.findIndex(t => t === item) === i);\n            let request = {\n              Id: _this2.objRegistro ? _this2.objRegistro.Id : 0,\n              nombre: _this2.formulario.value.nombre,\n              descripcion: _this2.formulario.value.descripcion,\n              Peso: _this2.formulario.value.Peso,\n              listOpciones: opciones,\n              listAcciones: botones,\n              idAplicacion: localStorage.getItem(\"App\")\n            };\n\n            _this2.onGuardar.emit(request);\n          }\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n\n}\n\nFormAplicacionComponent.ɵfac = function FormAplicacionComponent_Factory(t) {\n  return new (t || FormAplicacionComponent)(i0.ɵɵdirectiveInject(ChecklistDatabase), i0.ɵɵdirectiveInject(i2.MatDialog), i0.ɵɵdirectiveInject(i3.FormBuilder));\n};\n\nFormAplicacionComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FormAplicacionComponent,\n  selectors: [[\"app-form-aplicacion-page\"]],\n  inputs: {\n    objRegistro: \"objRegistro\"\n  },\n  outputs: {\n    onGuardar: \"onGuardar\"\n  },\n  features: [i0.ɵɵProvidersFeature([ChecklistDatabase])],\n  decls: 10,\n  vars: 5,\n  consts: [[\"autocomplete\", \"on\", 3, \"formGroup\", \"ngSubmit\", 4, \"ngIf\"], [1, \"form-group\", \"border\", \"p-3\"], [1, \"w-auto\", \"px-2\"], [1, \"row\"], [1, \"col-md-12\"], [3, \"dataSource\", \"treeControl\"], [\"matTreeNodeToggle\", \"\", \"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\", \"matTreeNodeDefWhen\"], [\"autocomplete\", \"on\", 3, \"formGroup\", \"ngSubmit\"], [\"mat-raised-button\", \"\", 1, \"btn\"], [\"mat-raised-button\", \"\", 1, \"btn\", \"btn-info\", 3, \"routerLink\"], [1, \"col-md-5\"], [\"appearance\", \"outline\"], [\"matInput\", \"\", \"formControlName\", \"nombre\"], [4, \"ngIf\"], [\"matInput\", \"\", \"formControlName\", \"descripcion\"], [1, \"col-md-2\"], [\"matInput\", \"\", \"type\", \"number\", \"formControlName\", \"Peso\"], [\"matTreeNodeToggle\", \"\", \"matTreeNodePadding\", \"\"], [\"mat-icon-button\", \"\", \"disabled\", \"\"], [1, \"checklist-leaf-node\", 3, \"checked\", \"change\"], [\"matTreeNodePadding\", \"\"], [\"appearance\", \"fill\"], [\"matInput\", \"\", \"placeholder\", \"Ex. Lettuce\"], [\"itemValue\", \"\"], [\"mat-button\", \"\", 3, \"click\"], [\"mat-icon-button\", \"\", \"matTreeNodeToggle\", \"\"], [1, \"mat-icon-rtl-mirror\"], [3, \"checked\", \"indeterminate\", \"change\"], [\"mat-icon-button\", \"\", 3, \"click\"]],\n  template: function FormAplicacionComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, FormAplicacionComponent_form_0_Template, 35, 10, \"form\", 0);\n      i0.ɵɵelementStart(1, \"fieldset\", 1);\n      i0.ɵɵelementStart(2, \"legend\", 2);\n      i0.ɵɵtext(3, \"OPCIONES Y BOTONES DEL SISTEMA\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 3);\n      i0.ɵɵelementStart(5, \"div\", 4);\n      i0.ɵɵelementStart(6, \"mat-tree\", 5);\n      i0.ɵɵtemplate(7, FormAplicacionComponent_mat_tree_node_7_Template, 4, 2, \"mat-tree-node\", 6);\n      i0.ɵɵtemplate(8, FormAplicacionComponent_mat_tree_node_8_Template, 9, 0, \"mat-tree-node\", 7);\n      i0.ɵɵtemplate(9, FormAplicacionComponent_mat_tree_node_9_Template, 9, 5, \"mat-tree-node\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.formulario);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasNoContent);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasChild);\n    }\n  },\n  directives: [i4.NgIf, i5.MatTree, i5.MatTreeNodeDef, i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.FormGroupDirective, i6.MatButton, i7.MatIcon, i6.MatAnchor, i8.RouterLinkWithHref, i9.MatFormField, i9.MatLabel, i10.MatInput, i3.DefaultValueAccessor, i3.NgControlStatus, i3.FormControlName, i3.NumberValueAccessor, i9.MatError, i5.MatTreeNode, i5.MatTreeNodeToggle, i5.MatTreeNodePadding, i11.MatCheckbox],\n  styles: [\".mat-mdc-form-field[_ngcontent-%COMP%] {\\r\\n    margin-right: 4px;\\r\\n  }\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvcm0tYXBsaWNhY2lvbi1wYWdlLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxpQkFBaUI7RUFDbkIiLCJmaWxlIjoiZm9ybS1hcGxpY2FjaW9uLXBhZ2UuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5tYXQtbWRjLWZvcm0tZmllbGQge1xyXG4gICAgbWFyZ2luLXJpZ2h0OiA0cHg7XHJcbiAgfSJdfQ== */\"]\n});","map":{"version":3,"sources":["C:\\Users\\Equipo\\source\\Tgsc-Proyectos\\youManager-web\\src\\app\\modules\\seguridad\\pages\\aplicacion\\form-aplicacion-page\\form-aplicacion-page.component.ts","C:\\Users\\Equipo\\source\\Tgsc-Proyectos\\youManager-web\\src\\app\\modules\\seguridad\\pages\\aplicacion\\form-aplicacion-page\\form-aplicacion-page.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output, Inject, Injectable } from '@angular/core';\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { OpcionService } from '@modules/seguridad/services/opcion.service';\r\nimport { RolesDto } from '@core/models/seguridad/RolesDto';\r\nimport { BootstrapNotifyBarService } from \"@shared/services/bootstrap-notify.service\";\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FormGroup, FormBuilder, Validators, FormControl, FormArray, ValidatorFn, AbstractControl } from '@angular/forms';\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {FlatTreeControl} from '@angular/cdk/tree';\r\nimport {MatTreeFlatDataSource, MatTreeFlattener} from '@angular/material/tree';\r\nimport {BehaviorSubject} from 'rxjs';\r\nimport { DialogoConfirmacionComponent } from '@shared/components/dialogo-confirmacion/dialogo-confirmacion.component';\r\n\r\n\r\n/**\r\n * Node for to-do item\r\n */\r\n export class TodoItemNode {\r\n  children: TodoItemNode[];\r\n  title: string;\r\n}\r\n/** Flat to-do item node with expandable and level information */\r\nexport class TodoItemFlatNode {\r\n  title: string;\r\n  level: number;\r\n  expandable: boolean;\r\n  isboton : boolean;\r\n}\r\n/**\r\n * Checklist database, it can build a tree structured Json object.\r\n * Each node in Json object represents a to-do item or a category.\r\n * If a node is a category, it has children ite|s and new items can be added under the category.\r\n */\r\n @Injectable()\r\n export class ChecklistDatabase {\r\n   dataChange = new BehaviorSubject<TodoItemNode[]>([]);   \r\n   get data(): TodoItemNode[] {\r\n     return this.dataChange.value;\r\n   }\r\n \r\n   constructor(private opcionService: OpcionService) {\r\n     this.initialize();\r\n   }\r\n \r\n   initialize() {\r\n    if(localStorage.getItem(\"idRegistro\")!=\"null\"){ //EsEdicion\r\n      this.opcionService.listarOpcionesxPerfil(parseInt(localStorage.getItem(\"idRegistro\"))).then((data: any[]) => {                    \r\n        this.dataChange.next(data);  \r\n      });      \r\n    }else{\r\n      this.opcionService.listarOpcionesxApp().then((data: any[]) => {            \r\n        this.dataChange.next(data);  \r\n      });\r\n    }        \r\n   }\r\n \r\n   /** Add an item to to-do list */\r\n   insertItem(parent: TodoItemNode, name: string) {\r\n     if (parent.children) {\r\n       parent.children.push({title: name} as TodoItemNode);\r\n       this.dataChange.next(this.data);\r\n     }\r\n   }\r\n \r\n   updateItem(node: TodoItemNode, name: string) {\r\n     node.title = name;\r\n     this.dataChange.next(this.data);\r\n   }\r\n }\r\n\r\n\r\n@Component({\r\n  selector: 'app-form-aplicacion-page',\r\n  templateUrl: './form-aplicacion-page.component.html',\r\n  styleUrls:['./form-aplicacion-page.component.css'],\r\n  providers: [ \r\n    ChecklistDatabase\r\n  ]\r\n})\r\nexport class FormAplicacionComponent implements OnInit {\r\n  @Input() objRegistro: any;\r\n  @Output() onGuardar: EventEmitter<any> = new EventEmitter();  \r\n  formulario: FormGroup;\r\n  \r\n  /** Map from flat node to nested node. This helps us finding the nested node to be modified */\r\n  flatNodeMap = new Map<TodoItemFlatNode, TodoItemNode>();\r\n\r\n  /** Map from nested node to flattened node. This helps us to keep the same object for selection */\r\n  nestedNodeMap = new Map<TodoItemNode, TodoItemFlatNode>();\r\n\r\n  /** A selected parent node to be inserted */\r\n  selectedParent: TodoItemFlatNode | null = null;\r\n\r\n  /** The new item's name */\r\n  newItemName = '';\r\n\r\n  treeControl: FlatTreeControl<TodoItemFlatNode>;\r\n\r\n  treeFlattener: MatTreeFlattener<TodoItemNode, TodoItemFlatNode>;\r\n\r\n  dataSource: MatTreeFlatDataSource<TodoItemNode, TodoItemFlatNode>;\r\n\r\n  /** The selection for checklist */\r\n  checklistSelection = new SelectionModel<TodoItemFlatNode>(true /* multiple */);\r\n  decryptedMessage : string;\r\n\r\n  constructor(private _database: ChecklistDatabase,\r\n              public dialogo: MatDialog,\r\n              private fb: FormBuilder) {    \r\n    this.treeFlattener = new MatTreeFlattener(this.transformer,this.getLevel,this.isExpandable,this.getChildren);\r\n    this.treeControl = new FlatTreeControl<TodoItemFlatNode>(this.getLevel, this.isExpandable);\r\n    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\r\n    _database.dataChange.subscribe(data => {\r\n      this.dataSource.data = data;\r\n      this.checkAll();\r\n    });\r\n  }\r\n  checkAll(): void {\r\n    for(let item of this.treeControl.dataNodes) {\r\n      if((item as any).isSelected as boolean == true)\r\n         this.checklistSelection.select(item);\r\n    }\r\n  } \r\n  async ngOnInit() {\r\n    if(this.objRegistro){ //EsEdicion            \r\n      this.formulario = this.fb.group({      \r\n        nombre: [{ value: this.objRegistro.Nombre, disabled: false }, [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],        \r\n        descripcion: [{ value: this.objRegistro.Descripcion, disabled: false }, [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],\r\n        Peso: [{ value: this.objRegistro.Peso, disabled: false }, [Validators.required]]\r\n      });\r\n    }else{\r\n      this.formulario = new FormGroup({      \r\n        nombre: new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]),\r\n        descripcion: new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]),\r\n        Peso: new FormControl('', [Validators.required])      \r\n      });\r\n    }\r\n  }\r\n  getLevel = (node: TodoItemFlatNode) => node.level;\r\n\r\n  isExpandable = (node: TodoItemFlatNode) => node.expandable;\r\n\r\n  getChildren = (node: TodoItemNode): TodoItemNode[] => node.children;\r\n\r\n  hasChild = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.expandable;\r\n\r\n  hasNoContent = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.title === '';\r\n\r\n  /**\r\n   * Transformer to convert nested node to flat node. Record the nodes in maps for later use.\r\n   */\r\n  transformer = (node: any, level: number) => {\r\n       \r\n    const existingNode = this.nestedNodeMap.get(node) as any;\r\n    const flatNode =\r\n      existingNode && existingNode.title === node.title ? existingNode : new TodoItemFlatNode();\r\n    flatNode.title = node.title;\r\n    flatNode.level = level;\r\n    flatNode.expandable = !!node.children?.length;\r\n    flatNode.id=node.id;\r\n    flatNode.isboton=node.isboton;\r\n    flatNode.parentId=node.parentId;\r\n    flatNode.isSelected=node.isSelected;\r\n\r\n    //console.log(node);\r\n\r\n    this.flatNodeMap.set(flatNode, node);\r\n    this.nestedNodeMap.set(node, flatNode);\r\n    \r\n    \r\n    return flatNode;\r\n  };\r\n\r\n  /** Whether all the descendants of the node are selected. */\r\n  descendantsAllSelected(node: TodoItemFlatNode): boolean {\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    const descAllSelected =\r\n      descendants.length > 0 &&\r\n      descendants.every(child => {\r\n        return this.checklistSelection.isSelected(child);\r\n      });\r\n    return descAllSelected;\r\n  }\r\n\r\n  /** Whether part of the descendants are selected */\r\n  descendantsPartiallySelected(node: TodoItemFlatNode): boolean {\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    const result = descendants.some(child => this.checklistSelection.isSelected(child));\r\n    return result && !this.descendantsAllSelected(node);\r\n  }\r\n\r\n  /** Toggle the to-do item selection. Select/deselect all the descendants node */\r\n  todoItemSelectionToggle(node: TodoItemFlatNode): void {\r\n    this.checklistSelection.toggle(node);\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    this.checklistSelection.isSelected(node)\r\n      ? this.checklistSelection.select(...descendants)\r\n      : this.checklistSelection.deselect(...descendants);\r\n\r\n    // Force update for the parent\r\n    descendants.forEach(child => this.checklistSelection.isSelected(child));\r\n    this.checkAllParentsSelection(node);\r\n  }\r\n\r\n  /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */\r\n  todoLeafItemSelectionToggle(node: TodoItemFlatNode): void {    \r\n    this.checklistSelection.toggle(node);\r\n    this.checkAllParentsSelection(node);\r\n  }\r\n\r\n  /* Checks all the parents when a leaf node is selected/unselected */\r\n  checkAllParentsSelection(node: TodoItemFlatNode): void {\r\n    let parent: TodoItemFlatNode | null = this.getParentNode(node);\r\n    while (parent) {\r\n      this.checkRootNodeSelection(parent);\r\n      parent = this.getParentNode(parent);\r\n    }\r\n  }\r\n\r\n  /** Check root node checked state and change it accordingly */\r\n  checkRootNodeSelection(node: TodoItemFlatNode): void {\r\n    const nodeSelected = this.checklistSelection.isSelected(node);\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    const descAllSelected =\r\n      descendants.length > 0 &&\r\n      descendants.every(child => {\r\n        return this.checklistSelection.isSelected(child);\r\n      });\r\n    if (nodeSelected && !descAllSelected) {\r\n      this.checklistSelection.deselect(node);\r\n    } else if (!nodeSelected && descAllSelected) {\r\n      this.checklistSelection.select(node);\r\n    }\r\n  }\r\n\r\n  /* Get the parent node of a node */\r\n  getParentNode(node: TodoItemFlatNode): TodoItemFlatNode | null {\r\n    const currentLevel = this.getLevel(node);\r\n\r\n    if (currentLevel < 1) {\r\n      return null;\r\n    }\r\n\r\n    const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\r\n\r\n    for (let i = startIndex; i >= 0; i--) {\r\n      const currentNode = this.treeControl.dataNodes[i];\r\n\r\n      if (this.getLevel(currentNode) < currentLevel) {\r\n        return currentNode;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Select the category so we can insert the new item. */\r\n  addNewItem(node: TodoItemFlatNode) {\r\n    const parentNode = this.flatNodeMap.get(node);\r\n    this._database.insertItem(parentNode!, '');\r\n    this.treeControl.expand(node);\r\n  }\r\n\r\n  /** Save the node to database */\r\n  saveNode(node: TodoItemFlatNode, itemValue: string) {\r\n    const nestedNode = this.flatNodeMap.get(node);\r\n    this._database.updateItem(nestedNode!, itemValue);\r\n  }\r\n  async guardar() {\r\n    if (this.formulario.invalid) {\r\n      this.formulario.markAllAsTouched();\r\n      return;\r\n    }\r\n    this.dialogo.open(DialogoConfirmacionComponent, { maxWidth: '25vw', maxHeight: 'auto', height: 'auto', width: '25%', disableClose: true,\r\n      data: { titulo: `Registro de Roles`, mensaje: `¿Está seguro que desea grabar?` }\r\n    }).afterClosed().subscribe(async (Ok: Boolean) => {\r\n        if (Ok) {\r\n          var menuSelect : any[] = this.checklistSelection.selected;\r\n          var botones : any[] =this.checklistSelection.selected.filter(a=>a.isboton).map(x => { return (x as any).id })\r\n          var opciones : number[] = menuSelect.map(x => { return (x as any).parentId });//tomamos todos los parenId, ya que son opciones\r\n          menuSelect.filter(a=>!a.isboton).map(x => { opciones.push((x as any).id)  });//opciones de los botones    \r\n          this.treeControl.dataNodes.filter(a=>opciones.includes((a as any).id)).map(x => { opciones.push((x as any).parentId) }); //lectura de modulos\r\n          opciones =  opciones.filter((item, i, arr) => arr.findIndex((t) => t=== item) === i);\r\n          \r\n          let request: any = {\r\n            Id : this.objRegistro ? this.objRegistro.Id : 0,\r\n            nombre : this.formulario.value.nombre,\r\n            descripcion : this.formulario.value.descripcion,\r\n            Peso : this.formulario.value.Peso,\r\n            listOpciones :  opciones,\r\n            listAcciones : botones,\r\n            idAplicacion : localStorage.getItem(\"App\")\r\n          };          \r\n          this.onGuardar.emit(request);\r\n        }\r\n      });\r\n  }\r\n}","<form autocomplete=\"on\" [formGroup]=\"formulario\" (ngSubmit)=\"guardar()\" *ngIf=\"formulario\">\r\n  <div class=\"row\">\r\n    <div class=\"col-md-12\">\r\n        <button mat-raised-button class=\"btn\">Guardar<mat-icon>save</mat-icon></button>\r\n        <a class=\"btn btn-info\" mat-raised-button [routerLink]=\"['/seguridad/bandusuario']\">Cancelar<mat-icon>block</mat-icon></a>\r\n    </div>\r\n  </div>\r\n  <fieldset class=\"form-group border p-3\">        \r\n      <div class=\"row\">\r\n          <div class=\"col-md-5\">\r\n              <mat-form-field appearance=\"outline\">\r\n                  <mat-label>Nombre</mat-label>\r\n                  <input matInput formControlName=\"nombre\">\r\n                  <mat-error *ngIf=\"formulario.controls['nombre'].hasError('required')\">\r\n                      Este campo es obligatorio\r\n                  </mat-error>\r\n                  <mat-error *ngIf=\"formulario.controls['nombre'].hasError('minlength')\">\r\n                    Este campo debe contener 3 caracteres como mínimo\r\n                  </mat-error>                  \r\n                  <mat-error *ngIf=\"formulario.controls['nombre'].hasError('maxlength')\">\r\n                    Este campo debe contener 50 caracteres como máximo\r\n                  </mat-error>\r\n              </mat-form-field>\r\n          </div>\r\n          <div class=\"col-md-5\">\r\n              <mat-form-field appearance=\"outline\">\r\n                  <mat-label>Descripción</mat-label>\r\n                  <input matInput formControlName=\"descripcion\">\r\n                  <mat-error *ngIf=\"formulario.controls['descripcion'].hasError('required')\">\r\n                      Este campo es obligatorio\r\n                  </mat-error> \r\n                  <mat-error *ngIf=\"formulario.controls['descripcion'].hasError('minlength')\">\r\n                    Este campo debe contener 3 caracteres como mínimo\r\n                  </mat-error>                  \r\n                  <mat-error *ngIf=\"formulario.controls['descripcion'].hasError('maxlength')\">\r\n                    Este campo debe contener 50 caracteres como máximo\r\n                  </mat-error>\r\n              </mat-form-field>\r\n          </div> \r\n          <div class=\"col-md-2\">\r\n            <mat-form-field appearance=\"outline\">\r\n                <mat-label>Peso</mat-label>\r\n                <input matInput type=\"number\" formControlName=\"Peso\">\r\n                <mat-error *ngIf=\"formulario.controls['Peso'].hasError('required')\">\r\n                    Este campo es obligatorio\r\n                </mat-error>                \r\n            </mat-form-field>\r\n        </div>\r\n      </div>\r\n  </fieldset>\r\n</form>\r\n<fieldset class=\"form-group border p-3\">\r\n  <legend class=\"w-auto px-2\">OPCIONES Y BOTONES DEL SISTEMA</legend>\r\n  <div class=\"row\">\r\n      <div class=\"col-md-12\">                        \r\n        <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\r\n          <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodeToggle matTreeNodePadding>\r\n            <button mat-icon-button disabled></button>\r\n            <mat-checkbox class=\"checklist-leaf-node\"\r\n                          [checked]=\"checklistSelection.isSelected(node)\"\r\n                          (change)=\"todoLeafItemSelectionToggle(node)\">{{node.title}}</mat-checkbox>\r\n          </mat-tree-node>\r\n        \r\n          <mat-tree-node *matTreeNodeDef=\"let node; when: hasNoContent\" matTreeNodePadding>\r\n            <button mat-icon-button disabled></button>\r\n            <mat-form-field appearance=\"fill\">\r\n              <mat-label>New item...</mat-label>\r\n              <input matInput #itemValue placeholder=\"Ex. Lettuce\">\r\n            </mat-form-field>\r\n            <button mat-button (click)=\"saveNode(node, itemValue.value)\">Save</button>\r\n          </mat-tree-node>\r\n        \r\n          <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\r\n            <button mat-icon-button matTreeNodeToggle\r\n                    [attr.aria-label]=\"'Toggle ' + node.title\">\r\n              <mat-icon class=\"mat-icon-rtl-mirror\">\r\n                {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\r\n              </mat-icon>\r\n            </button>\r\n            <mat-checkbox [checked]=\"descendantsAllSelected(node)\"\r\n                          [indeterminate]=\"descendantsPartiallySelected(node)\"\r\n                          (change)=\"todoItemSelectionToggle(node)\">{{node.title}}</mat-checkbox>\r\n            <button mat-icon-button (click)=\"addNewItem(node)\" ><mat-icon>add</mat-icon></button>\r\n          </mat-tree-node>\r\n        </mat-tree>\r\n      </div>\r\n  </div>\r\n</fieldset>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}