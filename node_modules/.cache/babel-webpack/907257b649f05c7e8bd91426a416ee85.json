{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Equipo/source/Tgsc-Proyectos/rrhh-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { URLBuilder } from \"@azure/core-http\";\nimport { BaseRequestPolicy } from \"@azure/core-http\";\nimport { delay } from \"@azure/core-http\";\n/**\n * A set of constants used internally when processing requests.\n */\n\nconst Constants = {\n  DefaultScope: \"/.default\",\n\n  /**\n   * Defines constants for use with HTTP headers.\n   */\n  HeaderConstants: {\n    /**\n     * The Authorization header.\n     */\n    AUTHORIZATION: \"authorization\"\n  }\n}; // Default options for the cycler if none are provided\n\nconst DEFAULT_CYCLER_OPTIONS = {\n  forcedRefreshWindowInMs: 1000,\n  retryIntervalInMs: 3000,\n  refreshWindowInMs: 1000 * 60 * 2 // Start refreshing 2m before expiry\n\n};\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - a function that produces a promise of an access\n * token that may fail by returning null\n * @param retryIntervalInMs - the time (in milliseconds) to wait between retry\n * attempts\n * @param timeoutInMs - the timestamp after which the refresh attempt will fail,\n * throwing an exception\n * @returns - a promise that, if it resolves, will resolve with an access token\n */\n\nfunction beginRefresh(_x, _x2, _x3) {\n  return _beginRefresh.apply(this, arguments);\n}\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param scopes - the scopes to request authorization for\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\n\n\nfunction _beginRefresh() {\n  _beginRefresh = _asyncToGenerator(function* (getAccessToken, retryIntervalInMs, timeoutInMs) {\n    // This wrapper handles exceptions gracefully as long as we haven't exceeded\n    // the timeout.\n    function tryGetAccessToken() {\n      return _tryGetAccessToken.apply(this, arguments);\n    }\n\n    function _tryGetAccessToken() {\n      _tryGetAccessToken = _asyncToGenerator(function* () {\n        if (Date.now() < timeoutInMs) {\n          try {\n            return yield getAccessToken();\n          } catch (_a) {\n            return null;\n          }\n        } else {\n          const finalToken = yield getAccessToken(); // Timeout is up, so throw if it's still null\n\n          if (finalToken === null) {\n            throw new Error(\"Failed to refresh access token.\");\n          }\n\n          return finalToken;\n        }\n      });\n      return _tryGetAccessToken.apply(this, arguments);\n    }\n\n    let token = yield tryGetAccessToken();\n\n    while (token === null) {\n      yield delay(retryIntervalInMs);\n      token = yield tryGetAccessToken();\n    }\n\n    return token;\n  });\n  return _beginRefresh.apply(this, arguments);\n}\n\nfunction createTokenCycler(credential, scopes, tokenCyclerOptions) {\n  let refreshWorker = null;\n  let token = null;\n  const options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);\n  /**\n   * This little holder defines several predicates that we use to construct\n   * the rules of refreshing the token.\n   */\n\n  const cycler = {\n    /**\n     * Produces true if a refresh job is currently in progress.\n     */\n    get isRefreshing() {\n      return refreshWorker !== null;\n    },\n\n    /**\n     * Produces true if the cycler SHOULD refresh (we are within the refresh\n     * window and not already refreshing)\n     */\n    get shouldRefresh() {\n      var _a;\n\n      return !cycler.isRefreshing && ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now();\n    },\n\n    /**\n     * Produces true if the cycler MUST refresh (null or nearly-expired\n     * token).\n     */\n    get mustRefresh() {\n      return token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now();\n    }\n\n  };\n  /**\n   * Starts a refresh job or returns the existing job if one is already\n   * running.\n   */\n\n  function refresh(getTokenOptions) {\n    var _a;\n\n    if (!cycler.isRefreshing) {\n      // We bind `scopes` here to avoid passing it around a lot\n      const tryGetAccessToken = () => credential.getToken(scopes, getTokenOptions); // Take advantage of promise chaining to insert an assignment to `token`\n      // before the refresh can be considered done.\n\n\n      refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs, // If we don't have a token, then we should timeout immediately\n      (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now()).then(_token => {\n        refreshWorker = null;\n        token = _token;\n        return token;\n      }).catch(reason => {\n        // We also should reset the refresher if we enter a failed state.  All\n        // existing awaiters will throw, but subsequent requests will start a\n        // new retry chain.\n        refreshWorker = null;\n        token = null;\n        throw reason;\n      });\n    }\n\n    return refreshWorker;\n  }\n\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (tokenOptions) {\n      //\n      // Simple rules:\n      // - If we MUST refresh, then return the refresh task, blocking\n      //   the pipeline until a token is available.\n      // - If we SHOULD refresh, then run refresh but don't return it\n      //   (we can still use the cached token).\n      // - Return the token, since it's fine if we didn't return in\n      //   step 1.\n      //\n      if (cycler.mustRefresh) return refresh(tokenOptions);\n\n      if (cycler.shouldRefresh) {\n        refresh(tokenOptions);\n      }\n\n      return token;\n    });\n\n    return function (_x4) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}\n/**\n * We will retrieve the challenge only if the response status code was 401,\n * and if the response contained the header \"WWW-Authenticate\" with a non-empty value.\n */\n\n\nfunction getChallenge(response) {\n  const challenge = response.headers.get(\"WWW-Authenticate\");\n\n  if (response.status === 401 && challenge) {\n    return challenge;\n  }\n\n  return;\n}\n/**\n * Converts: `Bearer a=\"b\" c=\"d\"`.\n * Into: `[ { a: 'b', c: 'd' }]`.\n *\n * @internal\n */\n\n\nfunction parseChallenge(challenge) {\n  const bearerChallenge = challenge.slice(\"Bearer \".length);\n  const challengeParts = `${bearerChallenge.trim()} `.split(\" \").filter(x => x);\n  const keyValuePairs = challengeParts.map(keyValue => (([key, value]) => ({\n    [key]: value\n  }))(keyValue.trim().split(\"=\"))); // Key-value pairs to plain object:\n\n  return keyValuePairs.reduce((a, b) => Object.assign(Object.assign({}, a), b), {});\n} // #endregion\n\n/**\n * Creates a new factory for a RequestPolicy that applies a bearer token to\n * the requests' `Authorization` headers.\n *\n * @param credential - The TokenCredential implementation that can supply the bearer token.\n * @param scopes - The scopes for which the bearer token applies.\n */\n\n\nexport function storageBearerTokenChallengeAuthenticationPolicy(credential, scopes) {\n  // This simple function encapsulates the entire process of reliably retrieving the token\n  let getToken = createTokenCycler(credential, scopes);\n\n  class StorageBearerTokenChallengeAuthenticationPolicy extends BaseRequestPolicy {\n    constructor(nextPolicy, options) {\n      super(nextPolicy, options);\n    }\n\n    sendRequest(webResource) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        if (!webResource.url.toLowerCase().startsWith(\"https://\")) {\n          throw new Error(\"Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.\");\n        }\n\n        const getTokenInternal = getToken;\n        const token = (yield getTokenInternal({\n          abortSignal: webResource.abortSignal,\n          tracingOptions: {\n            tracingContext: webResource.tracingContext\n          }\n        })).token;\n        webResource.headers.set(Constants.HeaderConstants.AUTHORIZATION, `Bearer ${token}`);\n        const response = yield _this._nextPolicy.sendRequest(webResource);\n\n        if ((response === null || response === void 0 ? void 0 : response.status) === 401) {\n          const challenge = getChallenge(response);\n\n          if (challenge) {\n            const challengeInfo = parseChallenge(challenge);\n            const challengeScopes = challengeInfo.resource_id + Constants.DefaultScope;\n            const parsedAuthUri = URLBuilder.parse(challengeInfo.authorization_uri);\n            const pathSegments = parsedAuthUri.getPath().split(\"/\");\n            const tenantId = pathSegments[1];\n            const getTokenForChallenge = createTokenCycler(credential, challengeScopes);\n            const tokenForChallenge = (yield getTokenForChallenge({\n              abortSignal: webResource.abortSignal,\n              tracingOptions: {\n                tracingContext: webResource.tracingContext\n              },\n              tenantId: tenantId\n            })).token;\n            getToken = getTokenForChallenge;\n            webResource.headers.set(Constants.HeaderConstants.AUTHORIZATION, `Bearer ${tokenForChallenge}`);\n            return _this._nextPolicy.sendRequest(webResource);\n          }\n        }\n\n        return response;\n      })();\n    }\n\n  }\n\n  return {\n    create: (nextPolicy, options) => {\n      return new StorageBearerTokenChallengeAuthenticationPolicy(nextPolicy, options);\n    }\n  };\n} //# sourceMappingURL=StorageBearerTokenChallengeAuthenticationPolicy.js.map","map":{"version":3,"sources":["C:/Users/Equipo/source/Tgsc-Proyectos/rrhh-web/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBearerTokenChallengeAuthenticationPolicy.js"],"names":["URLBuilder","BaseRequestPolicy","delay","Constants","DefaultScope","HeaderConstants","AUTHORIZATION","DEFAULT_CYCLER_OPTIONS","forcedRefreshWindowInMs","retryIntervalInMs","refreshWindowInMs","beginRefresh","getAccessToken","timeoutInMs","tryGetAccessToken","Date","now","_a","finalToken","Error","token","createTokenCycler","credential","scopes","tokenCyclerOptions","refreshWorker","options","Object","assign","cycler","isRefreshing","shouldRefresh","expiresOnTimestamp","mustRefresh","refresh","getTokenOptions","getToken","then","_token","catch","reason","tokenOptions","getChallenge","response","challenge","headers","get","status","parseChallenge","bearerChallenge","slice","length","challengeParts","trim","split","filter","x","keyValuePairs","map","keyValue","key","value","reduce","a","b","storageBearerTokenChallengeAuthenticationPolicy","StorageBearerTokenChallengeAuthenticationPolicy","constructor","nextPolicy","sendRequest","webResource","url","toLowerCase","startsWith","getTokenInternal","abortSignal","tracingOptions","tracingContext","set","_nextPolicy","challengeInfo","challengeScopes","resource_id","parsedAuthUri","parse","authorization_uri","pathSegments","getPath","tenantId","getTokenForChallenge","tokenForChallenge","create"],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { URLBuilder } from \"@azure/core-http\";\nimport { BaseRequestPolicy, } from \"@azure/core-http\";\nimport { delay } from \"@azure/core-http\";\n/**\n * A set of constants used internally when processing requests.\n */\nconst Constants = {\n    DefaultScope: \"/.default\",\n    /**\n     * Defines constants for use with HTTP headers.\n     */\n    HeaderConstants: {\n        /**\n         * The Authorization header.\n         */\n        AUTHORIZATION: \"authorization\",\n    },\n};\n// Default options for the cycler if none are provided\nconst DEFAULT_CYCLER_OPTIONS = {\n    forcedRefreshWindowInMs: 1000,\n    retryIntervalInMs: 3000,\n    refreshWindowInMs: 1000 * 60 * 2, // Start refreshing 2m before expiry\n};\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - a function that produces a promise of an access\n * token that may fail by returning null\n * @param retryIntervalInMs - the time (in milliseconds) to wait between retry\n * attempts\n * @param timeoutInMs - the timestamp after which the refresh attempt will fail,\n * throwing an exception\n * @returns - a promise that, if it resolves, will resolve with an access token\n */\nasync function beginRefresh(getAccessToken, retryIntervalInMs, timeoutInMs) {\n    // This wrapper handles exceptions gracefully as long as we haven't exceeded\n    // the timeout.\n    async function tryGetAccessToken() {\n        if (Date.now() < timeoutInMs) {\n            try {\n                return await getAccessToken();\n            }\n            catch (_a) {\n                return null;\n            }\n        }\n        else {\n            const finalToken = await getAccessToken();\n            // Timeout is up, so throw if it's still null\n            if (finalToken === null) {\n                throw new Error(\"Failed to refresh access token.\");\n            }\n            return finalToken;\n        }\n    }\n    let token = await tryGetAccessToken();\n    while (token === null) {\n        await delay(retryIntervalInMs);\n        token = await tryGetAccessToken();\n    }\n    return token;\n}\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param scopes - the scopes to request authorization for\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\nfunction createTokenCycler(credential, scopes, tokenCyclerOptions) {\n    let refreshWorker = null;\n    let token = null;\n    const options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);\n    /**\n     * This little holder defines several predicates that we use to construct\n     * the rules of refreshing the token.\n     */\n    const cycler = {\n        /**\n         * Produces true if a refresh job is currently in progress.\n         */\n        get isRefreshing() {\n            return refreshWorker !== null;\n        },\n        /**\n         * Produces true if the cycler SHOULD refresh (we are within the refresh\n         * window and not already refreshing)\n         */\n        get shouldRefresh() {\n            var _a;\n            return (!cycler.isRefreshing &&\n                ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now());\n        },\n        /**\n         * Produces true if the cycler MUST refresh (null or nearly-expired\n         * token).\n         */\n        get mustRefresh() {\n            return (token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now());\n        },\n    };\n    /**\n     * Starts a refresh job or returns the existing job if one is already\n     * running.\n     */\n    function refresh(getTokenOptions) {\n        var _a;\n        if (!cycler.isRefreshing) {\n            // We bind `scopes` here to avoid passing it around a lot\n            const tryGetAccessToken = () => credential.getToken(scopes, getTokenOptions);\n            // Take advantage of promise chaining to insert an assignment to `token`\n            // before the refresh can be considered done.\n            refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs, \n            // If we don't have a token, then we should timeout immediately\n            (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now())\n                .then((_token) => {\n                refreshWorker = null;\n                token = _token;\n                return token;\n            })\n                .catch((reason) => {\n                // We also should reset the refresher if we enter a failed state.  All\n                // existing awaiters will throw, but subsequent requests will start a\n                // new retry chain.\n                refreshWorker = null;\n                token = null;\n                throw reason;\n            });\n        }\n        return refreshWorker;\n    }\n    return async (tokenOptions) => {\n        //\n        // Simple rules:\n        // - If we MUST refresh, then return the refresh task, blocking\n        //   the pipeline until a token is available.\n        // - If we SHOULD refresh, then run refresh but don't return it\n        //   (we can still use the cached token).\n        // - Return the token, since it's fine if we didn't return in\n        //   step 1.\n        //\n        if (cycler.mustRefresh)\n            return refresh(tokenOptions);\n        if (cycler.shouldRefresh) {\n            refresh(tokenOptions);\n        }\n        return token;\n    };\n}\n/**\n * We will retrieve the challenge only if the response status code was 401,\n * and if the response contained the header \"WWW-Authenticate\" with a non-empty value.\n */\nfunction getChallenge(response) {\n    const challenge = response.headers.get(\"WWW-Authenticate\");\n    if (response.status === 401 && challenge) {\n        return challenge;\n    }\n    return;\n}\n/**\n * Converts: `Bearer a=\"b\" c=\"d\"`.\n * Into: `[ { a: 'b', c: 'd' }]`.\n *\n * @internal\n */\nfunction parseChallenge(challenge) {\n    const bearerChallenge = challenge.slice(\"Bearer \".length);\n    const challengeParts = `${bearerChallenge.trim()} `.split(\" \").filter((x) => x);\n    const keyValuePairs = challengeParts.map((keyValue) => (([key, value]) => ({ [key]: value }))(keyValue.trim().split(\"=\")));\n    // Key-value pairs to plain object:\n    return keyValuePairs.reduce((a, b) => (Object.assign(Object.assign({}, a), b)), {});\n}\n// #endregion\n/**\n * Creates a new factory for a RequestPolicy that applies a bearer token to\n * the requests' `Authorization` headers.\n *\n * @param credential - The TokenCredential implementation that can supply the bearer token.\n * @param scopes - The scopes for which the bearer token applies.\n */\nexport function storageBearerTokenChallengeAuthenticationPolicy(credential, scopes) {\n    // This simple function encapsulates the entire process of reliably retrieving the token\n    let getToken = createTokenCycler(credential, scopes);\n    class StorageBearerTokenChallengeAuthenticationPolicy extends BaseRequestPolicy {\n        constructor(nextPolicy, options) {\n            super(nextPolicy, options);\n        }\n        async sendRequest(webResource) {\n            if (!webResource.url.toLowerCase().startsWith(\"https://\")) {\n                throw new Error(\"Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.\");\n            }\n            const getTokenInternal = getToken;\n            const token = (await getTokenInternal({\n                abortSignal: webResource.abortSignal,\n                tracingOptions: {\n                    tracingContext: webResource.tracingContext,\n                },\n            })).token;\n            webResource.headers.set(Constants.HeaderConstants.AUTHORIZATION, `Bearer ${token}`);\n            const response = await this._nextPolicy.sendRequest(webResource);\n            if ((response === null || response === void 0 ? void 0 : response.status) === 401) {\n                const challenge = getChallenge(response);\n                if (challenge) {\n                    const challengeInfo = parseChallenge(challenge);\n                    const challengeScopes = challengeInfo.resource_id + Constants.DefaultScope;\n                    const parsedAuthUri = URLBuilder.parse(challengeInfo.authorization_uri);\n                    const pathSegments = parsedAuthUri.getPath().split(\"/\");\n                    const tenantId = pathSegments[1];\n                    const getTokenForChallenge = createTokenCycler(credential, challengeScopes);\n                    const tokenForChallenge = (await getTokenForChallenge({\n                        abortSignal: webResource.abortSignal,\n                        tracingOptions: {\n                            tracingContext: webResource.tracingContext,\n                        },\n                        tenantId: tenantId,\n                    })).token;\n                    getToken = getTokenForChallenge;\n                    webResource.headers.set(Constants.HeaderConstants.AUTHORIZATION, `Bearer ${tokenForChallenge}`);\n                    return this._nextPolicy.sendRequest(webResource);\n                }\n            }\n            return response;\n        }\n    }\n    return {\n        create: (nextPolicy, options) => {\n            return new StorageBearerTokenChallengeAuthenticationPolicy(nextPolicy, options);\n        },\n    };\n}\n//# sourceMappingURL=StorageBearerTokenChallengeAuthenticationPolicy.js.map"]},"metadata":{},"sourceType":"module"}