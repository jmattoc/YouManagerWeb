{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Equipo/source/Tgsc-Proyectos/youManager-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormGroup, Validators, FormControl } from '@angular/forms';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';\nimport { BehaviorSubject } from 'rxjs';\nimport { DialogoConfirmacionComponent } from '@shared/components/dialogo-confirmacion/dialogo-confirmacion.component';\nimport { ModuloDelSistemaComponent } from '../modulo-del-sistema/modulo-del-sistema.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@modules/seguridad/services/opcion.service\";\nimport * as i2 from \"@modules/seguridad/services/aplicacion.service\";\n/**\r\n * Node for to-do item\r\n */\n\nexport class TodoItemNode {}\n/** Flat to-do item node with expandable and level information */\n\nexport class TodoItemFlatNode {}\n/**\r\n * Checklist database, it can build a tree structured Json object.\r\n * Each node in Json object represents a to-do item or a category.\r\n * If a node is a category, it has children ite|s and new items can be added under the category.\r\n */\n\nexport class ChecklistDatabase {\n  constructor(opcionService, aplicacionService) {\n    this.opcionService = opcionService;\n    this.aplicacionService = aplicacionService;\n    this.dataChange = new BehaviorSubject([]);\n    this.initialize();\n  }\n\n  get data() {\n    return this.dataChange.value;\n  }\n\n  initialize() {}\n\n  listarOpciones(idAplicacion, version) {\n    this.opcionService.listarOpcionesxAppVersion(idAplicacion, version).then(data => {\n      console.log(data);\n      this.dataChange.next(data);\n    });\n  }\n  /** Add an item to to-do list */\n\n\n  insertItem(parent, name) {\n    //  if (parent.children) {\n    parent.children.push({\n      title: name\n    });\n    this.dataChange.next(this.data); //  }\n  }\n\n  updateItem(node, name) {\n    node.title = name;\n    this.dataChange.next(this.data);\n  }\n\n}\n\nChecklistDatabase.ɵfac = function ChecklistDatabase_Factory(t) {\n  return new (t || ChecklistDatabase)(i0.ɵɵinject(i1.OpcionService), i0.ɵɵinject(i2.AplicacionService));\n};\n\nChecklistDatabase.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ChecklistDatabase,\n  factory: ChecklistDatabase.ɵfac\n});\nlet FormOpcionComponent = class FormOpcionComponent {\n  constructor(_database, dialogo, fb, aplicacionService, dialog, notificador) {\n    this._database = _database;\n    this.dialogo = dialogo;\n    this.fb = fb;\n    this.aplicacionService = aplicacionService;\n    this.dialog = dialog;\n    this.notificador = notificador;\n    this.onGuardar = new EventEmitter();\n    /** Map from flat node to nested node. This helps us finding the nested node to be modified */\n\n    this.flatNodeMap = new Map();\n    /** Map from nested node to flattened node. This helps us to keep the same object for selection */\n\n    this.nestedNodeMap = new Map();\n    /** A selected parent node to be inserted */\n\n    this.selectedParent = null;\n    /** The new item's name */\n\n    this.newItemName = '';\n    /** The selection for checklist */\n\n    this.checklistSelection = new SelectionModel(true\n    /* multiple */\n    );\n\n    this.getLevel = node => node.level;\n\n    this.isExpandable = node => node.expandable;\n\n    this.getChildren = node => node.children;\n\n    this.hasChild = (_, _nodeData) => _nodeData.expandable;\n\n    this.hasNoContent = (_, _nodeData) => _nodeData.title === '';\n    /**\r\n     * Transformer to convert nested node to flat node. Record the nodes in maps for later use.\r\n     */\n\n\n    this.transformer = (node, level) => {\n      const existingNode = this.nestedNodeMap.get(node);\n      const flatNode = existingNode && existingNode.title === node.title ? existingNode : new TodoItemFlatNode();\n      flatNode.title = node.title;\n      flatNode.level = level;\n      flatNode.expandable = true; // !!node.children?.length;\n\n      flatNode.id = node.id;\n      flatNode.isboton = node.isboton;\n      flatNode.parentId = node.parentId;\n      flatNode.isSelected = node.isSelected;\n      this.flatNodeMap.set(flatNode, node);\n      this.nestedNodeMap.set(node, flatNode);\n      return flatNode;\n    };\n\n    this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n    this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable);\n    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n    _database.dataChange.subscribe(data => {\n      this.dataSource.data = data;\n    });\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.aplicacionService.listarVersiones(_this.objRegistro).then(data => {\n        _this.versionDefault = data[0].Version;\n        _this.versiones = data;\n\n        _this._database.listarOpciones(_this.objRegistro, _this.versionDefault);\n      }); // if(this.objRegistro){ //EsEdicion            \n      // this.formulario = this.fb.group({      \n      //   Id: [{ value: this.objRegistro.Id, disabled: false},[]],\n      //   Codigo: [{ value: this.objRegistro.Codigo, disabled: false }, [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],        \n      //   Nombre: [{ value: this.objRegistro.Nombre, disabled: false }, [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],        \n      //   NombreCompleto: [{ value: this.objRegistro.NombreCompleto, disabled: false }, [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],        \n      //   CodigoAcceso: [{ value: this.objRegistro.CodigoAcceso, disabled: false }, [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],        \n      //   JwtKey: [{ value: this.objRegistro.JwtKey, disabled: false }, [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],        \n      //   dominioweb: [{ value: this.objRegistro.dominioweb, disabled: false }, [Validators.required, Validators.minLength(3), Validators.maxLength(200)]],        \n      //   passwordDefault: [{ value: this.objRegistro.passwordDefault, disabled: false }, [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],        \n      //   Activo: [{ value: this.objRegistro.Activo, disabled: false }, []],        \n      //   jsonEmail: [{ value: this.objRegistro.jsonEmail, disabled: false }, [Validators.required]],        \n      // });\n      // }else{\n\n\n      _this.formulario = new FormGroup({\n        Codigo: new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]),\n        Nombre: new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]),\n        NombreCompleto: new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]),\n        CodigoAcceso: new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]),\n        JwtKey: new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]),\n        dominioweb: new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(200)]),\n        passwordDefault: new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]),\n        Activo: new FormControl(true, [Validators.required]),\n        jsonEmail: new FormControl('')\n      }); // }\n    })();\n  }\n\n  onVersionChange(tr) {\n    this.versionDefault = this.objRegistro, tr.value;\n\n    this._database.listarOpciones(this.objRegistro, tr.value);\n  }\n\n  guardar() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this2.formulario.invalid) {\n        _this2.formulario.markAllAsTouched();\n\n        return;\n      }\n\n      _this2.dialogo.open(DialogoConfirmacionComponent, {\n        maxWidth: '25vw',\n        maxHeight: 'auto',\n        height: 'auto',\n        width: '25%',\n        disableClose: true,\n        data: {\n          titulo: `Registro de Aplicaciones`,\n          mensaje: `¿Está seguro que desea grabar?`\n        }\n      }).afterClosed().subscribe( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (Ok) {\n          if (Ok) {\n            _this2.onGuardar.emit(_this2.formulario.value);\n          }\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /** Whether all the descendants of the node are selected. */\n\n\n  descendantsAllSelected(node) {\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected = descendants.length > 0 && descendants.every(child => {\n      return this.checklistSelection.isSelected(child);\n    });\n    return descAllSelected;\n  } // /** Whether part of the descendants are selected */\n\n\n  descendantsPartiallySelected(node) {\n    const descendants = this.treeControl.getDescendants(node);\n    const result = descendants.some(child => this.checklistSelection.isSelected(child));\n    return result && !this.descendantsAllSelected(node);\n  }\n  /** Toggle the to-do item selection. Select/deselect all the descendants node */\n\n\n  todoItemSelectionToggle(node) {\n    this.checklistSelection.toggle(node); // const descendants = this.treeControl.getDescendants(node);\n    // console.log(descendants);\n    // this.checklistSelection.isSelected(node)\n    //   ? this.checklistSelection.select(...descendants)\n    //   : this.checklistSelection.deselect(...descendants);\n    // Force update for the parent\n    // descendants.forEach(child => this.checklistSelection.isSelected(child));\n\n    this.checkAllParentsSelection(node);\n  }\n  /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */\n\n\n  todoLeafItemSelectionToggle(node) {\n    this.checklistSelection.toggle(node);\n    this.checkAllParentsSelection(node);\n  }\n  /* Checks all the parents when a leaf node is selected/unselected */\n\n\n  checkAllParentsSelection(node) {\n    let parent = this.getParentNode(node);\n\n    while (parent) {\n      this.checkRootNodeSelection(parent);\n      parent = this.getParentNode(parent);\n    }\n  }\n  /** Check root node checked state and change it accordingly */\n\n\n  checkRootNodeSelection(node) {\n    const nodeSelected = this.checklistSelection.isSelected(node);\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected = descendants.length > 0 && descendants.every(child => {\n      return this.checklistSelection.isSelected(child);\n    });\n\n    if (nodeSelected && !descAllSelected) {\n      this.checklistSelection.deselect(node);\n    } else if (!nodeSelected && descAllSelected) {\n      this.checklistSelection.select(node);\n    }\n  }\n  /* Get the parent node of a node */\n\n\n  getParentNode(node) {\n    const currentLevel = this.getLevel(node);\n\n    if (currentLevel < 1) {\n      return null;\n    }\n\n    const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n\n    for (let i = startIndex; i >= 0; i--) {\n      const currentNode = this.treeControl.dataNodes[i];\n\n      if (this.getLevel(currentNode) < currentLevel) {\n        return currentNode;\n      }\n    }\n\n    return null;\n  }\n  /** Select the category so we can insert the new item. */\n\n\n  addNewOption(node) {\n    const parentNode = this.flatNodeMap.get(node);\n\n    this._database.insertItem(parentNode, '');\n\n    this.treeControl.expand(node);\n  }\n\n  addNewAction(node) {\n    const parentNode = this.flatNodeMap.get(node);\n\n    this._database.insertItem(parentNode, '');\n\n    console.log(node);\n    this.treeControl.expand(node);\n  }\n  /** Save the node to database */\n\n\n  saveNode(node, itemValue) {\n    const nestedNode = this.flatNodeMap.get(node);\n\n    this._database.updateItem(nestedNode, itemValue);\n  }\n\n  crearOpcion() {\n    var _this3 = this;\n\n    var menuSelect = this.checklistSelection.selected;\n    let mensaje = \"\";\n    let _idPadre = null;\n    let _stPadre = null;\n    if (menuSelect.length == 0) mensaje = \"Está seguro de no asociar la nueva opción a una opción padre?\";else if (menuSelect.length == 1) {\n      _idPadre = menuSelect[0].id;\n      _stPadre = menuSelect[0].title;\n      mensaje = \"Está seguro asociar la nueva opción a \" + _stPadre + \"?\";\n    }\n\n    if (mensaje != \"\") {\n      this.dialogo.open(DialogoConfirmacionComponent, {\n        maxWidth: '25vw',\n        maxHeight: 'auto',\n        height: 'auto',\n        width: '25%',\n        disableClose: true,\n        data: {\n          titulo: `Registro de Opciones`,\n          mensaje: mensaje\n        }\n      }).afterClosed().subscribe( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (Ok) {\n          if (Ok) {\n            _this3.dialog.open(ModuloDelSistemaComponent, {\n              maxWidth: '50vw',\n              maxHeight: '50vw',\n              height: 'auto',\n              width: '80%',\n              disableClose: false,\n              data: {\n                version: _this3.versionDefault,\n                idPadre: _idPadre,\n                stPadre: _stPadre,\n                id: null\n              }\n            });\n          }\n        });\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    } else this.notificador.notifyDanger(\"Debe seleccionar solo 1  opción\");\n  }\n\n  EditarModulo() {\n    var menuSelect = this.checklistSelection.selected;\n    let mensaje = \"\";\n    let _idPadre = null;\n    let _stPadre = null;\n\n    if (menuSelect.length == 1) {\n      this.dialog.open(ModuloDelSistemaComponent, {\n        maxWidth: '50vw',\n        maxHeight: '50vw',\n        height: 'auto',\n        width: '80%',\n        disableClose: false,\n        data: {\n          version: this.versionDefault,\n          id: menuSelect[0].id\n        }\n      });\n    } else {\n      this.notificador.notifyDanger(\"Debe seleccionar 1  opción\");\n    }\n  }\n\n};\n\n__decorate([Input()], FormOpcionComponent.prototype, \"objRegistro\", void 0);\n\n__decorate([Output()], FormOpcionComponent.prototype, \"onGuardar\", void 0);\n\nFormOpcionComponent = __decorate([Component({\n  selector: 'app-form-opcion-page',\n  templateUrl: './form-opcion-page.component.html',\n  styleUrls: ['./form-opcion-page.component.css'],\n  providers: [ChecklistDatabase]\n})], FormOpcionComponent);\nexport { FormOpcionComponent };","map":{"version":3,"sources":["C:\\Users\\Equipo\\source\\Tgsc-Proyectos\\youManager-web\\src\\app\\modules\\seguridad\\pages\\opcion\\form-opcion-page\\form-opcion-page.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output, Inject, Injectable } from '@angular/core';\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { OpcionService } from '@modules/seguridad/services/opcion.service';\r\nimport { RolesDto } from '@core/models/seguridad/RolesDto';\r\nimport { BootstrapNotifyBarService } from \"@shared/services/bootstrap-notify.service\";\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FormGroup, FormBuilder, Validators, FormControl, FormArray, ValidatorFn, AbstractControl } from '@angular/forms';\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {FlatTreeControl} from '@angular/cdk/tree';\r\nimport {MatTreeFlatDataSource, MatTreeFlattener} from '@angular/material/tree';\r\nimport {BehaviorSubject} from 'rxjs';\r\nimport { DialogoConfirmacionComponent } from '@shared/components/dialogo-confirmacion/dialogo-confirmacion.component';\r\nimport { AplicacionService } from '@modules/seguridad/services/aplicacion.service';\r\nimport { ModuloDelSistemaComponent } from '../modulo-del-sistema/modulo-del-sistema.component';\r\n\r\n/**\r\n * Node for to-do item\r\n */\r\nexport class TodoItemNode {\r\n  children: TodoItemNode[];\r\n  title: string;\r\n}\r\n/** Flat to-do item node with expandable and level information */\r\nexport class TodoItemFlatNode {\r\n  title: string;\r\n  level: number;\r\n  expandable: boolean;\r\n  isboton : boolean;\r\n}\r\n/**\r\n * Checklist database, it can build a tree structured Json object.\r\n * Each node in Json object represents a to-do item or a category.\r\n * If a node is a category, it has children ite|s and new items can be added under the category.\r\n */\r\n @Injectable()\r\n export class ChecklistDatabase {\r\n   dataChange = new BehaviorSubject<TodoItemNode[]>([]);   \r\n   get data(): TodoItemNode[] {\r\n     return this.dataChange.value;\r\n   }\r\n \r\n   constructor(private opcionService: OpcionService,\r\n               private aplicacionService: AplicacionService) {\r\n     this.initialize();\r\n   }\r\n   initialize() {    \r\n    \r\n   }\r\n   listarOpciones(idAplicacion:number,version:number){    \r\n    this.opcionService.listarOpcionesxAppVersion(idAplicacion,version).then((data: any[]) => {            \r\n      console.log(data);\r\n      this.dataChange.next(data);  \r\n    });     \r\n   }\r\n   /** Add an item to to-do list */\r\n   insertItem(parent: TodoItemNode, name: string) {    \r\n    //  if (parent.children) {\r\n       parent.children.push({title: name} as TodoItemNode);\r\n       this.dataChange.next(this.data);\r\n    //  }\r\n   }\r\n \r\n   updateItem(node: TodoItemNode, name: string) {\r\n     node.title = name;\r\n     this.dataChange.next(this.data);\r\n   }\r\n }\r\n\r\n@Component({\r\n  selector: 'app-form-opcion-page',\r\n  templateUrl: './form-opcion-page.component.html',\r\n  styleUrls:['./form-opcion-page.component.css']\r\n  ,\r\n  providers: [  ChecklistDatabase]\r\n})\r\nexport class FormOpcionComponent implements OnInit {  \r\n  @Input() objRegistro: any;\r\n  @Output() onGuardar: EventEmitter<any> = new EventEmitter();  \r\n  formulario: FormGroup;\r\n  versiones: any [];\r\n  versionDefault : any;\r\n  /** Map from flat node to nested node. This helps us finding the nested node to be modified */\r\n  flatNodeMap = new Map<TodoItemFlatNode, TodoItemNode>();\r\n  /** Map from nested node to flattened node. This helps us to keep the same object for selection */\r\n  nestedNodeMap = new Map<TodoItemNode, TodoItemFlatNode>();\r\n  /** A selected parent node to be inserted */\r\n  selectedParent: TodoItemFlatNode | null = null;\r\n  /** The new item's name */\r\n  newItemName = '';\r\n  treeControl: FlatTreeControl<TodoItemFlatNode>;\r\n  treeFlattener: MatTreeFlattener<TodoItemNode, TodoItemFlatNode>;\r\n  dataSource: MatTreeFlatDataSource<TodoItemNode, TodoItemFlatNode>;\r\n  /** The selection for checklist */\r\n  checklistSelection = new SelectionModel<TodoItemFlatNode>(true /* multiple */);\r\n  decryptedMessage : string;\r\n\r\n  constructor(private _database: ChecklistDatabase,\r\n              public dialogo: MatDialog,\r\n              private fb: FormBuilder,\r\n              private aplicacionService: AplicacionService,\r\n              public dialog: MatDialog,\r\n              private notificador: BootstrapNotifyBarService,) {         \r\n  this.treeFlattener = new MatTreeFlattener(this.transformer,this.getLevel,this.isExpandable,this.getChildren);\r\n  this.treeControl = new FlatTreeControl<TodoItemFlatNode>(this.getLevel, this.isExpandable);\r\n\r\n  this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\r\n    _database.dataChange.subscribe(data => {\r\n      this.dataSource.data = data;      \r\n    });        \r\n  }  \r\n  async ngOnInit() {    \r\n    this.aplicacionService.listarVersiones(this.objRegistro).then((data: any[]) => {      \r\n      this.versionDefault = data[0].Version;\r\n      this.versiones = data;      \r\n      this._database.listarOpciones(this.objRegistro,this.versionDefault);\r\n    });     \r\n\r\n    // if(this.objRegistro){ //EsEdicion            \r\n\r\n      // this.formulario = this.fb.group({      \r\n      //   Id: [{ value: this.objRegistro.Id, disabled: false},[]],\r\n      //   Codigo: [{ value: this.objRegistro.Codigo, disabled: false }, [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],        \r\n      //   Nombre: [{ value: this.objRegistro.Nombre, disabled: false }, [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],        \r\n      //   NombreCompleto: [{ value: this.objRegistro.NombreCompleto, disabled: false }, [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],        \r\n      //   CodigoAcceso: [{ value: this.objRegistro.CodigoAcceso, disabled: false }, [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],        \r\n      //   JwtKey: [{ value: this.objRegistro.JwtKey, disabled: false }, [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],        \r\n      //   dominioweb: [{ value: this.objRegistro.dominioweb, disabled: false }, [Validators.required, Validators.minLength(3), Validators.maxLength(200)]],        \r\n      //   passwordDefault: [{ value: this.objRegistro.passwordDefault, disabled: false }, [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],        \r\n      //   Activo: [{ value: this.objRegistro.Activo, disabled: false }, []],        \r\n      //   jsonEmail: [{ value: this.objRegistro.jsonEmail, disabled: false }, [Validators.required]],        \r\n      // });\r\n    // }else{\r\n      this.formulario = new FormGroup({      \r\n        Codigo: new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]),\r\n        Nombre: new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]),\r\n        NombreCompleto: new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]),\r\n        CodigoAcceso: new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]),\r\n        JwtKey: new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]),\r\n        dominioweb: new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(200)]),\r\n        passwordDefault: new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]),\r\n        Activo:new FormControl(true,[Validators.required]),\r\n         jsonEmail: new FormControl('')\r\n      });\r\n    // }\r\n  } \r\n  onVersionChange(tr: { value: any; }){\r\n    this.versionDefault=this.objRegistro,tr.value;\r\n    this._database.listarOpciones(this.objRegistro,tr.value);\r\n  }\r\n  async guardar() {\r\n    if (this.formulario.invalid) {\r\n      this.formulario.markAllAsTouched();\r\n      return;\r\n    }\r\n    this.dialogo.open(DialogoConfirmacionComponent, { maxWidth: '25vw', maxHeight: 'auto', height: 'auto', width: '25%', disableClose: true,\r\n      data: { titulo: `Registro de Aplicaciones`, mensaje: `¿Está seguro que desea grabar?` }\r\n    }).afterClosed().subscribe(async (Ok: Boolean) => {\r\n        if (Ok) {                        \r\n          this.onGuardar.emit(this.formulario.value);\r\n        }\r\n      });\r\n  }\r\n  getLevel = (node: TodoItemFlatNode) => node.level;\r\n\r\n  isExpandable = (node: TodoItemFlatNode) => node.expandable;\r\n\r\n  getChildren = (node: TodoItemNode): TodoItemNode[] => node.children;\r\n\r\n  hasChild = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.expandable;\r\n\r\n  hasNoContent = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.title === '';\r\n\r\n  /**\r\n   * Transformer to convert nested node to flat node. Record the nodes in maps for later use.\r\n   */\r\n  transformer = (node: any, level: number) => {\r\n       \r\n    const existingNode = this.nestedNodeMap.get(node) as any;\r\n    const flatNode = existingNode && existingNode.title === node.title ? existingNode : new TodoItemFlatNode();\r\n    flatNode.title = node.title;\r\n    flatNode.level = level;\r\n    flatNode.expandable = true;// !!node.children?.length;\r\n    flatNode.id=node.id;\r\n    flatNode.isboton=node.isboton;\r\n    flatNode.parentId=node.parentId;\r\n    flatNode.isSelected=node.isSelected;\r\n\r\n    this.flatNodeMap.set(flatNode, node);\r\n    this.nestedNodeMap.set(node, flatNode);\r\n    \r\n    \r\n    return flatNode;\r\n  };\r\n\r\n  /** Whether all the descendants of the node are selected. */\r\n  descendantsAllSelected(node: TodoItemFlatNode): boolean {\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    const descAllSelected =\r\n      descendants.length > 0 &&\r\n      descendants.every(child => {\r\n        return this.checklistSelection.isSelected(child);\r\n      });\r\n    return descAllSelected;\r\n  }\r\n\r\n  // /** Whether part of the descendants are selected */\r\n  descendantsPartiallySelected(node: TodoItemFlatNode): boolean {\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    const result = descendants.some(child => this.checklistSelection.isSelected(child));\r\n    return result && !this.descendantsAllSelected(node);\r\n  }\r\n\r\n  /** Toggle the to-do item selection. Select/deselect all the descendants node */\r\n  todoItemSelectionToggle(node: TodoItemFlatNode): void {\r\n    this.checklistSelection.toggle(node);\r\n    // const descendants = this.treeControl.getDescendants(node);\r\n    // console.log(descendants);\r\n    // this.checklistSelection.isSelected(node)\r\n    //   ? this.checklistSelection.select(...descendants)\r\n    //   : this.checklistSelection.deselect(...descendants);\r\n\r\n    // Force update for the parent\r\n    // descendants.forEach(child => this.checklistSelection.isSelected(child));\r\n    this.checkAllParentsSelection(node);\r\n  }\r\n\r\n  /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */\r\n  todoLeafItemSelectionToggle(node: TodoItemFlatNode): void {    \r\n    this.checklistSelection.toggle(node);\r\n    this.checkAllParentsSelection(node);\r\n  }\r\n\r\n  /* Checks all the parents when a leaf node is selected/unselected */\r\n  checkAllParentsSelection(node: TodoItemFlatNode): void {\r\n    let parent: TodoItemFlatNode | null = this.getParentNode(node);\r\n    while (parent) {\r\n      this.checkRootNodeSelection(parent);\r\n      parent = this.getParentNode(parent);\r\n    }\r\n  }\r\n\r\n  /** Check root node checked state and change it accordingly */\r\n  checkRootNodeSelection(node: TodoItemFlatNode): void {\r\n    const nodeSelected = this.checklistSelection.isSelected(node);\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    const descAllSelected =\r\n      descendants.length > 0 &&\r\n      descendants.every(child => {\r\n        return this.checklistSelection.isSelected(child);\r\n      });\r\n    if (nodeSelected && !descAllSelected) {\r\n      this.checklistSelection.deselect(node);\r\n    } else if (!nodeSelected && descAllSelected) {\r\n      this.checklistSelection.select(node);\r\n    }\r\n  }\r\n\r\n  /* Get the parent node of a node */\r\n  getParentNode(node: TodoItemFlatNode): TodoItemFlatNode | null {\r\n    const currentLevel = this.getLevel(node);\r\n\r\n    if (currentLevel < 1) {\r\n      return null;\r\n    }\r\n\r\n    const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\r\n\r\n    for (let i = startIndex; i >= 0; i--) {\r\n      const currentNode = this.treeControl.dataNodes[i];\r\n\r\n      if (this.getLevel(currentNode) < currentLevel) {\r\n        return currentNode;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Select the category so we can insert the new item. */\r\n  addNewOption(node: TodoItemFlatNode) {        \r\n    const parentNode = this.flatNodeMap.get(node);    \r\n    this._database.insertItem(parentNode!, '');    \r\n    this.treeControl.expand(node);\r\n  }\r\n  addNewAction(node: TodoItemFlatNode) {    \r\n    const parentNode = this.flatNodeMap.get(node);\r\n    this._database.insertItem(parentNode!, '');\r\n    console.log(node);\r\n    this.treeControl.expand(node);\r\n  }\r\n\r\n  /** Save the node to database */\r\n  saveNode(node: TodoItemFlatNode, itemValue: string) {\r\n    const nestedNode = this.flatNodeMap.get(node);\r\n    this._database.updateItem(nestedNode!, itemValue);\r\n  }\r\n  crearOpcion(){\r\n    var menuSelect : any[] = this.checklistSelection.selected;\r\n    \r\n    let mensaje:string=\"\";\r\n    let _idPadre = null;\r\n    let _stPadre = null;\r\n    if(menuSelect.length==0)\r\n       mensaje=\"Está seguro de no asociar la nueva opción a una opción padre?\";\r\n    else if(menuSelect.length==1){\r\n      _idPadre=menuSelect[0].id;\r\n      _stPadre=menuSelect[0].title;\r\n      mensaje=\"Está seguro asociar la nueva opción a \"+_stPadre+\"?\";\r\n    }\r\n\r\n    if(mensaje!=\"\"){\r\n          this.dialogo.open(DialogoConfirmacionComponent, { maxWidth: '25vw', maxHeight: 'auto', height: 'auto', width: '25%', disableClose: true,\r\n            data: { titulo: `Registro de Opciones`, mensaje: mensaje }\r\n          }).afterClosed().subscribe(async (Ok: Boolean) => {\r\n              if (Ok) {                                                \r\n                this.dialog.open(ModuloDelSistemaComponent  , {\r\n                  maxWidth: '50vw',\r\n                  maxHeight: '50vw',\r\n                  height: 'auto',\r\n                  width: '80%',\r\n                  disableClose: false,\r\n                  data: { version: this.versionDefault,idPadre:_idPadre, stPadre :_stPadre, id:null },\r\n                });\r\n              }\r\n          });\r\n    }\r\n    else\r\n    this.notificador.notifyDanger(\"Debe seleccionar solo 1  opción\");\r\n  }\r\n  EditarModulo(){\r\n    var menuSelect : any[] = this.checklistSelection.selected;\r\n    \r\n    let mensaje:string=\"\";\r\n    let _idPadre = null;\r\n    let _stPadre = null;\r\n    if(menuSelect.length==1){\r\n      this.dialog.open(ModuloDelSistemaComponent  , {\r\n        maxWidth: '50vw',\r\n        maxHeight: '50vw',\r\n        height: 'auto',\r\n        width: '80%',\r\n        disableClose: false,\r\n        data: { version: this.versionDefault, id: menuSelect[0].id },\r\n      });\r\n    }else{\r\n      this.notificador.notifyDanger(\"Debe seleccionar 1  opción\");\r\n    }   \r\n  }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}