{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Equipo/source/Tgsc-Proyectos/youManager-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { initOperation, pollOperation } from \"../poller/operation\";\nimport { logger } from \"../logger\";\n\nfunction getOperationLocationPollingUrl(inputs) {\n  const {\n    azureAsyncOperation,\n    operationLocation\n  } = inputs;\n  return operationLocation !== null && operationLocation !== void 0 ? operationLocation : azureAsyncOperation;\n}\n\nfunction getLocationHeader(rawResponse) {\n  return rawResponse.headers[\"location\"];\n}\n\nfunction getOperationLocationHeader(rawResponse) {\n  return rawResponse.headers[\"operation-location\"];\n}\n\nfunction getAzureAsyncOperationHeader(rawResponse) {\n  return rawResponse.headers[\"azure-asyncoperation\"];\n}\n\nfunction findResourceLocation(inputs) {\n  const {\n    location,\n    requestMethod,\n    requestPath,\n    resourceLocationConfig\n  } = inputs;\n\n  switch (requestMethod) {\n    case \"PUT\":\n      {\n        return requestPath;\n      }\n\n    case \"DELETE\":\n      {\n        return undefined;\n      }\n\n    default:\n      {\n        switch (resourceLocationConfig) {\n          case \"azure-async-operation\":\n            {\n              return undefined;\n            }\n\n          case \"original-uri\":\n            {\n              return requestPath;\n            }\n\n          case \"location\":\n          default:\n            {\n              return location;\n            }\n        }\n      }\n  }\n}\n\nexport function inferLroMode(inputs) {\n  const {\n    rawResponse,\n    requestMethod,\n    requestPath,\n    resourceLocationConfig\n  } = inputs;\n  const operationLocation = getOperationLocationHeader(rawResponse);\n  const azureAsyncOperation = getAzureAsyncOperationHeader(rawResponse);\n  const pollingUrl = getOperationLocationPollingUrl({\n    operationLocation,\n    azureAsyncOperation\n  });\n  const location = getLocationHeader(rawResponse);\n  const normalizedRequestMethod = requestMethod === null || requestMethod === void 0 ? void 0 : requestMethod.toLocaleUpperCase();\n\n  if (pollingUrl !== undefined) {\n    return {\n      mode: \"OperationLocation\",\n      operationLocation: pollingUrl,\n      resourceLocation: findResourceLocation({\n        requestMethod: normalizedRequestMethod,\n        location,\n        requestPath,\n        resourceLocationConfig\n      })\n    };\n  } else if (location !== undefined) {\n    return {\n      mode: \"ResourceLocation\",\n      operationLocation: location\n    };\n  } else if (normalizedRequestMethod === \"PUT\" && requestPath) {\n    return {\n      mode: \"Body\",\n      operationLocation: requestPath\n    };\n  } else {\n    return undefined;\n  }\n}\n\nfunction transformStatus(status) {\n  switch (status === null || status === void 0 ? void 0 : status.toLowerCase()) {\n    case undefined:\n    case \"succeeded\":\n      return \"succeeded\";\n\n    case \"failed\":\n      return \"failed\";\n\n    case \"running\":\n    case \"accepted\":\n    case \"canceling\":\n    case \"cancelling\":\n      return \"running\";\n\n    case \"canceled\":\n    case \"cancelled\":\n      return \"canceled\";\n\n    default:\n      {\n        logger.warning(`LRO: unrecognized operation status: ${status}`);\n        return status;\n      }\n  }\n}\n\nfunction getStatus(rawResponse) {\n  var _a;\n\n  const {\n    status\n  } = (_a = rawResponse.body) !== null && _a !== void 0 ? _a : {};\n  return transformStatus(status);\n}\n\nfunction getProvisioningState(rawResponse) {\n  var _a, _b;\n\n  const {\n    properties,\n    provisioningState\n  } = (_a = rawResponse.body) !== null && _a !== void 0 ? _a : {};\n  const state = (_b = properties === null || properties === void 0 ? void 0 : properties.provisioningState) !== null && _b !== void 0 ? _b : provisioningState;\n  return transformStatus(state);\n}\n\nfunction toOperationStatus(statusCode) {\n  if (statusCode === 202) {\n    return \"running\";\n  } else if (statusCode < 300) {\n    return \"succeeded\";\n  } else {\n    return \"failed\";\n  }\n}\n\nexport function parseRetryAfter({\n  rawResponse\n}) {\n  const retryAfter = rawResponse.headers[\"retry-after\"];\n\n  if (retryAfter !== undefined) {\n    // Retry-After header value is either in HTTP date format, or in seconds\n    const retryAfterInSeconds = parseInt(retryAfter);\n    return isNaN(retryAfterInSeconds) ? calculatePollingIntervalFromDate(new Date(retryAfter)) : retryAfterInSeconds * 1000;\n  }\n\n  return undefined;\n}\n\nfunction calculatePollingIntervalFromDate(retryAfterDate) {\n  const timeNow = Math.floor(new Date().getTime());\n  const retryAfterTime = retryAfterDate.getTime();\n\n  if (timeNow < retryAfterTime) {\n    return retryAfterTime - timeNow;\n  }\n\n  return undefined;\n}\n/**\n * Initiates the long-running operation.\n */\n\n\nexport function initHttpOperation(_x) {\n  return _initHttpOperation.apply(this, arguments);\n}\n\nfunction _initHttpOperation() {\n  _initHttpOperation = _asyncToGenerator(function* (inputs) {\n    const {\n      stateProxy,\n      resourceLocationConfig,\n      processResult,\n      lro\n    } = inputs;\n    return initOperation({\n      init: function () {\n        var _ref = _asyncToGenerator(function* () {\n          const response = yield lro.sendInitialRequest();\n          const config = inferLroMode({\n            rawResponse: response.rawResponse,\n            requestPath: lro.requestPath,\n            requestMethod: lro.requestMethod,\n            resourceLocationConfig\n          });\n          return Object.assign({\n            response,\n            operationLocation: config === null || config === void 0 ? void 0 : config.operationLocation,\n            resourceLocation: config === null || config === void 0 ? void 0 : config.resourceLocation\n          }, (config === null || config === void 0 ? void 0 : config.mode) ? {\n            metadata: {\n              mode: config.mode\n            }\n          } : {});\n        });\n\n        return function init() {\n          return _ref.apply(this, arguments);\n        };\n      }(),\n      stateProxy,\n      processResult: processResult ? ({\n        flatResponse\n      }, state) => processResult(flatResponse, state) : ({\n        flatResponse\n      }) => flatResponse,\n      getOperationStatus: (response, state) => {\n        var _a;\n\n        const mode = (_a = state.config.metadata) === null || _a === void 0 ? void 0 : _a[\"mode\"];\n        return mode === undefined || mode === \"Body\" && getOperationStatus(response, state) === \"succeeded\" ? \"succeeded\" : \"running\";\n      }\n    });\n  });\n  return _initHttpOperation.apply(this, arguments);\n}\n\nexport function getOperationLocation({\n  rawResponse\n}, state) {\n  var _a;\n\n  const mode = (_a = state.config.metadata) === null || _a === void 0 ? void 0 : _a[\"mode\"];\n\n  switch (mode) {\n    case \"OperationLocation\":\n      {\n        return getOperationLocationPollingUrl({\n          operationLocation: getOperationLocationHeader(rawResponse),\n          azureAsyncOperation: getAzureAsyncOperationHeader(rawResponse)\n        });\n      }\n\n    case \"ResourceLocation\":\n      {\n        return getLocationHeader(rawResponse);\n      }\n\n    case \"Body\":\n    default:\n      {\n        return undefined;\n      }\n  }\n}\nexport function getOperationStatus({\n  rawResponse\n}, state) {\n  var _a;\n\n  const mode = (_a = state.config.metadata) === null || _a === void 0 ? void 0 : _a[\"mode\"];\n\n  switch (mode) {\n    case \"OperationLocation\":\n      {\n        return getStatus(rawResponse);\n      }\n\n    case \"ResourceLocation\":\n      {\n        return toOperationStatus(rawResponse.statusCode);\n      }\n\n    case \"Body\":\n      {\n        return getProvisioningState(rawResponse);\n      }\n\n    default:\n      throw new Error(`Unexpected operation mode: ${mode}`);\n  }\n}\nexport function getResourceLocation({\n  flatResponse\n}, state) {\n  if (typeof flatResponse === \"object\") {\n    const resourceLocation = flatResponse.resourceLocation;\n\n    if (resourceLocation !== undefined) {\n      state.config.resourceLocation = resourceLocation;\n    }\n  }\n\n  return state.config.resourceLocation;\n}\n/** Polls the long-running operation. */\n\nexport function pollHttpOperation(_x2) {\n  return _pollHttpOperation.apply(this, arguments);\n} //# sourceMappingURL=operation.js.map\n\nfunction _pollHttpOperation() {\n  _pollHttpOperation = _asyncToGenerator(function* (inputs) {\n    const {\n      lro,\n      stateProxy,\n      options,\n      processResult,\n      updateState,\n      setDelay,\n      state\n    } = inputs;\n    return pollOperation({\n      state,\n      stateProxy,\n      setDelay,\n      processResult: processResult ? ({\n        flatResponse\n      }, inputState) => processResult(flatResponse, inputState) : ({\n        flatResponse\n      }) => flatResponse,\n      updateState,\n      getPollingInterval: parseRetryAfter,\n      getOperationLocation,\n      getOperationStatus,\n      getResourceLocation,\n      options,\n\n      /**\n       * The expansion here is intentional because `lro` could be an object that\n       * references an inner this, so we need to preserve a reference to it.\n       */\n      poll: function () {\n        var _ref2 = _asyncToGenerator(function* (location, inputOptions) {\n          return lro.sendPollRequest(location, inputOptions);\n        });\n\n        return function poll(_x3, _x4) {\n          return _ref2.apply(this, arguments);\n        };\n      }()\n    });\n  });\n  return _pollHttpOperation.apply(this, arguments);\n}","map":{"version":3,"sources":["C:/Users/Equipo/source/Tgsc-Proyectos/youManager-web/node_modules/@azure/core-lro/dist-esm/src/http/operation.js"],"names":["initOperation","pollOperation","logger","getOperationLocationPollingUrl","inputs","azureAsyncOperation","operationLocation","getLocationHeader","rawResponse","headers","getOperationLocationHeader","getAzureAsyncOperationHeader","findResourceLocation","location","requestMethod","requestPath","resourceLocationConfig","undefined","inferLroMode","pollingUrl","normalizedRequestMethod","toLocaleUpperCase","mode","resourceLocation","transformStatus","status","toLowerCase","warning","getStatus","_a","body","getProvisioningState","_b","properties","provisioningState","state","toOperationStatus","statusCode","parseRetryAfter","retryAfter","retryAfterInSeconds","parseInt","isNaN","calculatePollingIntervalFromDate","Date","retryAfterDate","timeNow","Math","floor","getTime","retryAfterTime","initHttpOperation","stateProxy","processResult","lro","init","response","sendInitialRequest","config","Object","assign","metadata","flatResponse","getOperationStatus","getOperationLocation","Error","getResourceLocation","pollHttpOperation","options","updateState","setDelay","inputState","getPollingInterval","poll","inputOptions","sendPollRequest"],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { initOperation, pollOperation } from \"../poller/operation\";\nimport { logger } from \"../logger\";\nfunction getOperationLocationPollingUrl(inputs) {\n    const { azureAsyncOperation, operationLocation } = inputs;\n    return operationLocation !== null && operationLocation !== void 0 ? operationLocation : azureAsyncOperation;\n}\nfunction getLocationHeader(rawResponse) {\n    return rawResponse.headers[\"location\"];\n}\nfunction getOperationLocationHeader(rawResponse) {\n    return rawResponse.headers[\"operation-location\"];\n}\nfunction getAzureAsyncOperationHeader(rawResponse) {\n    return rawResponse.headers[\"azure-asyncoperation\"];\n}\nfunction findResourceLocation(inputs) {\n    const { location, requestMethod, requestPath, resourceLocationConfig } = inputs;\n    switch (requestMethod) {\n        case \"PUT\": {\n            return requestPath;\n        }\n        case \"DELETE\": {\n            return undefined;\n        }\n        default: {\n            switch (resourceLocationConfig) {\n                case \"azure-async-operation\": {\n                    return undefined;\n                }\n                case \"original-uri\": {\n                    return requestPath;\n                }\n                case \"location\":\n                default: {\n                    return location;\n                }\n            }\n        }\n    }\n}\nexport function inferLroMode(inputs) {\n    const { rawResponse, requestMethod, requestPath, resourceLocationConfig } = inputs;\n    const operationLocation = getOperationLocationHeader(rawResponse);\n    const azureAsyncOperation = getAzureAsyncOperationHeader(rawResponse);\n    const pollingUrl = getOperationLocationPollingUrl({ operationLocation, azureAsyncOperation });\n    const location = getLocationHeader(rawResponse);\n    const normalizedRequestMethod = requestMethod === null || requestMethod === void 0 ? void 0 : requestMethod.toLocaleUpperCase();\n    if (pollingUrl !== undefined) {\n        return {\n            mode: \"OperationLocation\",\n            operationLocation: pollingUrl,\n            resourceLocation: findResourceLocation({\n                requestMethod: normalizedRequestMethod,\n                location,\n                requestPath,\n                resourceLocationConfig,\n            }),\n        };\n    }\n    else if (location !== undefined) {\n        return {\n            mode: \"ResourceLocation\",\n            operationLocation: location,\n        };\n    }\n    else if (normalizedRequestMethod === \"PUT\" && requestPath) {\n        return {\n            mode: \"Body\",\n            operationLocation: requestPath,\n        };\n    }\n    else {\n        return undefined;\n    }\n}\nfunction transformStatus(status) {\n    switch (status === null || status === void 0 ? void 0 : status.toLowerCase()) {\n        case undefined:\n        case \"succeeded\":\n            return \"succeeded\";\n        case \"failed\":\n            return \"failed\";\n        case \"running\":\n        case \"accepted\":\n        case \"canceling\":\n        case \"cancelling\":\n            return \"running\";\n        case \"canceled\":\n        case \"cancelled\":\n            return \"canceled\";\n        default: {\n            logger.warning(`LRO: unrecognized operation status: ${status}`);\n            return status;\n        }\n    }\n}\nfunction getStatus(rawResponse) {\n    var _a;\n    const { status } = (_a = rawResponse.body) !== null && _a !== void 0 ? _a : {};\n    return transformStatus(status);\n}\nfunction getProvisioningState(rawResponse) {\n    var _a, _b;\n    const { properties, provisioningState } = (_a = rawResponse.body) !== null && _a !== void 0 ? _a : {};\n    const state = (_b = properties === null || properties === void 0 ? void 0 : properties.provisioningState) !== null && _b !== void 0 ? _b : provisioningState;\n    return transformStatus(state);\n}\nfunction toOperationStatus(statusCode) {\n    if (statusCode === 202) {\n        return \"running\";\n    }\n    else if (statusCode < 300) {\n        return \"succeeded\";\n    }\n    else {\n        return \"failed\";\n    }\n}\nexport function parseRetryAfter({ rawResponse }) {\n    const retryAfter = rawResponse.headers[\"retry-after\"];\n    if (retryAfter !== undefined) {\n        // Retry-After header value is either in HTTP date format, or in seconds\n        const retryAfterInSeconds = parseInt(retryAfter);\n        return isNaN(retryAfterInSeconds)\n            ? calculatePollingIntervalFromDate(new Date(retryAfter))\n            : retryAfterInSeconds * 1000;\n    }\n    return undefined;\n}\nfunction calculatePollingIntervalFromDate(retryAfterDate) {\n    const timeNow = Math.floor(new Date().getTime());\n    const retryAfterTime = retryAfterDate.getTime();\n    if (timeNow < retryAfterTime) {\n        return retryAfterTime - timeNow;\n    }\n    return undefined;\n}\n/**\n * Initiates the long-running operation.\n */\nexport async function initHttpOperation(inputs) {\n    const { stateProxy, resourceLocationConfig, processResult, lro } = inputs;\n    return initOperation({\n        init: async () => {\n            const response = await lro.sendInitialRequest();\n            const config = inferLroMode({\n                rawResponse: response.rawResponse,\n                requestPath: lro.requestPath,\n                requestMethod: lro.requestMethod,\n                resourceLocationConfig,\n            });\n            return Object.assign({ response, operationLocation: config === null || config === void 0 ? void 0 : config.operationLocation, resourceLocation: config === null || config === void 0 ? void 0 : config.resourceLocation }, ((config === null || config === void 0 ? void 0 : config.mode) ? { metadata: { mode: config.mode } } : {}));\n        },\n        stateProxy,\n        processResult: processResult\n            ? ({ flatResponse }, state) => processResult(flatResponse, state)\n            : ({ flatResponse }) => flatResponse,\n        getOperationStatus: (response, state) => {\n            var _a;\n            const mode = (_a = state.config.metadata) === null || _a === void 0 ? void 0 : _a[\"mode\"];\n            return mode === undefined ||\n                (mode === \"Body\" && getOperationStatus(response, state) === \"succeeded\")\n                ? \"succeeded\"\n                : \"running\";\n        },\n    });\n}\nexport function getOperationLocation({ rawResponse }, state) {\n    var _a;\n    const mode = (_a = state.config.metadata) === null || _a === void 0 ? void 0 : _a[\"mode\"];\n    switch (mode) {\n        case \"OperationLocation\": {\n            return getOperationLocationPollingUrl({\n                operationLocation: getOperationLocationHeader(rawResponse),\n                azureAsyncOperation: getAzureAsyncOperationHeader(rawResponse),\n            });\n        }\n        case \"ResourceLocation\": {\n            return getLocationHeader(rawResponse);\n        }\n        case \"Body\":\n        default: {\n            return undefined;\n        }\n    }\n}\nexport function getOperationStatus({ rawResponse }, state) {\n    var _a;\n    const mode = (_a = state.config.metadata) === null || _a === void 0 ? void 0 : _a[\"mode\"];\n    switch (mode) {\n        case \"OperationLocation\": {\n            return getStatus(rawResponse);\n        }\n        case \"ResourceLocation\": {\n            return toOperationStatus(rawResponse.statusCode);\n        }\n        case \"Body\": {\n            return getProvisioningState(rawResponse);\n        }\n        default:\n            throw new Error(`Unexpected operation mode: ${mode}`);\n    }\n}\nexport function getResourceLocation({ flatResponse }, state) {\n    if (typeof flatResponse === \"object\") {\n        const resourceLocation = flatResponse.resourceLocation;\n        if (resourceLocation !== undefined) {\n            state.config.resourceLocation = resourceLocation;\n        }\n    }\n    return state.config.resourceLocation;\n}\n/** Polls the long-running operation. */\nexport async function pollHttpOperation(inputs) {\n    const { lro, stateProxy, options, processResult, updateState, setDelay, state } = inputs;\n    return pollOperation({\n        state,\n        stateProxy,\n        setDelay,\n        processResult: processResult\n            ? ({ flatResponse }, inputState) => processResult(flatResponse, inputState)\n            : ({ flatResponse }) => flatResponse,\n        updateState,\n        getPollingInterval: parseRetryAfter,\n        getOperationLocation,\n        getOperationStatus,\n        getResourceLocation,\n        options,\n        /**\n         * The expansion here is intentional because `lro` could be an object that\n         * references an inner this, so we need to preserve a reference to it.\n         */\n        poll: async (location, inputOptions) => lro.sendPollRequest(location, inputOptions),\n    });\n}\n//# sourceMappingURL=operation.js.map"]},"metadata":{},"sourceType":"module"}