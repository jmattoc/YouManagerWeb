{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Equipo/source/Tgsc-Proyectos/rrhh-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { base64ToBytes, bufferToBase64 } from \"./base64.browser\";\nimport { bufferToHex } from \"./hex\";\nimport { utf8ToBytes } from \"./utf8.browser\";\nlet subtleCrypto;\n/**\n * Returns a cached reference to the Web API crypto.subtle object.\n * @internal\n */\n\nfunction getCrypto() {\n  if (subtleCrypto) {\n    return subtleCrypto;\n  }\n\n  if (!self.crypto || !self.crypto.subtle) {\n    throw new Error(\"Your browser environment does not support cryptography functions.\");\n  }\n\n  subtleCrypto = self.crypto.subtle;\n  return subtleCrypto;\n}\n/**\n * Generates a SHA-256 HMAC signature.\n * @param key - The HMAC key represented as a base64 string, used to generate the cryptographic HMAC hash.\n * @param stringToSign - The data to be signed.\n * @param encoding - The textual encoding to use for the returned HMAC digest.\n */\n\n\nexport function computeSha256Hmac(_x, _x2, _x3) {\n  return _computeSha256Hmac.apply(this, arguments);\n}\n/**\n * Generates a SHA-256 hash.\n * @param content - The data to be included in the hash.\n * @param encoding - The textual encoding to use for the returned hash.\n */\n\nfunction _computeSha256Hmac() {\n  _computeSha256Hmac = _asyncToGenerator(function* (key, stringToSign, encoding) {\n    const crypto = getCrypto();\n    const keyBytes = base64ToBytes(key);\n    const stringToSignBytes = utf8ToBytes(stringToSign);\n    const cryptoKey = yield crypto.importKey(\"raw\", keyBytes, {\n      name: \"HMAC\",\n      hash: {\n        name: \"SHA-256\"\n      }\n    }, false, [\"sign\"]);\n    const signature = yield crypto.sign({\n      name: \"HMAC\",\n      hash: {\n        name: \"SHA-256\"\n      }\n    }, cryptoKey, stringToSignBytes);\n\n    switch (encoding) {\n      case \"base64\":\n        return bufferToBase64(signature);\n\n      case \"hex\":\n        return bufferToHex(signature);\n    }\n  });\n  return _computeSha256Hmac.apply(this, arguments);\n}\n\nexport function computeSha256Hash(_x4, _x5) {\n  return _computeSha256Hash.apply(this, arguments);\n} //# sourceMappingURL=sha256.browser.js.map\n\nfunction _computeSha256Hash() {\n  _computeSha256Hash = _asyncToGenerator(function* (content, encoding) {\n    const contentBytes = utf8ToBytes(content);\n    const digest = yield getCrypto().digest({\n      name: \"SHA-256\"\n    }, contentBytes);\n\n    switch (encoding) {\n      case \"base64\":\n        return bufferToBase64(digest);\n\n      case \"hex\":\n        return bufferToHex(digest);\n    }\n  });\n  return _computeSha256Hash.apply(this, arguments);\n}","map":{"version":3,"sources":["C:/Users/Equipo/source/Tgsc-Proyectos/rrhh-web/node_modules/@azure/core-util/dist-esm/src/sha256.browser.js"],"names":["base64ToBytes","bufferToBase64","bufferToHex","utf8ToBytes","subtleCrypto","getCrypto","self","crypto","subtle","Error","computeSha256Hmac","key","stringToSign","encoding","keyBytes","stringToSignBytes","cryptoKey","importKey","name","hash","signature","sign","computeSha256Hash","content","contentBytes","digest"],"mappings":";AAAA;AACA;AACA,SAASA,aAAT,EAAwBC,cAAxB,QAA8C,kBAA9C;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,IAAIC,YAAJ;AACA;AACA;AACA;AACA;;AACA,SAASC,SAAT,GAAqB;AACjB,MAAID,YAAJ,EAAkB;AACd,WAAOA,YAAP;AACH;;AACD,MAAI,CAACE,IAAI,CAACC,MAAN,IAAgB,CAACD,IAAI,CAACC,MAAL,CAAYC,MAAjC,EAAyC;AACrC,UAAM,IAAIC,KAAJ,CAAU,mEAAV,CAAN;AACH;;AACDL,EAAAA,YAAY,GAAGE,IAAI,CAACC,MAAL,CAAYC,MAA3B;AACA,SAAOJ,YAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,gBAAsBM,iBAAtB;AAAA;AAAA;AAmBA;AACA;AACA;AACA;AACA;;;yCAvBO,WAAiCC,GAAjC,EAAsCC,YAAtC,EAAoDC,QAApD,EAA8D;AACjE,UAAMN,MAAM,GAAGF,SAAS,EAAxB;AACA,UAAMS,QAAQ,GAAGd,aAAa,CAACW,GAAD,CAA9B;AACA,UAAMI,iBAAiB,GAAGZ,WAAW,CAACS,YAAD,CAArC;AACA,UAAMI,SAAS,SAAST,MAAM,CAACU,SAAP,CAAiB,KAAjB,EAAwBH,QAAxB,EAAkC;AACtDI,MAAAA,IAAI,EAAE,MADgD;AAEtDC,MAAAA,IAAI,EAAE;AAAED,QAAAA,IAAI,EAAE;AAAR;AAFgD,KAAlC,EAGrB,KAHqB,EAGd,CAAC,MAAD,CAHc,CAAxB;AAIA,UAAME,SAAS,SAASb,MAAM,CAACc,IAAP,CAAY;AAChCH,MAAAA,IAAI,EAAE,MAD0B;AAEhCC,MAAAA,IAAI,EAAE;AAAED,QAAAA,IAAI,EAAE;AAAR;AAF0B,KAAZ,EAGrBF,SAHqB,EAGVD,iBAHU,CAAxB;;AAIA,YAAQF,QAAR;AACI,WAAK,QAAL;AACI,eAAOZ,cAAc,CAACmB,SAAD,CAArB;;AACJ,WAAK,KAAL;AACI,eAAOlB,WAAW,CAACkB,SAAD,CAAlB;AAJR;AAMH,G;;;;AAMD,gBAAsBE,iBAAtB;AAAA;AAAA,C,CAUA;;;yCAVO,WAAiCC,OAAjC,EAA0CV,QAA1C,EAAoD;AACvD,UAAMW,YAAY,GAAGrB,WAAW,CAACoB,OAAD,CAAhC;AACA,UAAME,MAAM,SAASpB,SAAS,GAAGoB,MAAZ,CAAmB;AAAEP,MAAAA,IAAI,EAAE;AAAR,KAAnB,EAAwCM,YAAxC,CAArB;;AACA,YAAQX,QAAR;AACI,WAAK,QAAL;AACI,eAAOZ,cAAc,CAACwB,MAAD,CAArB;;AACJ,WAAK,KAAL;AACI,eAAOvB,WAAW,CAACuB,MAAD,CAAlB;AAJR;AAMH,G","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { base64ToBytes, bufferToBase64 } from \"./base64.browser\";\nimport { bufferToHex } from \"./hex\";\nimport { utf8ToBytes } from \"./utf8.browser\";\nlet subtleCrypto;\n/**\n * Returns a cached reference to the Web API crypto.subtle object.\n * @internal\n */\nfunction getCrypto() {\n    if (subtleCrypto) {\n        return subtleCrypto;\n    }\n    if (!self.crypto || !self.crypto.subtle) {\n        throw new Error(\"Your browser environment does not support cryptography functions.\");\n    }\n    subtleCrypto = self.crypto.subtle;\n    return subtleCrypto;\n}\n/**\n * Generates a SHA-256 HMAC signature.\n * @param key - The HMAC key represented as a base64 string, used to generate the cryptographic HMAC hash.\n * @param stringToSign - The data to be signed.\n * @param encoding - The textual encoding to use for the returned HMAC digest.\n */\nexport async function computeSha256Hmac(key, stringToSign, encoding) {\n    const crypto = getCrypto();\n    const keyBytes = base64ToBytes(key);\n    const stringToSignBytes = utf8ToBytes(stringToSign);\n    const cryptoKey = await crypto.importKey(\"raw\", keyBytes, {\n        name: \"HMAC\",\n        hash: { name: \"SHA-256\" },\n    }, false, [\"sign\"]);\n    const signature = await crypto.sign({\n        name: \"HMAC\",\n        hash: { name: \"SHA-256\" },\n    }, cryptoKey, stringToSignBytes);\n    switch (encoding) {\n        case \"base64\":\n            return bufferToBase64(signature);\n        case \"hex\":\n            return bufferToHex(signature);\n    }\n}\n/**\n * Generates a SHA-256 hash.\n * @param content - The data to be included in the hash.\n * @param encoding - The textual encoding to use for the returned hash.\n */\nexport async function computeSha256Hash(content, encoding) {\n    const contentBytes = utf8ToBytes(content);\n    const digest = await getCrypto().digest({ name: \"SHA-256\" }, contentBytes);\n    switch (encoding) {\n        case \"base64\":\n            return bufferToBase64(digest);\n        case \"hex\":\n            return bufferToHex(digest);\n    }\n}\n//# sourceMappingURL=sha256.browser.js.map"]},"metadata":{},"sourceType":"module"}