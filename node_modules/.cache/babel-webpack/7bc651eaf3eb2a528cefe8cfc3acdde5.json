{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Equipo/source/Tgsc-Proyectos/youManager-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { FormGroup, Validators, FormControl } from '@angular/forms';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';\nimport { BehaviorSubject } from 'rxjs';\nimport { DialogoConfirmacionComponent } from '@shared/components/dialogo-confirmacion/dialogo-confirmacion.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@modules/seguridad/services/roles.service\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"@shared/services/bootstrap-notify.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"xng-breadcrumb\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"@angular/material/button\";\nimport * as i8 from \"@angular/material/icon\";\nimport * as i9 from \"@angular/material/form-field\";\nimport * as i10 from \"@angular/material/input\";\nimport * as i11 from \"@angular/common\";\nimport * as i12 from \"@angular/material/tree\";\nimport * as i13 from \"@angular/material/checkbox\";\n\nfunction RegistroRolesComponent_mat_error_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Este campo es obligatorio \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction RegistroRolesComponent_mat_error_39_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Este campo es obligatorio \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction RegistroRolesComponent_mat_tree_node_46_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 24);\n    i0.ɵɵelement(1, \"button\", 25);\n    i0.ɵɵelementStart(2, \"mat-checkbox\", 26);\n    i0.ɵɵlistener(\"change\", function RegistroRolesComponent_mat_tree_node_46_Template_mat_checkbox_change_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const node_r5 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.todoLeafItemSelectionToggle(node_r5);\n    });\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const node_r5 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"checked\", ctx_r2.checklistSelection.isSelected(node_r5));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(node_r5.title);\n  }\n}\n\nfunction RegistroRolesComponent_mat_tree_node_47_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 27);\n    i0.ɵɵelement(1, \"button\", 25);\n    i0.ɵɵelementStart(2, \"mat-form-field\", 28);\n    i0.ɵɵelementStart(3, \"mat-label\");\n    i0.ɵɵtext(4, \"New item...\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"input\", 29, 30);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"button\", 31);\n    i0.ɵɵlistener(\"click\", function RegistroRolesComponent_mat_tree_node_47_Template_button_click_7_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const node_r8 = restoredCtx.$implicit;\n\n      const _r9 = i0.ɵɵreference(6);\n\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.saveNode(node_r8, _r9.value);\n    });\n    i0.ɵɵtext(8, \"Save\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction RegistroRolesComponent_mat_tree_node_48_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 27);\n    i0.ɵɵelementStart(1, \"button\", 32);\n    i0.ɵɵelementStart(2, \"mat-icon\", 33);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"mat-checkbox\", 34);\n    i0.ɵɵlistener(\"change\", function RegistroRolesComponent_mat_tree_node_48_Template_mat_checkbox_change_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r14);\n      const node_r12 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.todoItemSelectionToggle(node_r12);\n    });\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"button\", 35);\n    i0.ɵɵlistener(\"click\", function RegistroRolesComponent_mat_tree_node_48_Template_button_click_6_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r14);\n      const node_r12 = restoredCtx.$implicit;\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.addNewItem(node_r12);\n    });\n    i0.ɵɵelementStart(7, \"mat-icon\");\n    i0.ɵɵtext(8, \"add\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const node_r12 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"aria-label\", \"Toggle \" + node_r12.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r4.treeControl.isExpanded(node_r12) ? \"expand_more\" : \"chevron_right\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"checked\", ctx_r4.descendantsAllSelected(node_r12))(\"indeterminate\", ctx_r4.descendantsPartiallySelected(node_r12));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(node_r12.title);\n  }\n}\n\nconst _c0 = function () {\n  return [\"/seguridad/bandusuario\"];\n};\n/**\r\n * Node for to-do item\r\n */\n\n\nexport class TodoItemNode {}\n/** Flat to-do item node with expandable and level information */\n\nexport class TodoItemFlatNode {}\n/**\r\n * Checklist database, it can build a tree structured Json object.\r\n * Each node in Json object represents a to-do item or a category.\r\n * If a node is a category, it has children ite|s and new items can be added under the category.\r\n */\n\nexport class ChecklistDatabase {\n  constructor(rolesService) {\n    this.rolesService = rolesService;\n    this.dataChange = new BehaviorSubject([]);\n    this.initialize();\n  }\n\n  get data() {\n    return this.dataChange.value;\n  }\n\n  initialize() {\n    // Build the tree nodes from Json object. The result is a list of `TodoItemNode` with nested\n    //     file node as children.\n    //const data = this.buildFileTree(TREE_DATA, 0);\n    // Notify the change.\n    //this.dataChange.next(data);\n    this.rolesService.listarOpciones().then(data => {\n      this.dataChange.next(data);\n    });\n  }\n  /**\r\n   * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\r\n   * The return value is the list of `TodoItemNode`.\r\n   */\n\n\n  buildFileTree(obj, level) {\n    return Object.keys(obj).reduce((accumulator, key) => {\n      const value = obj[key];\n      const node = new TodoItemNode();\n      node.title = key;\n\n      if (value != null) {\n        if (typeof value === 'object') {\n          node.children = this.buildFileTree(value, level + 1);\n        } else {\n          node.title = value;\n        }\n      }\n\n      return accumulator.concat(node);\n    }, []);\n  }\n  /** Add an item to to-do list */\n\n\n  insertItem(parent, name) {\n    if (parent.children) {\n      parent.children.push({\n        title: name\n      });\n      this.dataChange.next(this.data);\n    }\n  }\n\n  updateItem(node, name) {\n    node.title = name;\n    this.dataChange.next(this.data);\n  }\n\n}\n\nChecklistDatabase.ɵfac = function ChecklistDatabase_Factory(t) {\n  return new (t || ChecklistDatabase)(i0.ɵɵinject(i1.RolesService));\n};\n\nChecklistDatabase.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ChecklistDatabase,\n  factory: ChecklistDatabase.ɵfac\n});\nexport class RegistroRolesComponent {\n  constructor(_database, dialogo, rolesService, bootstrapNotifyBarService, router, activatedRoute) {\n    this._database = _database;\n    this.dialogo = dialogo;\n    this.rolesService = rolesService;\n    this.bootstrapNotifyBarService = bootstrapNotifyBarService;\n    this.router = router;\n    this.activatedRoute = activatedRoute;\n    /** Map from flat node to nested node. This helps us finding the nested node to be modified */\n\n    this.flatNodeMap = new Map();\n    /** Map from nested node to flattened node. This helps us to keep the same object for selection */\n\n    this.nestedNodeMap = new Map();\n    /** A selected parent node to be inserted */\n\n    this.selectedParent = null;\n    /** The new item's name */\n\n    this.newItemName = '';\n    /** The selection for checklist */\n\n    this.checklistSelection = new SelectionModel(true\n    /* multiple */\n    );\n\n    this.getLevel = node => node.level;\n\n    this.isExpandable = node => node.expandable;\n\n    this.getChildren = node => node.children;\n\n    this.hasChild = (_, _nodeData) => _nodeData.expandable;\n\n    this.hasNoContent = (_, _nodeData) => _nodeData.title === '';\n    /**\r\n     * Transformer to convert nested node to flat node. Record the nodes in maps for later use.\r\n     */\n\n\n    this.transformer = (node, level) => {\n      var _a;\n\n      const existingNode = this.nestedNodeMap.get(node);\n      const flatNode = existingNode && existingNode.title === node.title ? existingNode : new TodoItemFlatNode();\n      flatNode.title = node.title;\n      flatNode.level = level;\n      flatNode.expandable = !!((_a = node.children) === null || _a === void 0 ? void 0 : _a.length);\n      flatNode.id = node.id;\n      flatNode.isboton = node.isboton;\n      flatNode.parentId = node.parentId;\n      this.flatNodeMap.set(flatNode, node);\n      this.nestedNodeMap.set(node, flatNode);\n      return flatNode;\n    };\n\n    this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n    this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable);\n    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n    _database.dataChange.subscribe(data => {\n      this.dataSource.data = data;\n    });\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.activatedRoute.snapshot.paramMap.get('id')) {\n        _this.id = parseInt(_this.activatedRoute.snapshot.paramMap.get('id'));\n        _this.titulo = \"Editar rol\";\n        console.log(_this.titulo);\n      } else {\n        _this.titulo = \"REGISTRAR ROLES\";\n      }\n\n      _this.formulario = new FormGroup({\n        nombre: new FormControl('', [Validators.required]),\n        descripcion: new FormControl('', [Validators.required]) // id: new FormControl(0),\n        // codigo: new FormControl(''),\n\n        /*apellidoPaterno: new FormControl('', [Validators.required]),\r\n        apellidoMaterno: new FormControl('', [Validators.required]),\r\n        email: new FormControl('', [Validators.required, Validators.pattern(this.RegEx_mailPattern)])*/\n\n      });\n      /*\r\n      this.listarOpcionesDto = await this.rolesService.listarOpciones();\r\n      this.rolesService.listarOpciones().subscribe((data: any[]) => {\r\n        this.listarOpcionesDto  = data;\r\n        \r\n      });*/\n      // if (this.usuario) {\n\n      /*\r\n      this.formulario.patchValue({\r\n        id: this.usuario.id,\r\n        login: this.usuario.login,\r\n        nombre: this.usuario.nombre,\r\n        apellidoPaterno: this.usuario.apellidoPaterno,\r\n        apellidoMaterno: this.usuario.apellidoMaterno,\r\n        email: this.usuario.correo   ,\r\n        codigo: this.usuario.codigo\r\n      });\r\n      this.formulario.controls.codigo.disable();*/\n      // }\n    })();\n  }\n  /** Whether all the descendants of the node are selected. */\n\n\n  descendantsAllSelected(node) {\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected = descendants.length > 0 && descendants.every(child => {\n      return this.checklistSelection.isSelected(child);\n    });\n    return descAllSelected;\n  }\n  /** Whether part of the descendants are selected */\n\n\n  descendantsPartiallySelected(node) {\n    const descendants = this.treeControl.getDescendants(node);\n    const result = descendants.some(child => this.checklistSelection.isSelected(child));\n    return result && !this.descendantsAllSelected(node);\n  }\n  /** Toggle the to-do item selection. Select/deselect all the descendants node */\n\n\n  todoItemSelectionToggle(node) {\n    this.checklistSelection.toggle(node);\n    const descendants = this.treeControl.getDescendants(node);\n    this.checklistSelection.isSelected(node) ? this.checklistSelection.select(...descendants) : this.checklistSelection.deselect(...descendants); // Force update for the parent\n\n    descendants.forEach(child => this.checklistSelection.isSelected(child));\n    this.checkAllParentsSelection(node);\n  }\n  /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */\n\n\n  todoLeafItemSelectionToggle(node) {\n    this.checklistSelection.toggle(node);\n    this.checkAllParentsSelection(node);\n  }\n  /* Checks all the parents when a leaf node is selected/unselected */\n\n\n  checkAllParentsSelection(node) {\n    let parent = this.getParentNode(node);\n\n    while (parent) {\n      this.checkRootNodeSelection(parent);\n      parent = this.getParentNode(parent);\n    }\n  }\n  /** Check root node checked state and change it accordingly */\n\n\n  checkRootNodeSelection(node) {\n    const nodeSelected = this.checklistSelection.isSelected(node);\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected = descendants.length > 0 && descendants.every(child => {\n      return this.checklistSelection.isSelected(child);\n    });\n\n    if (nodeSelected && !descAllSelected) {\n      this.checklistSelection.deselect(node);\n    } else if (!nodeSelected && descAllSelected) {\n      this.checklistSelection.select(node);\n    }\n  }\n  /* Get the parent node of a node */\n\n\n  getParentNode(node) {\n    const currentLevel = this.getLevel(node);\n\n    if (currentLevel < 1) {\n      return null;\n    }\n\n    const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n\n    for (let i = startIndex; i >= 0; i--) {\n      const currentNode = this.treeControl.dataNodes[i];\n\n      if (this.getLevel(currentNode) < currentLevel) {\n        return currentNode;\n      }\n    }\n\n    return null;\n  }\n  /** Select the category so we can insert the new item. */\n\n\n  addNewItem(node) {\n    const parentNode = this.flatNodeMap.get(node);\n\n    this._database.insertItem(parentNode, '');\n\n    this.treeControl.expand(node);\n  }\n  /** Save the node to database */\n\n\n  saveNode(node, itemValue) {\n    const nestedNode = this.flatNodeMap.get(node);\n\n    this._database.updateItem(nestedNode, itemValue);\n  }\n\n  guardar() {\n    var _this2 = this;\n\n    //opciones.concat(this.treeControl.dataNodes.filter(a=>opciones.includes((a as any).id)).map(x => { return (x as any).parentId }));\n    //console.log(opciones);\n    //.filter(a=>!a.isboton).map(x => { return (x as any).id }); // filtra las opciones\n    // let opciones : number[] = this.checklistSelection.selected.filter(a=>!a.isboton).map(x => { return (x as any).id }); // filtra las opciones\n    //  opciones.concat(this.checklistSelection.selected.filter(a=>a.isboton).map(x => { return (x as any).parentId }));\n    // opciones =  opciones.filter((n, i) => opciones.indexOf(n) === i);\n    //console.log(opciones);\n    if (this.formulario.invalid) {\n      this.formulario.markAllAsTouched();\n      return;\n    }\n\n    this.dialogo.open(DialogoConfirmacionComponent, {\n      maxWidth: '25vw',\n      maxHeight: 'auto',\n      height: 'auto',\n      width: '25%',\n      disableClose: true,\n      data: {\n        titulo: `Registro de Roles`,\n        mensaje: `¿Está seguro que desea grabar?`\n      }\n    }).afterClosed().subscribe( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (Ok) {\n        if (Ok) {\n          var menuSelect = _this2.checklistSelection.selected;\n\n          var botones = _this2.checklistSelection.selected.filter(a => a.isboton).map(x => {\n            return x.id;\n          });\n\n          var opciones = menuSelect.map(x => {\n            return x.parentId;\n          }); //tomamos todos los parenId, ya que son opciones\n\n          menuSelect.filter(a => !a.isboton).map(x => {\n            opciones.push(x.id);\n          }); //opciones de los botones    \n\n          _this2.treeControl.dataNodes.filter(a => opciones.includes(a.id)).map(x => {\n            opciones.push(x.parentId);\n          }); //lectura de modulos\n\n\n          opciones = opciones.filter((item, i, arr) => arr.findIndex(t => t === item) === i);\n          let request = {\n            nombre: _this2.formulario.value.nombre,\n            descripcion: _this2.formulario.value.descripcion,\n            listOpciones: opciones,\n            listAcciones: botones\n          };\n\n          _this2.rolesService.grabarRoles(request).subscribe(data => {\n            _this2.bootstrapNotifyBarService.notifySuccess('Registro realizado correctamente');\n\n            setTimeout(() => {\n              _this2.router.navigate(['/seguridad', 'bandroles']);\n            }, 3000);\n          }); // this.ser\n          // this.requestUsuario.id = this.formulario.value.id;\n          // this.requestUsuario.nombre = this.formulario.value.nombre;\n          // this.requestUsuario.descripcion = this.formulario.value.descripcion;\n          // this.requestUsuario.listOpciones = [1];\n          // this.requestUsuario.listAcciones = [1];\n          // this.onGuardar.emit(this.requestUsuario);\n\n        }\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n\n}\n\nRegistroRolesComponent.ɵfac = function RegistroRolesComponent_Factory(t) {\n  return new (t || RegistroRolesComponent)(i0.ɵɵdirectiveInject(ChecklistDatabase), i0.ɵɵdirectiveInject(i2.MatDialog), i0.ɵɵdirectiveInject(i1.RolesService), i0.ɵɵdirectiveInject(i3.BootstrapNotifyBarService), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i4.ActivatedRoute));\n};\n\nRegistroRolesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegistroRolesComponent,\n  selectors: [[\"app-registro-roles\"]],\n  features: [i0.ɵɵProvidersFeature([ChecklistDatabase])],\n  decls: 49,\n  vars: 9,\n  consts: [[1, \"main-content\"], [1, \"container-fluid\"], [1, \"form-group\", \"row\"], [1, \"col-md-12\"], [1, \"card\"], [1, \"card-header\", \"card-header-rose\", \"card-header-icon\"], [1, \"card-icon\"], [1, \"material-icons\"], [1, \"card-title\"], [1, \"card-body\"], [1, \"row\"], [\"autocomplete\", \"on\", 3, \"formGroup\", \"ngSubmit\"], [\"mat-raised-button\", \"\", 1, \"btn\"], [\"mat-raised-button\", \"\", 1, \"btn\", \"btn-info\", 3, \"routerLink\"], [1, \"form-group\", \"border\", \"p-3\"], [1, \"col-md-6\"], [\"appearance\", \"outline\"], [\"matInput\", \"\", \"formControlName\", \"nombre\"], [4, \"ngIf\"], [\"matInput\", \"\", \"formControlName\", \"descripcion\"], [1, \"w-auto\", \"px-2\"], [3, \"dataSource\", \"treeControl\"], [\"matTreeNodeToggle\", \"\", \"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\", \"matTreeNodeDefWhen\"], [\"matTreeNodeToggle\", \"\", \"matTreeNodePadding\", \"\"], [\"mat-icon-button\", \"\", \"disabled\", \"\"], [1, \"checklist-leaf-node\", 3, \"checked\", \"change\"], [\"matTreeNodePadding\", \"\"], [\"appearance\", \"fill\"], [\"matInput\", \"\", \"placeholder\", \"Ex. Lettuce\"], [\"itemValue\", \"\"], [\"mat-button\", \"\", 3, \"click\"], [\"mat-icon-button\", \"\", \"matTreeNodeToggle\", \"\"], [1, \"mat-icon-rtl-mirror\"], [3, \"checked\", \"indeterminate\", \"change\"], [\"mat-icon-button\", \"\", 3, \"click\"]],\n  template: function RegistroRolesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelementStart(2, \"div\", 2);\n      i0.ɵɵelementStart(3, \"div\", 3);\n      i0.ɵɵelement(4, \"xng-breadcrumb\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\", 2);\n      i0.ɵɵelementStart(6, \"div\", 3);\n      i0.ɵɵelementStart(7, \"div\", 4);\n      i0.ɵɵelementStart(8, \"div\", 5);\n      i0.ɵɵelementStart(9, \"div\", 6);\n      i0.ɵɵelementStart(10, \"i\", 7);\n      i0.ɵɵtext(11, \"mail_outline\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"h4\", 8);\n      i0.ɵɵtext(13, \"REGISTRAR ROLES\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"div\", 9);\n      i0.ɵɵelementStart(15, \"div\", 10);\n      i0.ɵɵelementStart(16, \"div\", 3);\n      i0.ɵɵelementStart(17, \"form\", 11);\n      i0.ɵɵlistener(\"ngSubmit\", function RegistroRolesComponent_Template_form_ngSubmit_17_listener() {\n        return ctx.guardar();\n      });\n      i0.ɵɵelementStart(18, \"div\", 10);\n      i0.ɵɵelementStart(19, \"div\", 3);\n      i0.ɵɵelementStart(20, \"button\", 12);\n      i0.ɵɵtext(21, \" Guardar \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"a\", 13);\n      i0.ɵɵtext(23, \" Cancelar \");\n      i0.ɵɵelementStart(24, \"mat-icon\");\n      i0.ɵɵtext(25, \"block\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(26, \"fieldset\", 14);\n      i0.ɵɵelementStart(27, \"div\", 10);\n      i0.ɵɵelementStart(28, \"div\", 15);\n      i0.ɵɵelementStart(29, \"mat-form-field\", 16);\n      i0.ɵɵelementStart(30, \"mat-label\");\n      i0.ɵɵtext(31, \"Nombre\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(32, \"input\", 17);\n      i0.ɵɵtemplate(33, RegistroRolesComponent_mat_error_33_Template, 2, 0, \"mat-error\", 18);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(34, \"div\", 15);\n      i0.ɵɵelementStart(35, \"mat-form-field\", 16);\n      i0.ɵɵelementStart(36, \"mat-label\");\n      i0.ɵɵtext(37, \"Descripci\\u00F3n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(38, \"input\", 19);\n      i0.ɵɵtemplate(39, RegistroRolesComponent_mat_error_39_Template, 2, 0, \"mat-error\", 18);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(40, \"fieldset\", 14);\n      i0.ɵɵelementStart(41, \"legend\", 20);\n      i0.ɵɵtext(42, \"OPCIONES Y BOTONES DEL SISTEMA\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(43, \"div\", 10);\n      i0.ɵɵelementStart(44, \"div\", 3);\n      i0.ɵɵelementStart(45, \"mat-tree\", 21);\n      i0.ɵɵtemplate(46, RegistroRolesComponent_mat_tree_node_46_Template, 4, 2, \"mat-tree-node\", 22);\n      i0.ɵɵtemplate(47, RegistroRolesComponent_mat_tree_node_47_Template, 9, 0, \"mat-tree-node\", 23);\n      i0.ɵɵtemplate(48, RegistroRolesComponent_mat_tree_node_48_Template, 9, 5, \"mat-tree-node\", 23);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(17);\n      i0.ɵɵproperty(\"formGroup\", ctx.formulario);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(8, _c0));\n      i0.ɵɵadvance(11);\n      i0.ɵɵproperty(\"ngIf\", ctx.formulario.controls[\"nombre\"].hasError(\"required\"));\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", ctx.formulario.controls[\"descripcion\"].hasError(\"required\"));\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasNoContent);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasChild);\n    }\n  },\n  directives: [i5.BreadcrumbComponent, i6.ɵNgNoValidate, i6.NgControlStatusGroup, i6.FormGroupDirective, i7.MatButton, i7.MatAnchor, i4.RouterLinkWithHref, i8.MatIcon, i9.MatFormField, i9.MatLabel, i10.MatInput, i6.DefaultValueAccessor, i6.NgControlStatus, i6.FormControlName, i11.NgIf, i12.MatTree, i12.MatTreeNodeDef, i9.MatError, i12.MatTreeNode, i12.MatTreeNodeToggle, i12.MatTreeNodePadding, i13.MatCheckbox],\n  encapsulation: 2\n});","map":{"version":3,"sources":["C:\\Users\\Equipo\\source\\Tgsc-Proyectos\\youManager-web\\src\\app\\modules\\seguridad\\pages\\roles\\registro-roles-page\\registro-roles.component.ts","C:\\Users\\Equipo\\source\\Tgsc-Proyectos\\youManager-web\\src\\app\\modules\\seguridad\\pages\\roles\\registro-roles-page\\registro-roles.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output, Inject, Injectable } from '@angular/core';\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { RolesService } from '@modules/seguridad/services/roles.service';\r\nimport { RolesDto } from '@core/models/seguridad/RolesDto';\r\nimport { BootstrapNotifyBarService } from \"@shared/services/bootstrap-notify.service\";\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FormGroup, FormBuilder, Validators, FormControl, FormArray, ValidatorFn, AbstractControl } from '@angular/forms';\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {FlatTreeControl} from '@angular/cdk/tree';\r\nimport {MatTreeFlatDataSource, MatTreeFlattener} from '@angular/material/tree';\r\nimport {BehaviorSubject} from 'rxjs';\r\nimport { DialogoConfirmacionComponent } from '@shared/components/dialogo-confirmacion/dialogo-confirmacion.component';\r\nimport * as CryptoJS from 'crypto-js'; \r\n\r\n/**\r\n * Node for to-do item\r\n */\r\n export class TodoItemNode {\r\n  children: TodoItemNode[];\r\n  title: string;\r\n}\r\n\r\n/** Flat to-do item node with expandable and level information */\r\nexport class TodoItemFlatNode {\r\n  title: string;\r\n  level: number;\r\n  expandable: boolean;\r\n  isboton : boolean;\r\n}\r\n\r\n\r\n/**\r\n * Checklist database, it can build a tree structured Json object.\r\n * Each node in Json object represents a to-do item or a category.\r\n * If a node is a category, it has children ite|s and new items can be added under the category.\r\n */\r\n @Injectable()\r\n export class ChecklistDatabase {\r\n   dataChange = new BehaviorSubject<TodoItemNode[]>([]);\r\n \r\n   get data(): TodoItemNode[] {\r\n     return this.dataChange.value;\r\n   }\r\n \r\n   constructor(private rolesService: RolesService) {\r\n     this.initialize();\r\n   }\r\n \r\n   initialize() {\r\n     // Build the tree nodes from Json object. The result is a list of `TodoItemNode` with nested\r\n     //     file node as children.\r\n     //const data = this.buildFileTree(TREE_DATA, 0);\r\n \r\n     // Notify the change.\r\n     //this.dataChange.next(data);\r\n\r\n     this.rolesService.listarOpciones().then((data: any[]) => {            \r\n      this.dataChange.next(data);  \r\n    });\r\n   }\r\n \r\n   /**\r\n    * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\r\n    * The return value is the list of `TodoItemNode`.\r\n    */\r\n   buildFileTree(obj: {[key: string]: any}, level: number): TodoItemNode[] {\r\n     return Object.keys(obj).reduce<TodoItemNode[]>((accumulator, key) => {\r\n       const value = obj[key];\r\n       const node = new TodoItemNode();\r\n       node.title = key;\r\n \r\n       if (value != null) {\r\n         if (typeof value === 'object') {\r\n           node.children = this.buildFileTree(value, level + 1);\r\n         } else {\r\n           node.title = value;\r\n         }\r\n       }\r\n \r\n       return accumulator.concat(node);\r\n     }, []);\r\n   }\r\n \r\n   /** Add an item to to-do list */\r\n   insertItem(parent: TodoItemNode, name: string) {\r\n     if (parent.children) {\r\n       parent.children.push({title: name} as TodoItemNode);\r\n       this.dataChange.next(this.data);\r\n     }\r\n   }\r\n \r\n   updateItem(node: TodoItemNode, name: string) {\r\n     node.title = name;\r\n     this.dataChange.next(this.data);\r\n   }\r\n }\r\n \r\n@Component({\r\n  selector: 'app-registro-roles',\r\n  templateUrl: './registro-roles.component.html',\r\n  styleUrls: [\r\n  ],\r\n  providers: [ChecklistDatabase],\r\n})\r\nexport class RegistroRolesComponent   implements OnInit {\r\n  id: number;\r\n  titulo : string;\r\n  formulario: FormGroup;\r\n  \r\n  /** Map from flat node to nested node. This helps us finding the nested node to be modified */\r\n  flatNodeMap = new Map<TodoItemFlatNode, TodoItemNode>();\r\n\r\n  /** Map from nested node to flattened node. This helps us to keep the same object for selection */\r\n  nestedNodeMap = new Map<TodoItemNode, TodoItemFlatNode>();\r\n\r\n  /** A selected parent node to be inserted */\r\n  selectedParent: TodoItemFlatNode | null = null;\r\n\r\n  /** The new item's name */\r\n  newItemName = '';\r\n\r\n  treeControl: FlatTreeControl<TodoItemFlatNode>;\r\n\r\n  treeFlattener: MatTreeFlattener<TodoItemNode, TodoItemFlatNode>;\r\n\r\n  dataSource: MatTreeFlatDataSource<TodoItemNode, TodoItemFlatNode>;\r\n\r\n  /** The selection for checklist */\r\n  checklistSelection = new SelectionModel<TodoItemFlatNode>(true /* multiple */);\r\n  decryptedMessage : string;\r\n\r\n  constructor(private _database: ChecklistDatabase,\r\n              public dialogo: MatDialog,\r\n              private rolesService: RolesService,\r\n              private bootstrapNotifyBarService: BootstrapNotifyBarService,\r\n              private router: Router,\r\n              private activatedRoute: ActivatedRoute) {\r\n    this.treeFlattener = new MatTreeFlattener(\r\n      this.transformer,\r\n      this.getLevel,\r\n      this.isExpandable,\r\n      this.getChildren,\r\n    );\r\n    this.treeControl = new FlatTreeControl<TodoItemFlatNode>(this.getLevel, this.isExpandable);\r\n    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\r\n\r\n    _database.dataChange.subscribe(data => {\r\n      this.dataSource.data = data;\r\n    });\r\n  }\r\n  async ngOnInit() {\r\n    if(this.activatedRoute.snapshot.paramMap.get('id')){      \r\n      this.id=parseInt(this.activatedRoute.snapshot.paramMap.get('id'));\r\n      this.titulo=\"Editar rol\";\r\n      console.log(this.titulo)\r\n    }else\r\n    {\r\n      this.titulo=\"REGISTRAR ROLES\";\r\n    }\r\n    \r\n    \r\n    this.formulario = new FormGroup({\r\n      nombre: new FormControl('', [Validators.required]),\r\n      descripcion: new FormControl('', [Validators.required])\r\n      // id: new FormControl(0),\r\n      // codigo: new FormControl(''),\r\n      \r\n\r\n      /*apellidoPaterno: new FormControl('', [Validators.required]),\r\n      apellidoMaterno: new FormControl('', [Validators.required]),\r\n      email: new FormControl('', [Validators.required, Validators.pattern(this.RegEx_mailPattern)])*/\r\n    });\r\n\r\n    /*\r\n    this.listarOpcionesDto = await this.rolesService.listarOpciones();    \r\n    this.rolesService.listarOpciones().subscribe((data: any[]) => {\r\n      this.listarOpcionesDto  = data;      \r\n      \r\n    });*/\r\n\r\n   \r\n\r\n    // if (this.usuario) {\r\n      /*\r\n      this.formulario.patchValue({\r\n        id: this.usuario.id,\r\n        login: this.usuario.login,\r\n        nombre: this.usuario.nombre,\r\n        apellidoPaterno: this.usuario.apellidoPaterno,\r\n        apellidoMaterno: this.usuario.apellidoMaterno,\r\n        email: this.usuario.correo   ,    \r\n        codigo: this.usuario.codigo \r\n      });\r\n      this.formulario.controls.codigo.disable();*/\r\n    // }\r\n  }\r\n  getLevel = (node: TodoItemFlatNode) => node.level;\r\n\r\n  isExpandable = (node: TodoItemFlatNode) => node.expandable;\r\n\r\n  getChildren = (node: TodoItemNode): TodoItemNode[] => node.children;\r\n\r\n  hasChild = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.expandable;\r\n\r\n  hasNoContent = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.title === '';\r\n\r\n  /**\r\n   * Transformer to convert nested node to flat node. Record the nodes in maps for later use.\r\n   */\r\n  transformer = (node: any, level: number) => {\r\n    \r\n    const existingNode = this.nestedNodeMap.get(node) as any;\r\n    const flatNode =\r\n      existingNode && existingNode.title === node.title ? existingNode : new TodoItemFlatNode();\r\n    flatNode.title = node.title;\r\n    flatNode.level = level;\r\n    flatNode.expandable = !!node.children?.length;\r\n    flatNode.id=node.id;\r\n    flatNode.isboton=node.isboton;\r\n    flatNode.parentId=node.parentId;\r\n\r\n    this.flatNodeMap.set(flatNode, node);\r\n    this.nestedNodeMap.set(node, flatNode);\r\n\r\n    return flatNode;\r\n  };\r\n\r\n  /** Whether all the descendants of the node are selected. */\r\n  descendantsAllSelected(node: TodoItemFlatNode): boolean {\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    const descAllSelected =\r\n      descendants.length > 0 &&\r\n      descendants.every(child => {\r\n        return this.checklistSelection.isSelected(child);\r\n      });\r\n    return descAllSelected;\r\n  }\r\n\r\n  /** Whether part of the descendants are selected */\r\n  descendantsPartiallySelected(node: TodoItemFlatNode): boolean {\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    const result = descendants.some(child => this.checklistSelection.isSelected(child));\r\n    return result && !this.descendantsAllSelected(node);\r\n  }\r\n\r\n  /** Toggle the to-do item selection. Select/deselect all the descendants node */\r\n  todoItemSelectionToggle(node: TodoItemFlatNode): void {\r\n    this.checklistSelection.toggle(node);\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    this.checklistSelection.isSelected(node)\r\n      ? this.checklistSelection.select(...descendants)\r\n      : this.checklistSelection.deselect(...descendants);\r\n\r\n    // Force update for the parent\r\n    descendants.forEach(child => this.checklistSelection.isSelected(child));\r\n    this.checkAllParentsSelection(node);\r\n  }\r\n\r\n  /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */\r\n  todoLeafItemSelectionToggle(node: TodoItemFlatNode): void {\r\n    this.checklistSelection.toggle(node);\r\n    this.checkAllParentsSelection(node);\r\n  }\r\n\r\n  /* Checks all the parents when a leaf node is selected/unselected */\r\n  checkAllParentsSelection(node: TodoItemFlatNode): void {\r\n    let parent: TodoItemFlatNode | null = this.getParentNode(node);\r\n    while (parent) {\r\n      this.checkRootNodeSelection(parent);\r\n      parent = this.getParentNode(parent);\r\n    }\r\n  }\r\n\r\n  /** Check root node checked state and change it accordingly */\r\n  checkRootNodeSelection(node: TodoItemFlatNode): void {\r\n    const nodeSelected = this.checklistSelection.isSelected(node);\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    const descAllSelected =\r\n      descendants.length > 0 &&\r\n      descendants.every(child => {\r\n        return this.checklistSelection.isSelected(child);\r\n      });\r\n    if (nodeSelected && !descAllSelected) {\r\n      this.checklistSelection.deselect(node);\r\n    } else if (!nodeSelected && descAllSelected) {\r\n      this.checklistSelection.select(node);\r\n    }\r\n  }\r\n\r\n  /* Get the parent node of a node */\r\n  getParentNode(node: TodoItemFlatNode): TodoItemFlatNode | null {\r\n    const currentLevel = this.getLevel(node);\r\n\r\n    if (currentLevel < 1) {\r\n      return null;\r\n    }\r\n\r\n    const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\r\n\r\n    for (let i = startIndex; i >= 0; i--) {\r\n      const currentNode = this.treeControl.dataNodes[i];\r\n\r\n      if (this.getLevel(currentNode) < currentLevel) {\r\n        return currentNode;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Select the category so we can insert the new item. */\r\n  addNewItem(node: TodoItemFlatNode) {\r\n    const parentNode = this.flatNodeMap.get(node);\r\n    this._database.insertItem(parentNode!, '');\r\n    this.treeControl.expand(node);\r\n  }\r\n\r\n  /** Save the node to database */\r\n  saveNode(node: TodoItemFlatNode, itemValue: string) {\r\n    const nestedNode = this.flatNodeMap.get(node);\r\n    this._database.updateItem(nestedNode!, itemValue);\r\n  }\r\n  guardar() {   \r\n    \r\n    \r\n    \r\n    //opciones.concat(this.treeControl.dataNodes.filter(a=>opciones.includes((a as any).id)).map(x => { return (x as any).parentId }));\r\n    //console.log(opciones);\r\n\r\n    //.filter(a=>!a.isboton).map(x => { return (x as any).id }); // filtra las opciones\r\n    // let opciones : number[] = this.checklistSelection.selected.filter(a=>!a.isboton).map(x => { return (x as any).id }); // filtra las opciones\r\n    //  opciones.concat(this.checklistSelection.selected.filter(a=>a.isboton).map(x => { return (x as any).parentId }));\r\n    // opciones =  opciones.filter((n, i) => opciones.indexOf(n) === i);\r\n    //console.log(opciones);\r\n \r\n    if (this.formulario.invalid) {\r\n      this.formulario.markAllAsTouched();\r\n      return;\r\n    }\r\n    this.dialogo.open(DialogoConfirmacionComponent, { maxWidth: '25vw', maxHeight: 'auto', height: 'auto', width: '25%', disableClose: true,\r\n      data: { titulo: `Registro de Roles`, mensaje: `¿Está seguro que desea grabar?` }\r\n    }).afterClosed()\r\n      .subscribe(async (Ok: Boolean) => {\r\n        if (Ok) {\r\n\r\n          var menuSelect : any[] = this.checklistSelection.selected;\r\n          var botones : any[] =this.checklistSelection.selected.filter(a=>a.isboton).map(x => { return (x as any).id })\r\n          var opciones : number[] = menuSelect.map(x => { return (x as any).parentId });//tomamos todos los parenId, ya que son opciones\r\n          menuSelect.filter(a=>!a.isboton).map(x => { opciones.push((x as any).id)  });//opciones de los botones    \r\n          this.treeControl.dataNodes.filter(a=>opciones.includes((a as any).id)).map(x => { opciones.push((x as any).parentId) }); //lectura de modulos\r\n          opciones=  opciones.filter((item, i, arr) => arr.findIndex((t) => t=== item) === i);\r\n          let request: any = {\r\n            nombre : this.formulario.value.nombre,\r\n            descripcion : this.formulario.value.descripcion,\r\n            listOpciones :  opciones,\r\n            listAcciones : botones\r\n          };          \r\n          this.rolesService.grabarRoles(request).subscribe(data => {\r\n            this.bootstrapNotifyBarService.notifySuccess('Registro realizado correctamente');\r\n            setTimeout(() => {\r\n              this.router.navigate(['/seguridad', 'bandroles']);\r\n            }, 3000)\r\n\r\n          });\r\n\r\n          // this.ser\r\n          // this.requestUsuario.id = this.formulario.value.id;\r\n          // this.requestUsuario.nombre = this.formulario.value.nombre;\r\n          // this.requestUsuario.descripcion = this.formulario.value.descripcion;\r\n          // this.requestUsuario.listOpciones = [1];\r\n          // this.requestUsuario.listAcciones = [1];\r\n          // this.onGuardar.emit(this.requestUsuario);\r\n        }\r\n      });\r\n  }\r\n}","<div class=\"main-content\">\r\n  <div class=\"container-fluid\">\r\n    <div class=\"form-group row\">\r\n      <div class=\"col-md-12\">\r\n        <xng-breadcrumb></xng-breadcrumb>\r\n      </div>\r\n    </div>\r\n    <div class=\"form-group row\">\r\n      <div class=\"col-md-12\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header card-header-rose card-header-icon\">\r\n            <div class=\"card-icon\"><i class=\"material-icons\">mail_outline</i></div>\r\n            <h4 class=\"card-title\">REGISTRAR ROLES</h4>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div class=\"row\">\r\n              <div class=\"col-md-12\">       \r\n                <form autocomplete=\"on\" [formGroup]=\"formulario\" (ngSubmit)=\"guardar()\">\r\n                  <div class=\"row\">\r\n                      <div class=\"col-md-12\">\r\n                          <button mat-raised-button class=\"btn\">\r\n                              Guardar\r\n                          </button>\r\n                          <a class=\"btn btn-info\" mat-raised-button [routerLink]=\"['/seguridad/bandusuario']\">\r\n                              Cancelar\r\n                              <mat-icon>block</mat-icon>\r\n                          </a>\r\n                      </div>\r\n                  </div>\r\n                  <fieldset class=\"form-group border p-3\">        \r\n                      <div class=\"row\">\r\n                          <div class=\"col-md-6\">\r\n                              <mat-form-field appearance=\"outline\">\r\n                                  <mat-label>Nombre</mat-label>\r\n                                  <input matInput formControlName=\"nombre\">\r\n                                  <mat-error *ngIf=\"formulario.controls['nombre'].hasError('required')\">\r\n                                      Este campo es obligatorio\r\n                                  </mat-error>\r\n                              </mat-form-field>\r\n                          </div>\r\n                          <div class=\"col-md-6\">\r\n                              <mat-form-field appearance=\"outline\">\r\n                                  <mat-label>Descripción</mat-label>\r\n                                  <input matInput formControlName=\"descripcion\">\r\n                                  <mat-error *ngIf=\"formulario.controls['descripcion'].hasError('required')\">\r\n                                      Este campo es obligatorio\r\n                                  </mat-error> \r\n                              </mat-form-field>\r\n                          </div> \r\n                      </div>\r\n                  </fieldset>\r\n                </form>\r\n                <fieldset class=\"form-group border p-3\">\r\n                  <legend class=\"w-auto px-2\">OPCIONES Y BOTONES DEL SISTEMA</legend>\r\n                  <div class=\"row\">\r\n                      <div class=\"col-md-12\">                        \r\n                        <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\r\n                          <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodeToggle matTreeNodePadding>\r\n                            <button mat-icon-button disabled></button>\r\n                            <mat-checkbox class=\"checklist-leaf-node\"\r\n                                          [checked]=\"checklistSelection.isSelected(node)\"\r\n                                          (change)=\"todoLeafItemSelectionToggle(node)\">{{node.title}}</mat-checkbox>\r\n                          </mat-tree-node>\r\n                        \r\n                          <mat-tree-node *matTreeNodeDef=\"let node; when: hasNoContent\" matTreeNodePadding>\r\n                            <button mat-icon-button disabled></button>\r\n                            <mat-form-field appearance=\"fill\">\r\n                              <mat-label>New item...</mat-label>\r\n                              <input matInput #itemValue placeholder=\"Ex. Lettuce\">\r\n                            </mat-form-field>\r\n                            <button mat-button (click)=\"saveNode(node, itemValue.value)\">Save</button>\r\n                          </mat-tree-node>\r\n                        \r\n                          <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\r\n                            <button mat-icon-button matTreeNodeToggle\r\n                                    [attr.aria-label]=\"'Toggle ' + node.title\">\r\n                              <mat-icon class=\"mat-icon-rtl-mirror\">\r\n                                {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\r\n                              </mat-icon>\r\n                            </button>\r\n                            <mat-checkbox [checked]=\"descendantsAllSelected(node)\"\r\n                                          [indeterminate]=\"descendantsPartiallySelected(node)\"\r\n                                          (change)=\"todoItemSelectionToggle(node)\">{{node.title}}</mat-checkbox>\r\n                            <button mat-icon-button (click)=\"addNewItem(node)\" ><mat-icon>add</mat-icon></button>\r\n                          </mat-tree-node>\r\n                        </mat-tree>\r\n                      </div>\r\n                  </div>\r\n                </fieldset>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}