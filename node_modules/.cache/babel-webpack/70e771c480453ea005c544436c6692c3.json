{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AbortSignal, abortSignal } from \"./AbortSignal\";\n/**\n * This error is thrown when an asynchronous operation has been aborted.\n * Check for this error by testing the `name` that the name property of the\n * error matches `\"AbortError\"`.\n *\n * @example\n * ```ts\n * const controller = new AbortController();\n * controller.abort();\n * try {\n *   doAsyncWork(controller.signal)\n * } catch (e) {\n *   if (e.name === 'AbortError') {\n *     // handle abort error here.\n *   }\n * }\n * ```\n */\n\nexport class AbortError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"AbortError\";\n  }\n\n}\n/**\n * An AbortController provides an AbortSignal and the associated controls to signal\n * that an asynchronous operation should be aborted.\n *\n * @example\n * Abort an operation when another event fires\n * ```ts\n * const controller = new AbortController();\n * const signal = controller.signal;\n * doAsyncWork(signal);\n * button.addEventListener('click', () => controller.abort());\n * ```\n *\n * @example\n * Share aborter cross multiple operations in 30s\n * ```ts\n * // Upload the same data to 2 different data centers at the same time,\n * // abort another when any of them is finished\n * const controller = AbortController.withTimeout(30 * 1000);\n * doAsyncWork(controller.signal).then(controller.abort);\n * doAsyncWork(controller.signal).then(controller.abort);\n *```\n *\n * @example\n * Cascaded aborting\n * ```ts\n * // All operations can't take more than 30 seconds\n * const aborter = Aborter.timeout(30 * 1000);\n *\n * // Following 2 operations can't take more than 25 seconds\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * ```\n */\n\nexport class AbortController {\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  constructor(parentSignals) {\n    this._signal = new AbortSignal();\n\n    if (!parentSignals) {\n      return;\n    } // coerce parentSignals into an array\n\n\n    if (!Array.isArray(parentSignals)) {\n      // eslint-disable-next-line prefer-rest-params\n      parentSignals = arguments;\n    }\n\n    for (const parentSignal of parentSignals) {\n      // if the parent signal has already had abort() called,\n      // then call abort on this signal as well.\n      if (parentSignal.aborted) {\n        this.abort();\n      } else {\n        // when the parent signal aborts, this signal should as well.\n        parentSignal.addEventListener(\"abort\", () => {\n          this.abort();\n        });\n      }\n    }\n  }\n  /**\n   * The AbortSignal associated with this controller that will signal aborted\n   * when the abort method is called on this controller.\n   *\n   * @readonly\n   */\n\n\n  get signal() {\n    return this._signal;\n  }\n  /**\n   * Signal that any operations passed this controller's associated abort signal\n   * to cancel any remaining work and throw an `AbortError`.\n   */\n\n\n  abort() {\n    abortSignal(this._signal);\n  }\n  /**\n   * Creates a new AbortSignal instance that will abort after the provided ms.\n   * @param ms - Elapsed time in milliseconds to trigger an abort.\n   */\n\n\n  static timeout(ms) {\n    const signal = new AbortSignal();\n    const timer = setTimeout(abortSignal, ms, signal); // Prevent the active Timer from keeping the Node.js event loop active.\n\n    if (typeof timer.unref === \"function\") {\n      timer.unref();\n    }\n\n    return signal;\n  }\n\n} //# sourceMappingURL=AbortController.js.map","map":{"version":3,"sources":["C:/Users/Equipo/source/Tgsc-Proyectos/youManager-web/node_modules/@azure/abort-controller/dist-esm/src/AbortController.js"],"names":["AbortSignal","abortSignal","AbortError","Error","constructor","message","name","AbortController","parentSignals","_signal","Array","isArray","arguments","parentSignal","aborted","abort","addEventListener","signal","timeout","ms","timer","setTimeout","unref"],"mappings":"AAAA;AACA;AACA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,eAAzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,UAAN,SAAyBC,KAAzB,CAA+B;AAClCC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,UAAMA,OAAN;AACA,SAAKC,IAAL,GAAY,YAAZ;AACH;;AAJiC;AAMtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,eAAN,CAAsB;AACzB;AACAH,EAAAA,WAAW,CAACI,aAAD,EAAgB;AACvB,SAAKC,OAAL,GAAe,IAAIT,WAAJ,EAAf;;AACA,QAAI,CAACQ,aAAL,EAAoB;AAChB;AACH,KAJsB,CAKvB;;;AACA,QAAI,CAACE,KAAK,CAACC,OAAN,CAAcH,aAAd,CAAL,EAAmC;AAC/B;AACAA,MAAAA,aAAa,GAAGI,SAAhB;AACH;;AACD,SAAK,MAAMC,YAAX,IAA2BL,aAA3B,EAA0C;AACtC;AACA;AACA,UAAIK,YAAY,CAACC,OAAjB,EAA0B;AACtB,aAAKC,KAAL;AACH,OAFD,MAGK;AACD;AACAF,QAAAA,YAAY,CAACG,gBAAb,CAA8B,OAA9B,EAAuC,MAAM;AACzC,eAAKD,KAAL;AACH,SAFD;AAGH;AACJ;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACc,MAANE,MAAM,GAAG;AACT,WAAO,KAAKR,OAAZ;AACH;AACD;AACJ;AACA;AACA;;;AACIM,EAAAA,KAAK,GAAG;AACJd,IAAAA,WAAW,CAAC,KAAKQ,OAAN,CAAX;AACH;AACD;AACJ;AACA;AACA;;;AACkB,SAAPS,OAAO,CAACC,EAAD,EAAK;AACf,UAAMF,MAAM,GAAG,IAAIjB,WAAJ,EAAf;AACA,UAAMoB,KAAK,GAAGC,UAAU,CAACpB,WAAD,EAAckB,EAAd,EAAkBF,MAAlB,CAAxB,CAFe,CAGf;;AACA,QAAI,OAAOG,KAAK,CAACE,KAAb,KAAuB,UAA3B,EAAuC;AACnCF,MAAAA,KAAK,CAACE,KAAN;AACH;;AACD,WAAOL,MAAP;AACH;;AAtDwB,C,CAwD7B","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AbortSignal, abortSignal } from \"./AbortSignal\";\n/**\n * This error is thrown when an asynchronous operation has been aborted.\n * Check for this error by testing the `name` that the name property of the\n * error matches `\"AbortError\"`.\n *\n * @example\n * ```ts\n * const controller = new AbortController();\n * controller.abort();\n * try {\n *   doAsyncWork(controller.signal)\n * } catch (e) {\n *   if (e.name === 'AbortError') {\n *     // handle abort error here.\n *   }\n * }\n * ```\n */\nexport class AbortError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"AbortError\";\n    }\n}\n/**\n * An AbortController provides an AbortSignal and the associated controls to signal\n * that an asynchronous operation should be aborted.\n *\n * @example\n * Abort an operation when another event fires\n * ```ts\n * const controller = new AbortController();\n * const signal = controller.signal;\n * doAsyncWork(signal);\n * button.addEventListener('click', () => controller.abort());\n * ```\n *\n * @example\n * Share aborter cross multiple operations in 30s\n * ```ts\n * // Upload the same data to 2 different data centers at the same time,\n * // abort another when any of them is finished\n * const controller = AbortController.withTimeout(30 * 1000);\n * doAsyncWork(controller.signal).then(controller.abort);\n * doAsyncWork(controller.signal).then(controller.abort);\n *```\n *\n * @example\n * Cascaded aborting\n * ```ts\n * // All operations can't take more than 30 seconds\n * const aborter = Aborter.timeout(30 * 1000);\n *\n * // Following 2 operations can't take more than 25 seconds\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * ```\n */\nexport class AbortController {\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    constructor(parentSignals) {\n        this._signal = new AbortSignal();\n        if (!parentSignals) {\n            return;\n        }\n        // coerce parentSignals into an array\n        if (!Array.isArray(parentSignals)) {\n            // eslint-disable-next-line prefer-rest-params\n            parentSignals = arguments;\n        }\n        for (const parentSignal of parentSignals) {\n            // if the parent signal has already had abort() called,\n            // then call abort on this signal as well.\n            if (parentSignal.aborted) {\n                this.abort();\n            }\n            else {\n                // when the parent signal aborts, this signal should as well.\n                parentSignal.addEventListener(\"abort\", () => {\n                    this.abort();\n                });\n            }\n        }\n    }\n    /**\n     * The AbortSignal associated with this controller that will signal aborted\n     * when the abort method is called on this controller.\n     *\n     * @readonly\n     */\n    get signal() {\n        return this._signal;\n    }\n    /**\n     * Signal that any operations passed this controller's associated abort signal\n     * to cancel any remaining work and throw an `AbortError`.\n     */\n    abort() {\n        abortSignal(this._signal);\n    }\n    /**\n     * Creates a new AbortSignal instance that will abort after the provided ms.\n     * @param ms - Elapsed time in milliseconds to trigger an abort.\n     */\n    static timeout(ms) {\n        const signal = new AbortSignal();\n        const timer = setTimeout(abortSignal, ms, signal);\n        // Prevent the active Timer from keeping the Node.js event loop active.\n        if (typeof timer.unref === \"function\") {\n            timer.unref();\n        }\n        return signal;\n    }\n}\n//# sourceMappingURL=AbortController.js.map"]},"metadata":{},"sourceType":"module"}