{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Equipo/source/Tgsc-Proyectos/youManager-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { EventEmitter } from '@angular/core';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';\nimport { BehaviorSubject } from 'rxjs';\nimport { DialogoConfirmacionComponent } from '@shared/components/dialogo-confirmacion/dialogo-confirmacion.component';\nimport { ModuloDelSistemaComponent } from '../modulo-del-sistema/modulo-del-sistema.component';\nimport { moveItemInArray } from '@angular/cdk/drag-drop';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@modules/seguridad/services/opcion.service\";\nimport * as i2 from \"@modules/seguridad/services/aplicacion.service\";\nimport * as i3 from \"@angular/material/dialog\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@shared/services/bootstrap-notify.service\";\nimport * as i6 from \"@modules/contra/services/StepTabService\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/select\";\nimport * as i9 from \"@angular/common\";\nimport * as i10 from \"@angular/material/tabs\";\nimport * as i11 from \"@angular/material/tree\";\nimport * as i12 from \"@angular/material/button\";\nimport * as i13 from \"@angular/material/icon\";\nimport * as i14 from \"@angular/cdk/drag-drop\";\nimport * as i15 from \"@angular/material/core\";\nimport * as i16 from \"@angular/material/checkbox\";\nimport * as i17 from \"@angular/material/input\";\n\nfunction FormOpcionComponent_mat_option_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 21);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ver_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", ver_r5.Version);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ver_r5.Nombre, \" \");\n  }\n}\n\nfunction FormOpcionComponent_mat_tree_node_16_button_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 26);\n    i0.ɵɵlistener(\"click\", function FormOpcionComponent_mat_tree_node_16_button_4_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const node_r6 = i0.ɵɵnextContext().$implicit;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.addNewOption(node_r6);\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"note_add\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction FormOpcionComponent_mat_tree_node_16_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 22);\n    i0.ɵɵelement(1, \"button\", 23);\n    i0.ɵɵelementStart(2, \"mat-checkbox\", 24);\n    i0.ɵɵlistener(\"change\", function FormOpcionComponent_mat_tree_node_16_Template_mat_checkbox_change_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const node_r6 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.todoLeafItemSelectionToggle(node_r6);\n    });\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, FormOpcionComponent_mat_tree_node_16_button_4_Template, 3, 0, \"button\", 25);\n    i0.ɵɵelementStart(5, \"button\", 26);\n    i0.ɵɵlistener(\"click\", function FormOpcionComponent_mat_tree_node_16_Template_button_click_5_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const node_r6 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.addNewOption(node_r6);\n    });\n    i0.ɵɵelementStart(6, \"mat-icon\");\n    i0.ɵɵtext(7, \"add\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const node_r6 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"checked\", ctx_r1.checklistSelection.isSelected(node_r6));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(node_r6.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !node_r6.isboton);\n  }\n}\n\nfunction FormOpcionComponent_mat_tree_node_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 27);\n    i0.ɵɵelement(1, \"button\", 23);\n    i0.ɵɵelementStart(2, \"div\", 1);\n    i0.ɵɵelementStart(3, \"div\", 17);\n    i0.ɵɵelementStart(4, \"mat-form-field\", 3);\n    i0.ɵɵelementStart(5, \"mat-label\");\n    i0.ɵɵtext(6, \"Nombre\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(7, \"input\", 28, 29);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 10);\n    i0.ɵɵelementStart(10, \"mat-form-field\", 3);\n    i0.ɵɵelementStart(11, \"mat-label\");\n    i0.ɵɵtext(12, \"Ruta\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(13, \"input\", 28, 30);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"div\", 17);\n    i0.ɵɵelementStart(16, \"mat-form-field\", 3);\n    i0.ɵɵelementStart(17, \"mat-label\");\n    i0.ɵɵtext(18, \"Version\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(19, \"input\", 28, 29);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"div\", 31);\n    i0.ɵɵelementStart(22, \"button\", 32);\n    i0.ɵɵlistener(\"click\", function FormOpcionComponent_mat_tree_node_17_Template_button_click_22_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r19);\n      const node_r14 = restoredCtx.$implicit;\n\n      const _r15 = i0.ɵɵreference(8);\n\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.saveNode(node_r14, _r15.value);\n    });\n    i0.ɵɵtext(23, \"Grabar\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction FormOpcionComponent_mat_tree_node_18_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 26);\n    i0.ɵɵlistener(\"click\", function FormOpcionComponent_mat_tree_node_18_button_6_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r24);\n      const node_r20 = i0.ɵɵnextContext().$implicit;\n      const ctx_r22 = i0.ɵɵnextContext();\n      return ctx_r22.addNewOption(node_r20);\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"note_add\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction FormOpcionComponent_mat_tree_node_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r26 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 27);\n    i0.ɵɵelementStart(1, \"button\", 33);\n    i0.ɵɵelementStart(2, \"mat-icon\", 34);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"mat-checkbox\", 35);\n    i0.ɵɵlistener(\"change\", function FormOpcionComponent_mat_tree_node_18_Template_mat_checkbox_change_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r26);\n      const node_r20 = restoredCtx.$implicit;\n      const ctx_r25 = i0.ɵɵnextContext();\n      return ctx_r25.todoItemSelectionToggle(node_r20);\n    });\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, FormOpcionComponent_mat_tree_node_18_button_6_Template, 3, 0, \"button\", 25);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const node_r20 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"aria-label\", \"Toggle \" + node_r20.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.treeControl.isExpanded(node_r20) ? \"expand_more\" : \"chevron_right\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"checked\", ctx_r3.descendantsAllSelected(node_r20))(\"indeterminate\", ctx_r3.descendantsPartiallySelected(node_r20));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(node_r20.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !node_r20.isboton);\n  }\n}\n\nfunction FormOpcionComponent_div_39_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 38);\n  }\n}\n\nfunction FormOpcionComponent_div_39_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 36);\n    i0.ɵɵtemplate(1, FormOpcionComponent_div_39_div_1_Template, 1, 0, \"div\", 37);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const obj_r27 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", obj_r27.Nombre, \" \");\n  }\n}\n/**\r\n * Node for to-do item\r\n */\n\n\nexport class TodoItemNode {}\n/** Flat to-do item node with expandable and level information */\n\nexport class TodoItemFlatNode {}\n/**\r\n * Checklist database, it can build a tree structured Json object.\r\n * Each node in Json object represents a to-do item or a category.\r\n * If a node is a category, it has children ite|s and new items can be added under the category.\r\n */\n\nexport class ChecklistDatabase {\n  constructor(opcionService, aplicacionService) {\n    this.opcionService = opcionService;\n    this.aplicacionService = aplicacionService;\n    this.dataChange = new BehaviorSubject([]);\n    this.initialize();\n  }\n\n  get data() {\n    return this.dataChange.value;\n  }\n\n  initialize() {}\n\n  listarOpciones(idAplicacion, version) {\n    this.opcionService.listarOpcionesxAppVersion(idAplicacion, version).then(data => {\n      this.dataChange.next(data);\n    });\n  }\n  /** Add an item to to-do list */\n\n\n  insertItem(parent, name) {\n    //  if (parent.children) {\n    parent.children.push({\n      title: name\n    });\n    this.dataChange.next(this.data); //  }\n  }\n\n  updateItem(node, name) {\n    node.title = name;\n    this.dataChange.next(this.data);\n  }\n\n}\n\nChecklistDatabase.ɵfac = function ChecklistDatabase_Factory(t) {\n  return new (t || ChecklistDatabase)(i0.ɵɵinject(i1.OpcionService), i0.ɵɵinject(i2.AplicacionService));\n};\n\nChecklistDatabase.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ChecklistDatabase,\n  factory: ChecklistDatabase.ɵfac\n});\nexport class FormOpcionComponent {\n  constructor(_database, dialogo, fb, aplicacionService, dialog, notificador, stepService, objService) {\n    this._database = _database;\n    this.dialogo = dialogo;\n    this.fb = fb;\n    this.aplicacionService = aplicacionService;\n    this.dialog = dialog;\n    this.notificador = notificador;\n    this.stepService = stepService;\n    this.objService = objService;\n    this.onGuardar = new EventEmitter();\n    /** Map from flat node to nested node. This helps us finding the nested node to be modified */\n\n    this.flatNodeMap = new Map();\n    /** Map from nested node to flattened node. This helps us to keep the same object for selection */\n\n    this.nestedNodeMap = new Map();\n    /** A selected parent node to be inserted */\n\n    this.selectedParent = null;\n    /** The new item's name */\n\n    this.newItemName = '';\n    /** The selection for checklist */\n\n    this.checklistSelection = new SelectionModel(true\n    /* multiple */\n    );\n\n    this.getLevel = node => node.level;\n\n    this.isExpandable = node => node.expandable;\n\n    this.getChildren = node => node.children;\n\n    this.hasChild = (_, _nodeData) => _nodeData.expandable;\n\n    this.hasNoContent = (_, _nodeData) => _nodeData.title === '';\n\n    this.transformer = (node, level) => {\n      const existingNode = this.nestedNodeMap.get(node);\n      const flatNode = existingNode && existingNode.title === node.title ? existingNode : new TodoItemFlatNode();\n      flatNode.title = node.title;\n      flatNode.level = level;\n      flatNode.expandable = true; // !!node.children?.length;\n\n      flatNode.id = node.id;\n      flatNode.isboton = node.isboton;\n      flatNode.parentId = node.parentId;\n      flatNode.isSelected = node.isSelected;\n      this.flatNodeMap.set(flatNode, node);\n      this.nestedNodeMap.set(node, flatNode);\n      return flatNode;\n    };\n\n    this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n    this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable);\n    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n    _database.dataChange.subscribe(data => {\n      this.dataSource.data = data;\n    });\n  }\n\n  drop(event) {\n    moveItemInArray(this.opcionOrder, event.previousIndex, event.currentIndex);\n  }\n\n  changeTab(index) {\n    // if(index==0)\n    //   this._database.listarOpciones(this.objRegistro,this.versionDefault);\n    // else\n    if (index == 1) {\n      var menuSelect = this.checklistSelection.selected;\n      console.log(menuSelect);\n      if (menuSelect.length == 0) this.listarOrdenamiento();else if (menuSelect.length == 1) this.listarOrdenamiento(menuSelect[0].id);else this.notificador.notifyDanger(\"Debe seleccionar solo 1  opción para ver sus subOpciones\");\n    }\n  }\n\n  guardarOrdenamiento() {\n    let req = [];\n    let ordenamiento = 0;\n    this.opcionOrder.map(x => {\n      req.push({\n        Id: x.Id,\n        Orden: ordenamiento++\n      });\n    });\n    this.objService.actualizarOrden(req).subscribe(data => {\n      if (data.tipoResultado == 1) {\n        this.notificador.notifySuccess(data.mensaje);\n      } else {\n        this.notificador.notifyWarning(data.mensaje);\n      }\n    });\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.aplicacionService.listarVersiones(_this.objRegistro).then(data => {\n        _this.versionDefault = data[0].Version;\n        _this.versiones = data;\n\n        _this._database.listarOpciones(_this.objRegistro, _this.versionDefault);\n      });\n    })();\n  }\n\n  onVersionChange(tr) {\n    this.versionDefault = this.objRegistro, tr.value;\n\n    this._database.listarOpciones(this.objRegistro, this.versionDefault);\n\n    this.listarOrdenamiento();\n  }\n  /** Whether all the descendants of the node are selected. */\n\n\n  descendantsAllSelected(node) {\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected = descendants.length > 0 && descendants.every(child => {\n      return this.checklistSelection.isSelected(child);\n    });\n    return descAllSelected;\n  } // /** Whether part of the descendants are selected */\n\n\n  descendantsPartiallySelected(node) {\n    const descendants = this.treeControl.getDescendants(node);\n    const result = descendants.some(child => this.checklistSelection.isSelected(child));\n    return result && !this.descendantsAllSelected(node);\n  }\n  /** Toggle the to-do item selection. Select/deselect all the descendants node */\n\n\n  todoItemSelectionToggle(node) {\n    this.checklistSelection.toggle(node); // const descendants = this.treeControl.getDescendants(node);\n    // console.log(descendants);\n    // this.checklistSelection.isSelected(node)\n    //   ? this.checklistSelection.select(...descendants)\n    //   : this.checklistSelection.deselect(...descendants);\n    // Force update for the parent\n    // descendants.forEach(child => this.checklistSelection.isSelected(child));\n\n    this.checkAllParentsSelection(node);\n  }\n  /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */\n\n\n  todoLeafItemSelectionToggle(node) {\n    this.checklistSelection.toggle(node);\n    this.checkAllParentsSelection(node);\n  }\n  /* Checks all the parents when a leaf node is selected/unselected */\n\n\n  checkAllParentsSelection(node) {\n    let parent = this.getParentNode(node);\n\n    while (parent) {\n      this.checkRootNodeSelection(parent);\n      parent = this.getParentNode(parent);\n    }\n  }\n  /** Check root node checked state and change it accordingly */\n\n\n  checkRootNodeSelection(node) {\n    const nodeSelected = this.checklistSelection.isSelected(node);\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected = descendants.length > 0 && descendants.every(child => {\n      return this.checklistSelection.isSelected(child);\n    });\n\n    if (nodeSelected && !descAllSelected) {\n      this.checklistSelection.deselect(node);\n    } else if (!nodeSelected && descAllSelected) {\n      this.checklistSelection.select(node);\n    }\n  }\n  /* Get the parent node of a node */\n\n\n  getParentNode(node) {\n    const currentLevel = this.getLevel(node);\n\n    if (currentLevel < 1) {\n      return null;\n    }\n\n    const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n\n    for (let i = startIndex; i >= 0; i--) {\n      const currentNode = this.treeControl.dataNodes[i];\n\n      if (this.getLevel(currentNode) < currentLevel) {\n        return currentNode;\n      }\n    }\n\n    return null;\n  }\n  /** Select the category so we can insert the new item. */\n\n\n  addNewOption(node) {\n    const parentNode = this.flatNodeMap.get(node);\n\n    this._database.insertItem(parentNode, '');\n\n    this.treeControl.expand(node);\n  }\n\n  addNewAction(node) {\n    const parentNode = this.flatNodeMap.get(node);\n\n    this._database.insertItem(parentNode, '');\n\n    console.log(node);\n    this.treeControl.expand(node);\n  }\n  /** Save the node to database */\n\n\n  saveNode(node, itemValue) {\n    const nestedNode = this.flatNodeMap.get(node);\n\n    this._database.updateItem(nestedNode, itemValue);\n  }\n\n  crearOpcion() {\n    var _this2 = this;\n\n    var menuSelect = this.checklistSelection.selected;\n    let mensaje = \"\";\n    let _idPadre = null;\n    let _stPadre = null;\n    if (menuSelect.length == 0) mensaje = \"Está seguro de no asociar la nueva opción a una opción padre?\";else if (menuSelect.length == 1) {\n      _idPadre = menuSelect[0].id;\n      _stPadre = menuSelect[0].title;\n      mensaje = \"Está seguro asociar la nueva opción a \" + _stPadre + \"?\";\n    }\n\n    if (mensaje != \"\") {\n      this.dialogo.open(DialogoConfirmacionComponent, {\n        maxWidth: '25vw',\n        maxHeight: 'auto',\n        height: 'auto',\n        width: '25%',\n        disableClose: true,\n        data: {\n          titulo: `Registro de Opciones`,\n          mensaje: mensaje\n        }\n      }).afterClosed().subscribe( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (Ok) {\n          if (Ok) {\n            _this2.dialog.open(ModuloDelSistemaComponent, {\n              maxWidth: '50vw',\n              maxHeight: '50vw',\n              height: 'auto',\n              width: '80%',\n              disableClose: false,\n              data: {\n                version: _this2.versionDefault,\n                idPadre: _idPadre,\n                stPadre: _stPadre,\n                id: null\n              }\n            });\n          }\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    } else this.notificador.notifyDanger(\"Debe seleccionar solo 1  opción\");\n  }\n\n  EditarModulo() {\n    var menuSelect = this.checklistSelection.selected;\n\n    if (menuSelect.length == 1) {\n      this.dialog.open(ModuloDelSistemaComponent, {\n        maxWidth: '50vw',\n        maxHeight: '50vw',\n        height: 'auto',\n        width: '80%',\n        disableClose: false,\n        data: {\n          version: this.versionDefault,\n          id: menuSelect[0].id\n        }\n      });\n    } else {\n      this.notificador.notifyDanger(\"Debe seleccionar 1  opción\");\n    }\n  }\n\n  listarOrdenamiento(idPadre = 0) {\n    if (idPadre == 0) {\n      this.objService.listarModulos(parseInt(localStorage.getItem(\"App\")), this.versionDefault).subscribe(data => {\n        this.opcionOrder = data;\n      });\n    } else {\n      this.objService.listarxIdPadre(idPadre).subscribe(data => {\n        this.opcionOrder = data;\n      });\n    }\n  }\n\n}\n\nFormOpcionComponent.ɵfac = function FormOpcionComponent_Factory(t) {\n  return new (t || FormOpcionComponent)(i0.ɵɵdirectiveInject(ChecklistDatabase), i0.ɵɵdirectiveInject(i3.MatDialog), i0.ɵɵdirectiveInject(i4.FormBuilder), i0.ɵɵdirectiveInject(i2.AplicacionService), i0.ɵɵdirectiveInject(i3.MatDialog), i0.ɵɵdirectiveInject(i5.BootstrapNotifyBarService), i0.ɵɵdirectiveInject(i6.StepTabService), i0.ɵɵdirectiveInject(i1.OpcionService));\n};\n\nFormOpcionComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FormOpcionComponent,\n  selectors: [[\"app-form-opcion-page\"]],\n  inputs: {\n    objRegistro: \"objRegistro\"\n  },\n  outputs: {\n    onGuardar: \"onGuardar\"\n  },\n  features: [i0.ɵɵProvidersFeature([ChecklistDatabase])],\n  decls: 40,\n  vars: 8,\n  consts: [[\"autocomplete\", \"on\"], [1, \"row\"], [1, \"col-md-3\"], [\"appearance\", \"fill\"], [3, \"value\", \"valueChange\", \"selectionChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-md-12\"], [\"mat-align-tabs\", \"start\", 3, \"selectedIndex\", \"selectedIndexChange\"], [\"label\", \"Opciones\"], [1, \"contrainer-fluid\"], [1, \"col-md-4\"], [3, \"dataSource\", \"treeControl\"], [\"matTreeNodeToggle\", \"\", \"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\", \"matTreeNodeDefWhen\"], [1, \"col-md-8\"], [\"mat-raised-button\", \"\", 1, \"btn\", 3, \"click\"], [\"label\", \"Ordenamiento\"], [1, \"col-md-2\"], [1, \"col-md-5\"], [\"cdkDropList\", \"\", 1, \"example-list\", 3, \"cdkDropListDropped\"], [\"class\", \"example-box\", \"cdkDrag\", \"\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"], [\"matTreeNodeToggle\", \"\", \"matTreeNodePadding\", \"\"], [\"mat-icon-button\", \"\", \"disabled\", \"\"], [1, \"checklist-leaf-node\", 3, \"checked\", \"change\"], [\"mat-icon-button\", \"\", 3, \"click\", 4, \"ngIf\"], [\"mat-icon-button\", \"\", 3, \"click\"], [\"matTreeNodePadding\", \"\"], [\"matInput\", \"\", \"placeholder\", \"Ex. Lettuce\"], [\"NombreNvo\", \"\"], [\"DescripcionNvo\", \"\"], [1, \"col-md-1\"], [\"mat-button\", \"\", 3, \"click\"], [\"mat-icon-button\", \"\", \"matTreeNodeToggle\", \"\"], [1, \"mat-icon-rtl-mirror\"], [3, \"checked\", \"indeterminate\", \"change\"], [\"cdkDrag\", \"\", 1, \"example-box\"], [\"class\", \"example-custom-placeholder\", 4, \"cdkDragPlaceholder\"], [1, \"example-custom-placeholder\"]],\n  template: function FormOpcionComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelementStart(2, \"div\", 2);\n      i0.ɵɵelementStart(3, \"mat-form-field\", 3);\n      i0.ɵɵelementStart(4, \"mat-label\");\n      i0.ɵɵtext(5, \"Version app\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"mat-select\", 4);\n      i0.ɵɵlistener(\"valueChange\", function FormOpcionComponent_Template_mat_select_valueChange_6_listener($event) {\n        return ctx.versionDefault = $event;\n      })(\"selectionChange\", function FormOpcionComponent_Template_mat_select_selectionChange_6_listener($event) {\n        return ctx.onVersionChange($event);\n      });\n      i0.ɵɵtemplate(7, FormOpcionComponent_mat_option_7_Template, 2, 2, \"mat-option\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\", 1);\n      i0.ɵɵelementStart(9, \"div\", 6);\n      i0.ɵɵelementStart(10, \"mat-tab-group\", 7);\n      i0.ɵɵlistener(\"selectedIndexChange\", function FormOpcionComponent_Template_mat_tab_group_selectedIndexChange_10_listener($event) {\n        return ctx.stepService.StepTab = $event;\n      })(\"selectedIndexChange\", function FormOpcionComponent_Template_mat_tab_group_selectedIndexChange_10_listener($event) {\n        return ctx.changeTab($event);\n      });\n      i0.ɵɵelementStart(11, \"mat-tab\", 8);\n      i0.ɵɵelementStart(12, \"div\", 9);\n      i0.ɵɵelementStart(13, \"div\", 1);\n      i0.ɵɵelementStart(14, \"div\", 10);\n      i0.ɵɵelementStart(15, \"mat-tree\", 11);\n      i0.ɵɵtemplate(16, FormOpcionComponent_mat_tree_node_16_Template, 8, 3, \"mat-tree-node\", 12);\n      i0.ɵɵtemplate(17, FormOpcionComponent_mat_tree_node_17_Template, 24, 0, \"mat-tree-node\", 13);\n      i0.ɵɵtemplate(18, FormOpcionComponent_mat_tree_node_18_Template, 7, 6, \"mat-tree-node\", 13);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"div\", 14);\n      i0.ɵɵelementStart(20, \"button\", 15);\n      i0.ɵɵlistener(\"click\", function FormOpcionComponent_Template_button_click_20_listener() {\n        return ctx.crearOpcion();\n      });\n      i0.ɵɵtext(21, \"Crear m\\u00F3dulo o opci\\u00F3n\");\n      i0.ɵɵelementStart(22, \"mat-icon\");\n      i0.ɵɵtext(23, \"create_new_folder\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"button\", 15);\n      i0.ɵɵlistener(\"click\", function FormOpcionComponent_Template_button_click_24_listener() {\n        return ctx.EditarModulo();\n      });\n      i0.ɵɵtext(25, \"Editar m\\u00F3dulo o opci\\u00F3n\");\n      i0.ɵɵelementStart(26, \"mat-icon\");\n      i0.ɵɵtext(27, \"edit\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(28, \"mat-tab\", 16);\n      i0.ɵɵelementStart(29, \"div\", 9);\n      i0.ɵɵelementStart(30, \"div\", 1);\n      i0.ɵɵelement(31, \"div\", 2);\n      i0.ɵɵelementStart(32, \"div\", 17);\n      i0.ɵɵelementStart(33, \"button\", 15);\n      i0.ɵɵlistener(\"click\", function FormOpcionComponent_Template_button_click_33_listener() {\n        return ctx.guardarOrdenamiento();\n      });\n      i0.ɵɵtext(34, \"Guardar\");\n      i0.ɵɵelementStart(35, \"mat-icon\");\n      i0.ɵɵtext(36, \"save\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(37, \"div\", 18);\n      i0.ɵɵelementStart(38, \"div\", 19);\n      i0.ɵɵlistener(\"cdkDropListDropped\", function FormOpcionComponent_Template_div_cdkDropListDropped_38_listener($event) {\n        return ctx.drop($event);\n      });\n      i0.ɵɵtemplate(39, FormOpcionComponent_div_39_Template, 3, 1, \"div\", 20);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"value\", ctx.versionDefault);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.versiones);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"selectedIndex\", ctx.stepService.StepTab);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasNoContent);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasChild);\n      i0.ɵɵadvance(21);\n      i0.ɵɵproperty(\"ngForOf\", ctx.opcionOrder);\n    }\n  },\n  directives: [i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.NgForm, i7.MatFormField, i7.MatLabel, i8.MatSelect, i9.NgForOf, i10.MatTabGroup, i10.MatTab, i11.MatTree, i11.MatTreeNodeDef, i12.MatButton, i13.MatIcon, i14.CdkDropList, i15.MatOption, i11.MatTreeNode, i11.MatTreeNodeToggle, i11.MatTreeNodePadding, i16.MatCheckbox, i9.NgIf, i17.MatInput, i14.CdkDrag, i14.CdkDragPlaceholder],\n  styles: [\".mat-mdc-form-field[_ngcontent-%COMP%] {\\r\\n    margin-right: 4px;\\r\\n  }\\r\\n  .example-list[_ngcontent-%COMP%] {\\r\\n    width: 500px;\\r\\n    max-width: 100%;\\r\\n    border: solid 1px #ccc;\\r\\n    min-height: 60px;\\r\\n    display: block;\\r\\n    background: white;\\r\\n    border-radius: 4px;\\r\\n    overflow: hidden;\\r\\n  }\\r\\n  .example-box[_ngcontent-%COMP%] {\\r\\n    padding: 20px 10px;\\r\\n    border-bottom: solid 1px #ccc;\\r\\n    color: rgba(0, 0, 0, 0.87);\\r\\n    display: flex;\\r\\n    flex-direction: row;\\r\\n    align-items: center;\\r\\n    justify-content: space-between;\\r\\n    box-sizing: border-box;\\r\\n    cursor: move;\\r\\n    background: white;\\r\\n    font-size: 14px;\\r\\n  }\\r\\n  .cdk-drag-preview[_ngcontent-%COMP%] {\\r\\n    box-sizing: border-box;\\r\\n    border-radius: 4px;\\r\\n    box-shadow: 0 5px 5px -3px rgba(0, 0, 0, 0.2),\\r\\n                0 8px 10px 1px rgba(0, 0, 0, 0.14),\\r\\n                0 3px 14px 2px rgba(0, 0, 0, 0.12);\\r\\n  }\\r\\n  .cdk-drag-animating[_ngcontent-%COMP%] {\\r\\n    transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\\r\\n  }\\r\\n  .example-box[_ngcontent-%COMP%]:last-child {\\r\\n    border: none;\\r\\n  }\\r\\n  .example-list.cdk-drop-list-dragging[_ngcontent-%COMP%]   .example-box[_ngcontent-%COMP%]:not(.cdk-drag-placeholder) {\\r\\n    transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\\r\\n  }\\r\\n  .example-custom-placeholder[_ngcontent-%COMP%] {\\r\\n    background: #ccc;\\r\\n    border: dotted 3px #999;\\r\\n    min-height: 60px;\\r\\n    transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\\r\\n  }\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvcm0tb3BjaW9uLXBhZ2UuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGlCQUFpQjtFQUNuQjtFQUNBO0lBQ0UsWUFBWTtJQUNaLGVBQWU7SUFDZixzQkFBc0I7SUFDdEIsZ0JBQWdCO0lBQ2hCLGNBQWM7SUFDZCxpQkFBaUI7SUFDakIsa0JBQWtCO0lBQ2xCLGdCQUFnQjtFQUNsQjtFQUVBO0lBQ0Usa0JBQWtCO0lBQ2xCLDZCQUE2QjtJQUM3QiwwQkFBMEI7SUFDMUIsYUFBYTtJQUNiLG1CQUFtQjtJQUNuQixtQkFBbUI7SUFDbkIsOEJBQThCO0lBQzlCLHNCQUFzQjtJQUN0QixZQUFZO0lBQ1osaUJBQWlCO0lBQ2pCLGVBQWU7RUFDakI7RUFFQTtJQUNFLHNCQUFzQjtJQUN0QixrQkFBa0I7SUFDbEI7O2tEQUU4QztFQUNoRDtFQUVBO0lBQ0Usc0RBQXNEO0VBQ3hEO0VBRUE7SUFDRSxZQUFZO0VBQ2Q7RUFFQTtJQUNFLHNEQUFzRDtFQUN4RDtFQUVBO0lBQ0UsZ0JBQWdCO0lBQ2hCLHVCQUF1QjtJQUN2QixnQkFBZ0I7SUFDaEIsc0RBQXNEO0VBQ3hEIiwiZmlsZSI6ImZvcm0tb3BjaW9uLXBhZ2UuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5tYXQtbWRjLWZvcm0tZmllbGQge1xyXG4gICAgbWFyZ2luLXJpZ2h0OiA0cHg7XHJcbiAgfVxyXG4gIC5leGFtcGxlLWxpc3Qge1xyXG4gICAgd2lkdGg6IDUwMHB4O1xyXG4gICAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gICAgYm9yZGVyOiBzb2xpZCAxcHggI2NjYztcclxuICAgIG1pbi1oZWlnaHQ6IDYwcHg7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIGJhY2tncm91bmQ6IHdoaXRlO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICB9XHJcbiAgXHJcbiAgLmV4YW1wbGUtYm94IHtcclxuICAgIHBhZGRpbmc6IDIwcHggMTBweDtcclxuICAgIGJvcmRlci1ib3R0b206IHNvbGlkIDFweCAjY2NjO1xyXG4gICAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC44Nyk7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG4gICAgY3Vyc29yOiBtb3ZlO1xyXG4gICAgYmFja2dyb3VuZDogd2hpdGU7XHJcbiAgICBmb250LXNpemU6IDE0cHg7XHJcbiAgfVxyXG4gIFxyXG4gIC5jZGstZHJhZy1wcmV2aWV3IHtcclxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XHJcbiAgICBib3gtc2hhZG93OiAwIDVweCA1cHggLTNweCByZ2JhKDAsIDAsIDAsIDAuMiksXHJcbiAgICAgICAgICAgICAgICAwIDhweCAxMHB4IDFweCByZ2JhKDAsIDAsIDAsIDAuMTQpLFxyXG4gICAgICAgICAgICAgICAgMCAzcHggMTRweCAycHggcmdiYSgwLCAwLCAwLCAwLjEyKTtcclxuICB9XHJcbiAgXHJcbiAgLmNkay1kcmFnLWFuaW1hdGluZyB7XHJcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMjUwbXMgY3ViaWMtYmV6aWVyKDAsIDAsIDAuMiwgMSk7XHJcbiAgfVxyXG4gIFxyXG4gIC5leGFtcGxlLWJveDpsYXN0LWNoaWxkIHtcclxuICAgIGJvcmRlcjogbm9uZTtcclxuICB9XHJcbiAgXHJcbiAgLmV4YW1wbGUtbGlzdC5jZGstZHJvcC1saXN0LWRyYWdnaW5nIC5leGFtcGxlLWJveDpub3QoLmNkay1kcmFnLXBsYWNlaG9sZGVyKSB7XHJcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMjUwbXMgY3ViaWMtYmV6aWVyKDAsIDAsIDAuMiwgMSk7XHJcbiAgfVxyXG4gIFxyXG4gIC5leGFtcGxlLWN1c3RvbS1wbGFjZWhvbGRlciB7XHJcbiAgICBiYWNrZ3JvdW5kOiAjY2NjO1xyXG4gICAgYm9yZGVyOiBkb3R0ZWQgM3B4ICM5OTk7XHJcbiAgICBtaW4taGVpZ2h0OiA2MHB4O1xyXG4gICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDI1MG1zIGN1YmljLWJlemllcigwLCAwLCAwLjIsIDEpO1xyXG4gIH0iXX0= */\"]\n});","map":{"version":3,"sources":["C:\\Users\\Equipo\\source\\Tgsc-Proyectos\\youManager-web\\src\\app\\modules\\seguridad\\pages\\opcion\\form-opcion-page\\form-opcion-page.component.ts","C:\\Users\\Equipo\\source\\Tgsc-Proyectos\\youManager-web\\src\\app\\modules\\seguridad\\pages\\opcion\\form-opcion-page\\form-opcion-page.component.html"],"names":[],"mappings":";AAAA,SAAoB,YAApB,QAAmF,eAAnF;AAOA,SAAQ,cAAR,QAA6B,0BAA7B;AACA,SAAQ,eAAR,QAA8B,mBAA9B;AACA,SAAQ,qBAAR,EAA+B,gBAA/B,QAAsD,wBAAtD;AACA,SAAQ,eAAR,QAA8B,MAA9B;AACA,SAAS,4BAAT,QAA6C,wEAA7C;AAEA,SAAS,yBAAT,QAA0C,oDAA1C;AAEA,SAAqB,eAArB,QAA2C,wBAA3C;;;;;;;;;;;;;;;;;;;;;;ACRU,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,YAAA,EAAA,EAAA;AACE,IAAA,EAAA,CAAA,MAAA,CAAA,CAAA;AACF,IAAA,EAAA,CAAA,YAAA;;;;;AAF0C,IAAA,EAAA,CAAA,UAAA,CAAA,OAAA,EAAA,MAAA,CAAA,OAAA;AACxC,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,kBAAA,CAAA,GAAA,EAAA,MAAA,CAAA,MAAA,EAAA,GAAA;;;;;;;;AAsBgB,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,QAAA,EAAA,EAAA;AAAwB,IAAA,EAAA,CAAA,UAAA,CAAA,OAAA,EAAA,SAAA,8EAAA,GAAA;AAAA,MAAA,EAAA,CAAA,aAAA,CAAA,IAAA;AAAA,YAAA,OAAA,GAAA,EAAA,CAAA,aAAA,GAAA,SAAA;AAAA,YAAA,MAAA,GAAA,EAAA,CAAA,aAAA,EAAA;AAAA,aAAA,MAAA,CAAA,YAAA,CAAA,OAAA,CAAA;AAAA,KAAA;AAAoD,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,UAAA;AAAU,IAAA,EAAA,CAAA,MAAA,CAAA,CAAA,EAAA,UAAA;AAAQ,IAAA,EAAA,CAAA,YAAA;AAAW,IAAA,EAAA,CAAA,YAAA;;;;;;;;AAP3G,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,eAAA,EAAA,EAAA;AACE,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA,EAAA,QAAA,EAAA,EAAA;AAEA,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,cAAA,EAAA,EAAA;AAEc,IAAA,EAAA,CAAA,UAAA,CAAA,QAAA,EAAA,SAAA,4EAAA,GAAA;AAAA,YAAA,WAAA,GAAA,EAAA,CAAA,aAAA,CAAA,IAAA,CAAA;AAAA,YAAA,OAAA,GAAA,WAAA,CAAA,SAAA;AAAA,YAAA,OAAA,GAAA,EAAA,CAAA,aAAA,EAAA;AAAA,aAAA,OAAA,CAAA,2BAAA,CAAA,OAAA,CAAA;AAAA,KAAA;AAA6C,IAAA,EAAA,CAAA,MAAA,CAAA,CAAA;AAAc,IAAA,EAAA,CAAA,YAAA;AAEzE,IAAA,EAAA,CAAA,UAAA,CAAA,CAAA,EAAA,sDAAA,EAAA,CAAA,EAAA,CAAA,EAAA,QAAA,EAAA,EAAA;AACA,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,QAAA,EAAA,EAAA;AAAwB,IAAA,EAAA,CAAA,UAAA,CAAA,OAAA,EAAA,SAAA,qEAAA,GAAA;AAAA,YAAA,WAAA,GAAA,EAAA,CAAA,aAAA,CAAA,IAAA,CAAA;AAAA,YAAA,OAAA,GAAA,WAAA,CAAA,SAAA;AAAA,YAAA,OAAA,GAAA,EAAA,CAAA,aAAA,EAAA;AAAA,aAAA,OAAA,CAAA,YAAA,CAAA,OAAA,CAAA;AAAA,KAAA;AAA+B,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,UAAA;AAAU,IAAA,EAAA,CAAA,MAAA,CAAA,CAAA,EAAA,KAAA;AAAG,IAAA,EAAA,CAAA,YAAA;AAAW,IAAA,EAAA,CAAA,YAAA;AAEjF,IAAA,EAAA,CAAA,YAAA;;;;;;AANgB,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,UAAA,CAAA,SAAA,EAAA,MAAA,CAAA,kBAAA,CAAA,UAAA,CAAA,OAAA,CAAA;AAC6C,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,iBAAA,CAAA,OAAA,CAAA,KAAA;AAEL,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,UAAA,CAAA,MAAA,EAAA,CAAA,OAAA,CAAA,OAAA;;;;;;;;AAKxD,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,eAAA,EAAA,EAAA;AACE,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA,EAAA,QAAA,EAAA,EAAA;AACA,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA;AACE,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA;AACE,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,gBAAA,EAAA,CAAA;AACE,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,WAAA;AAAW,IAAA,EAAA,CAAA,MAAA,CAAA,CAAA,EAAA,QAAA;AAAM,IAAA,EAAA,CAAA,YAAA;AACjB,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA,EAAA,OAAA,EAAA,EAAA,EAAA,EAAA;AACF,IAAA,EAAA,CAAA,YAAA;AACF,IAAA,EAAA,CAAA,YAAA;AACA,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA;AACE,IAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,gBAAA,EAAA,CAAA;AACE,IAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,WAAA;AAAW,IAAA,EAAA,CAAA,MAAA,CAAA,EAAA,EAAA,MAAA;AAAI,IAAA,EAAA,CAAA,YAAA;AACf,IAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,OAAA,EAAA,EAAA,EAAA,EAAA;AACF,IAAA,EAAA,CAAA,YAAA;AACF,IAAA,EAAA,CAAA,YAAA;AACA,IAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,KAAA,EAAA,EAAA;AACE,IAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,gBAAA,EAAA,CAAA;AACE,IAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,WAAA;AAAW,IAAA,EAAA,CAAA,MAAA,CAAA,EAAA,EAAA,SAAA;AAAO,IAAA,EAAA,CAAA,YAAA;AAClB,IAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,OAAA,EAAA,EAAA,EAAA,EAAA;AACF,IAAA,EAAA,CAAA,YAAA;AACF,IAAA,EAAA,CAAA,YAAA;AACA,IAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,KAAA,EAAA,EAAA;AACE,IAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,QAAA,EAAA,EAAA;AAAmB,IAAA,EAAA,CAAA,UAAA,CAAA,OAAA,EAAA,SAAA,sEAAA,GAAA;AAAA,YAAA,WAAA,GAAA,EAAA,CAAA,aAAA,CAAA,IAAA,CAAA;AAAA,YAAA,QAAA,GAAA,WAAA,CAAA,SAAA;;AAAA,YAAA,IAAA,GAAA,EAAA,CAAA,WAAA,CAAA,CAAA,CAAA;;AAAA,YAAA,OAAA,GAAA,EAAA,CAAA,aAAA,EAAA;AAAA,aAAA,OAAA,CAAA,QAAA,CAAA,QAAA,EAAA,IAAA,CAAA,KAAA,CAAA;AAAA,KAAA;AAA0C,IAAA,EAAA,CAAA,MAAA,CAAA,EAAA,EAAA,QAAA;AAAM,IAAA,EAAA,CAAA,YAAA;AACrE,IAAA,EAAA,CAAA,YAAA;AACF,IAAA,EAAA,CAAA,YAAA;AACF,IAAA,EAAA,CAAA,YAAA;;;;;;;;AAcE,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,QAAA,EAAA,EAAA;AAAwB,IAAA,EAAA,CAAA,UAAA,CAAA,OAAA,EAAA,SAAA,8EAAA,GAAA;AAAA,MAAA,EAAA,CAAA,aAAA,CAAA,IAAA;AAAA,YAAA,QAAA,GAAA,EAAA,CAAA,aAAA,GAAA,SAAA;AAAA,YAAA,OAAA,GAAA,EAAA,CAAA,aAAA,EAAA;AAAA,aAAA,OAAA,CAAA,YAAA,CAAA,QAAA,CAAA;AAAA,KAAA;AAAoD,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,UAAA;AAAU,IAAA,EAAA,CAAA,MAAA,CAAA,CAAA,EAAA,UAAA;AAAQ,IAAA,EAAA,CAAA,YAAA;AAAW,IAAA,EAAA,CAAA,YAAA;;;;;;;;AAZ3G,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,eAAA,EAAA,EAAA;AACE,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,QAAA,EAAA,EAAA;AAEE,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,UAAA,EAAA,EAAA;AACE,IAAA,EAAA,CAAA,MAAA,CAAA,CAAA;AACF,IAAA,EAAA,CAAA,YAAA;AACF,IAAA,EAAA,CAAA,YAAA;AAEA,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,cAAA,EAAA,EAAA;AAEc,IAAA,EAAA,CAAA,UAAA,CAAA,QAAA,EAAA,SAAA,4EAAA,GAAA;AAAA,YAAA,WAAA,GAAA,EAAA,CAAA,aAAA,CAAA,IAAA,CAAA;AAAA,YAAA,QAAA,GAAA,WAAA,CAAA,SAAA;AAAA,YAAA,OAAA,GAAA,EAAA,CAAA,aAAA,EAAA;AAAA,aAAA,OAAA,CAAA,uBAAA,CAAA,QAAA,CAAA;AAAA,KAAA;AAAyC,IAAA,EAAA,CAAA,MAAA,CAAA,CAAA;AAAc,IAAA,EAAA,CAAA,YAAA;AAErE,IAAA,EAAA,CAAA,UAAA,CAAA,CAAA,EAAA,sDAAA,EAAA,CAAA,EAAA,CAAA,EAAA,QAAA,EAAA,EAAA;AACF,IAAA,EAAA,CAAA,YAAA;;;;;;AAXU,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,WAAA,CAAA,YAAA,EAAA,YAAA,QAAA,CAAA,KAAA;AAEJ,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,kBAAA,CAAA,GAAA,EAAA,MAAA,CAAA,WAAA,CAAA,UAAA,CAAA,QAAA,IAAA,aAAA,GAAA,eAAA,EAAA,GAAA;AAIU,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,UAAA,CAAA,SAAA,EAAA,MAAA,CAAA,sBAAA,CAAA,QAAA,CAAA,EAAwC,eAAxC,EAAwC,MAAA,CAAA,4BAAA,CAAA,QAAA,CAAxC;AAEyC,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,iBAAA,CAAA,QAAA,CAAA,KAAA;AAED,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,UAAA,CAAA,MAAA,EAAA,CAAA,QAAA,CAAA,OAAA;;;;;;AAsBxD,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA;;;;;;AADF,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA;AACE,IAAA,EAAA,CAAA,UAAA,CAAA,CAAA,EAAA,yCAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA;AACA,IAAA,EAAA,CAAA,MAAA,CAAA,CAAA;AACF,IAAA,EAAA,CAAA,YAAA;;;;;AADE,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,kBAAA,CAAA,GAAA,EAAA,OAAA,CAAA,MAAA,EAAA,GAAA;;;ADhF1B;;AAEG;;;AACH,OAAM,MAAO,YAAP,CAAmB;AAIzB;;AACA,OAAM,MAAO,gBAAP,CAAuB;AAM7B;;;;AAIG;;AAEF,OAAM,MAAO,iBAAP,CAAwB;AAM5B,EAAA,WAAA,CAAoB,aAApB,EACoB,iBADpB,EACwD;AADpC,SAAA,aAAA,GAAA,aAAA;AACA,SAAA,iBAAA,GAAA,iBAAA;AANpB,SAAA,UAAA,GAAa,IAAI,eAAJ,CAAoC,EAApC,CAAb;AAOE,SAAK,UAAL;AACD;;AAPO,MAAJ,IAAI,GAAA;AACN,WAAO,KAAK,UAAL,CAAgB,KAAvB;AACD;;AAMD,EAAA,UAAU,GAAA,CAET;;AACD,EAAA,cAAc,CAAC,YAAD,EAAqB,OAArB,EAAmC;AAChD,SAAK,aAAL,CAAmB,yBAAnB,CAA6C,YAA7C,EAA0D,OAA1D,EAAmE,IAAnE,CAAyE,IAAD,IAAgB;AACtF,WAAK,UAAL,CAAgB,IAAhB,CAAqB,IAArB;AACD,KAFD;AAGA;AACD;;;AACA,EAAA,UAAU,CAAC,MAAD,EAAuB,IAAvB,EAAmC;AAC5C;AACG,IAAA,MAAM,CAAC,QAAP,CAAgB,IAAhB,CAAqB;AAAC,MAAA,KAAK,EAAE;AAAR,KAArB;AACA,SAAK,UAAL,CAAgB,IAAhB,CAAqB,KAAK,IAA1B,EAHyC,CAI5C;AACA;;AAED,EAAA,UAAU,CAAC,IAAD,EAAqB,IAArB,EAAiC;AACzC,IAAA,IAAI,CAAC,KAAL,GAAa,IAAb;AACA,SAAK,UAAL,CAAgB,IAAhB,CAAqB,KAAK,IAA1B;AACD;;AA7B2B;;;mBAAjB,iB,EAAiB,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,aAAA,C,EAAA,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,iBAAA,C;AAAA,C;;;SAAjB,iB;AAAiB,EAAA,OAAA,EAAjB,iBAAiB,CAAA;;AAuC/B,OAAM,MAAO,mBAAP,CAA0B;AAsB9B,EAAA,WAAA,CAAoB,SAApB,EACmB,OADnB,EAEoB,EAFpB,EAGoB,iBAHpB,EAImB,MAJnB,EAKoB,WALpB,EAMmB,WANnB,EAOoB,UAPpB,EAO4C;AAPxB,SAAA,SAAA,GAAA,SAAA;AACD,SAAA,OAAA,GAAA,OAAA;AACC,SAAA,EAAA,GAAA,EAAA;AACA,SAAA,iBAAA,GAAA,iBAAA;AACD,SAAA,MAAA,GAAA,MAAA;AACC,SAAA,WAAA,GAAA,WAAA;AACD,SAAA,WAAA,GAAA,WAAA;AACC,SAAA,UAAA,GAAA,UAAA;AAzBV,SAAA,SAAA,GAA+B,IAAI,YAAJ,EAA/B;AAGV;;AACA,SAAA,WAAA,GAAc,IAAI,GAAJ,EAAd;AACA;;AACA,SAAA,aAAA,GAAgB,IAAI,GAAJ,EAAhB;AACA;;AACA,SAAA,cAAA,GAA0C,IAA1C;AACA;;AACA,SAAA,WAAA,GAAc,EAAd;AAIA;;AACA,SAAA,kBAAA,GAAqB,IAAI,cAAJ,CAAqC;AAAK;AAA1C,KAArB;;AAiEA,SAAA,QAAA,GAAY,IAAD,IAA4B,IAAI,CAAC,KAA5C;;AAEA,SAAA,YAAA,GAAgB,IAAD,IAA4B,IAAI,CAAC,UAAhD;;AAEA,SAAA,WAAA,GAAe,IAAD,IAAwC,IAAI,CAAC,QAA3D;;AAEA,SAAA,QAAA,GAAW,CAAC,CAAD,EAAY,SAAZ,KAA4C,SAAS,CAAC,UAAjE;;AAEA,SAAA,YAAA,GAAe,CAAC,CAAD,EAAY,SAAZ,KAA4C,SAAS,CAAC,KAAV,KAAoB,EAA/E;;AAEA,SAAA,WAAA,GAAc,CAAC,IAAD,EAAY,KAAZ,KAA6B;AAEzC,YAAM,YAAY,GAAG,KAAK,aAAL,CAAmB,GAAnB,CAAuB,IAAvB,CAArB;AACA,YAAM,QAAQ,GAAG,YAAY,IAAI,YAAY,CAAC,KAAb,KAAuB,IAAI,CAAC,KAA5C,GAAoD,YAApD,GAAmE,IAAI,gBAAJ,EAApF;AACA,MAAA,QAAQ,CAAC,KAAT,GAAiB,IAAI,CAAC,KAAtB;AACA,MAAA,QAAQ,CAAC,KAAT,GAAiB,KAAjB;AACA,MAAA,QAAQ,CAAC,UAAT,GAAsB,IAAtB,CANyC,CAMd;;AAC3B,MAAA,QAAQ,CAAC,EAAT,GAAY,IAAI,CAAC,EAAjB;AACA,MAAA,QAAQ,CAAC,OAAT,GAAiB,IAAI,CAAC,OAAtB;AACA,MAAA,QAAQ,CAAC,QAAT,GAAkB,IAAI,CAAC,QAAvB;AACA,MAAA,QAAQ,CAAC,UAAT,GAAoB,IAAI,CAAC,UAAzB;AAEA,WAAK,WAAL,CAAiB,GAAjB,CAAqB,QAArB,EAA+B,IAA/B;AACA,WAAK,aAAL,CAAmB,GAAnB,CAAuB,IAAvB,EAA6B,QAA7B;AAGA,aAAO,QAAP;AACD,KAjBD;;AAhEA,SAAK,aAAL,GAAqB,IAAI,gBAAJ,CAAqB,KAAK,WAA1B,EAAsC,KAAK,QAA3C,EAAoD,KAAK,YAAzD,EAAsE,KAAK,WAA3E,CAArB;AACA,SAAK,WAAL,GAAmB,IAAI,eAAJ,CAAsC,KAAK,QAA3C,EAAqD,KAAK,YAA1D,CAAnB;AAEA,SAAK,UAAL,GAAkB,IAAI,qBAAJ,CAA0B,KAAK,WAA/B,EAA4C,KAAK,aAAjD,CAAlB;;AACE,IAAA,SAAS,CAAC,UAAV,CAAqB,SAArB,CAA+B,IAAI,IAAG;AACpC,WAAK,UAAL,CAAgB,IAAhB,GAAuB,IAAvB;AACD,KAFD;AAGD;;AACD,EAAA,IAAI,CAAC,KAAD,EAA6B;AAE/B,IAAA,eAAe,CAAC,KAAK,WAAN,EAAmB,KAAK,CAAC,aAAzB,EAAwC,KAAK,CAAC,YAA9C,CAAf;AAED;;AACD,EAAA,SAAS,CAAC,KAAD,EAAc;AACrB;AACA;AACA;AACC,QAAG,KAAK,IAAE,CAAV,EAAY;AACX,UAAI,UAAU,GAAW,KAAK,kBAAL,CAAwB,QAAjD;AACA,MAAA,OAAO,CAAC,GAAR,CAAY,UAAZ;AACA,UAAG,UAAU,CAAC,MAAX,IAAmB,CAAtB,EACE,KAAK,kBAAL,GADF,KAEK,IAAG,UAAU,CAAC,MAAX,IAAmB,CAAtB,EACH,KAAK,kBAAL,CAAwB,UAAU,CAAC,CAAD,CAAV,CAAc,EAAtC,EADG,KAGL,KAAK,WAAL,CAAiB,YAAjB,CAA8B,0DAA9B;AACD;AAEF;;AACD,EAAA,mBAAmB,GAAA;AAClB,QAAI,GAAG,GAAQ,EAAf;AACA,QAAI,YAAY,GAAQ,CAAxB;AACA,SAAK,WAAL,CAAiB,GAAjB,CAAqB,CAAC,IAAG;AAAG,MAAA,GAAG,CAAC,IAAJ,CAAS;AAAC,QAAA,EAAE,EAAC,CAAC,CAAC,EAAN;AAAS,QAAA,KAAK,EAAC,YAAY;AAA3B,OAAT;AAAyC,KAArE;AAEC,SAAK,UAAL,CAAgB,eAAhB,CAAgC,GAAhC,EAAqC,SAArC,CAAgD,IAAD,IAAc;AAC3D,UAAG,IAAI,CAAC,aAAL,IAAoB,CAAvB,EAAyB;AACvB,aAAK,WAAL,CAAiB,aAAjB,CAA+B,IAAI,CAAC,OAApC;AACD,OAFD,MAEK;AACH,aAAK,WAAL,CAAiB,aAAjB,CAA+B,IAAI,CAAC,OAApC;AACD;AACF,KAND;AAOD;;AACK,EAAA,QAAQ,GAAA;AAAA;;AAAA;AACZ,MAAA,KAAI,CAAC,iBAAL,CAAuB,eAAvB,CAAuC,KAAI,CAAC,WAA5C,EAAyD,IAAzD,CAA+D,IAAD,IAAgB;AAC5E,QAAA,KAAI,CAAC,cAAL,GAAsB,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAA9B;AACA,QAAA,KAAI,CAAC,SAAL,GAAiB,IAAjB;;AACA,QAAA,KAAI,CAAC,SAAL,CAAe,cAAf,CAA8B,KAAI,CAAC,WAAnC,EAA+C,KAAI,CAAC,cAApD;AACD,OAJD;AADY;AAMb;;AACD,EAAA,eAAe,CAAC,EAAD,EAAoB;AACjC,SAAK,cAAL,GAAoB,KAAK,WAAzB,EAAqC,EAAE,CAAC,KAAxC;;AACA,SAAK,SAAL,CAAe,cAAf,CAA8B,KAAK,WAAnC,EAA+C,KAAK,cAApD;;AACA,SAAK,kBAAL;AACD;AA8BD;;;AACA,EAAA,sBAAsB,CAAC,IAAD,EAAuB;AAC3C,UAAM,WAAW,GAAG,KAAK,WAAL,CAAiB,cAAjB,CAAgC,IAAhC,CAApB;AACA,UAAM,eAAe,GACnB,WAAW,CAAC,MAAZ,GAAqB,CAArB,IACA,WAAW,CAAC,KAAZ,CAAkB,KAAK,IAAG;AACxB,aAAO,KAAK,kBAAL,CAAwB,UAAxB,CAAmC,KAAnC,CAAP;AACD,KAFD,CAFF;AAKA,WAAO,eAAP;AACD,GA1H6B,CA4H9B;;;AACA,EAAA,4BAA4B,CAAC,IAAD,EAAuB;AACjD,UAAM,WAAW,GAAG,KAAK,WAAL,CAAiB,cAAjB,CAAgC,IAAhC,CAApB;AACA,UAAM,MAAM,GAAG,WAAW,CAAC,IAAZ,CAAiB,KAAK,IAAI,KAAK,kBAAL,CAAwB,UAAxB,CAAmC,KAAnC,CAA1B,CAAf;AACA,WAAO,MAAM,IAAI,CAAC,KAAK,sBAAL,CAA4B,IAA5B,CAAlB;AACD;AAED;;;AACA,EAAA,uBAAuB,CAAC,IAAD,EAAuB;AAC5C,SAAK,kBAAL,CAAwB,MAAxB,CAA+B,IAA/B,EAD4C,CAE5C;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA,SAAK,wBAAL,CAA8B,IAA9B;AACD;AAED;;;AACA,EAAA,2BAA2B,CAAC,IAAD,EAAuB;AAChD,SAAK,kBAAL,CAAwB,MAAxB,CAA+B,IAA/B;AACA,SAAK,wBAAL,CAA8B,IAA9B;AACD;AAED;;;AACA,EAAA,wBAAwB,CAAC,IAAD,EAAuB;AAC7C,QAAI,MAAM,GAA4B,KAAK,aAAL,CAAmB,IAAnB,CAAtC;;AACA,WAAO,MAAP,EAAe;AACb,WAAK,sBAAL,CAA4B,MAA5B;AACA,MAAA,MAAM,GAAG,KAAK,aAAL,CAAmB,MAAnB,CAAT;AACD;AACF;AAED;;;AACA,EAAA,sBAAsB,CAAC,IAAD,EAAuB;AAC3C,UAAM,YAAY,GAAG,KAAK,kBAAL,CAAwB,UAAxB,CAAmC,IAAnC,CAArB;AACA,UAAM,WAAW,GAAG,KAAK,WAAL,CAAiB,cAAjB,CAAgC,IAAhC,CAApB;AACA,UAAM,eAAe,GACnB,WAAW,CAAC,MAAZ,GAAqB,CAArB,IACA,WAAW,CAAC,KAAZ,CAAkB,KAAK,IAAG;AACxB,aAAO,KAAK,kBAAL,CAAwB,UAAxB,CAAmC,KAAnC,CAAP;AACD,KAFD,CAFF;;AAKA,QAAI,YAAY,IAAI,CAAC,eAArB,EAAsC;AACpC,WAAK,kBAAL,CAAwB,QAAxB,CAAiC,IAAjC;AACD,KAFD,MAEO,IAAI,CAAC,YAAD,IAAiB,eAArB,EAAsC;AAC3C,WAAK,kBAAL,CAAwB,MAAxB,CAA+B,IAA/B;AACD;AACF;AAED;;;AACA,EAAA,aAAa,CAAC,IAAD,EAAuB;AAClC,UAAM,YAAY,GAAG,KAAK,QAAL,CAAc,IAAd,CAArB;;AAEA,QAAI,YAAY,GAAG,CAAnB,EAAsB;AACpB,aAAO,IAAP;AACD;;AAED,UAAM,UAAU,GAAG,KAAK,WAAL,CAAiB,SAAjB,CAA2B,OAA3B,CAAmC,IAAnC,IAA2C,CAA9D;;AAEA,SAAK,IAAI,CAAC,GAAG,UAAb,EAAyB,CAAC,IAAI,CAA9B,EAAiC,CAAC,EAAlC,EAAsC;AACpC,YAAM,WAAW,GAAG,KAAK,WAAL,CAAiB,SAAjB,CAA2B,CAA3B,CAApB;;AAEA,UAAI,KAAK,QAAL,CAAc,WAAd,IAA6B,YAAjC,EAA+C;AAC7C,eAAO,WAAP;AACD;AACF;;AACD,WAAO,IAAP;AACD;AAED;;;AACA,EAAA,YAAY,CAAC,IAAD,EAAuB;AACjC,UAAM,UAAU,GAAG,KAAK,WAAL,CAAiB,GAAjB,CAAqB,IAArB,CAAnB;;AACA,SAAK,SAAL,CAAe,UAAf,CAA0B,UAA1B,EAAuC,EAAvC;;AACA,SAAK,WAAL,CAAiB,MAAjB,CAAwB,IAAxB;AACD;;AACD,EAAA,YAAY,CAAC,IAAD,EAAuB;AACjC,UAAM,UAAU,GAAG,KAAK,WAAL,CAAiB,GAAjB,CAAqB,IAArB,CAAnB;;AACA,SAAK,SAAL,CAAe,UAAf,CAA0B,UAA1B,EAAuC,EAAvC;;AACA,IAAA,OAAO,CAAC,GAAR,CAAY,IAAZ;AACA,SAAK,WAAL,CAAiB,MAAjB,CAAwB,IAAxB;AACD;AAED;;;AACA,EAAA,QAAQ,CAAC,IAAD,EAAyB,SAAzB,EAA0C;AAChD,UAAM,UAAU,GAAG,KAAK,WAAL,CAAiB,GAAjB,CAAqB,IAArB,CAAnB;;AACA,SAAK,SAAL,CAAe,UAAf,CAA0B,UAA1B,EAAuC,SAAvC;AACD;;AACD,EAAA,WAAW,GAAA;AAAA;;AACT,QAAI,UAAU,GAAW,KAAK,kBAAL,CAAwB,QAAjD;AAEA,QAAI,OAAO,GAAQ,EAAnB;AACA,QAAI,QAAQ,GAAG,IAAf;AACA,QAAI,QAAQ,GAAG,IAAf;AACA,QAAG,UAAU,CAAC,MAAX,IAAmB,CAAtB,EACG,OAAO,GAAC,+DAAR,CADH,KAEK,IAAG,UAAU,CAAC,MAAX,IAAmB,CAAtB,EAAwB;AAC3B,MAAA,QAAQ,GAAC,UAAU,CAAC,CAAD,CAAV,CAAc,EAAvB;AACA,MAAA,QAAQ,GAAC,UAAU,CAAC,CAAD,CAAV,CAAc,KAAvB;AACA,MAAA,OAAO,GAAC,2CAAyC,QAAzC,GAAkD,GAA1D;AACD;;AAED,QAAG,OAAO,IAAE,EAAZ,EAAe;AACT,WAAK,OAAL,CAAa,IAAb,CAAkB,4BAAlB,EAAgD;AAAE,QAAA,QAAQ,EAAE,MAAZ;AAAoB,QAAA,SAAS,EAAE,MAA/B;AAAuC,QAAA,MAAM,EAAE,MAA/C;AAAuD,QAAA,KAAK,EAAE,KAA9D;AAAqE,QAAA,YAAY,EAAE,IAAnF;AAC9C,QAAA,IAAI,EAAE;AAAE,UAAA,MAAM,EAAE,sBAAV;AAAkC,UAAA,OAAO,EAAE;AAA3C;AADwC,OAAhD,EAEG,WAFH,GAEiB,SAFjB;AAAA,qCAE2B,WAAO,EAAP,EAAsB;AAC7C,cAAI,EAAJ,EAAQ;AACN,YAAA,MAAI,CAAC,MAAL,CAAY,IAAZ,CAAiB,yBAAjB,EAA8C;AAC5C,cAAA,QAAQ,EAAE,MADkC;AAE5C,cAAA,SAAS,EAAE,MAFiC;AAG5C,cAAA,MAAM,EAAE,MAHoC;AAI5C,cAAA,KAAK,EAAE,KAJqC;AAK5C,cAAA,YAAY,EAAE,KAL8B;AAM5C,cAAA,IAAI,EAAE;AAAE,gBAAA,OAAO,EAAE,MAAI,CAAC,cAAhB;AAA+B,gBAAA,OAAO,EAAC,QAAvC;AAAiD,gBAAA,OAAO,EAAE,QAA1D;AAAoE,gBAAA,EAAE,EAAC;AAAvE;AANsC,aAA9C;AAQD;AACJ,SAbD;;AAAA;AAAA;AAAA;AAAA;AAcL,KAfD,MAiBA,KAAK,WAAL,CAAiB,YAAjB,CAA8B,iCAA9B;AACD;;AACD,EAAA,YAAY,GAAA;AACV,QAAI,UAAU,GAAW,KAAK,kBAAL,CAAwB,QAAjD;;AACA,QAAG,UAAU,CAAC,MAAX,IAAmB,CAAtB,EAAwB;AACtB,WAAK,MAAL,CAAY,IAAZ,CAAiB,yBAAjB,EAA8C;AAC5C,QAAA,QAAQ,EAAE,MADkC;AAE5C,QAAA,SAAS,EAAE,MAFiC;AAG5C,QAAA,MAAM,EAAE,MAHoC;AAI5C,QAAA,KAAK,EAAE,KAJqC;AAK5C,QAAA,YAAY,EAAE,KAL8B;AAM5C,QAAA,IAAI,EAAE;AAAE,UAAA,OAAO,EAAE,KAAK,cAAhB;AAAgC,UAAA,EAAE,EAAE,UAAU,CAAC,CAAD,CAAV,CAAc;AAAlD;AANsC,OAA9C;AAQD,KATD,MASK;AACH,WAAK,WAAL,CAAiB,YAAjB,CAA8B,4BAA9B;AACD;AACF;;AACD,EAAA,kBAAkB,CAAC,OAAA,GAAe,CAAhB,EAAiB;AACjC,QAAG,OAAO,IAAE,CAAZ,EAAc;AACZ,WAAK,UAAL,CAAgB,aAAhB,CAA8B,QAAQ,CAAC,YAAY,CAAC,OAAb,CAAqB,KAArB,CAAD,CAAtC,EAAoE,KAAK,cAAzE,EAAyF,SAAzF,CAAoG,IAAD,IAAc;AAC/G,aAAK,WAAL,GAAmB,IAAnB;AACD,OAFD;AAGD,KAJD,MAIK;AACH,WAAK,UAAL,CAAgB,cAAhB,CAA+B,OAA/B,EAAwC,SAAxC,CAAmD,IAAD,IAAc;AAC9D,aAAK,WAAL,GAAmB,IAAnB;AACD,OAFD;AAGD;AACF;;AAhR6B;;;mBAAnB,mB,EAAmB,EAAA,CAAA,iBAAA,CAsBC,iBAtBD,C,EAsBkB,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,SAAA,C,EAAA,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,WAAA,C,EAAA,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,iBAAA,C,EAAA,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,SAAA,C,EAAA,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,yBAAA,C,EAAA,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,cAAA,C,EAAA,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,aAAA,C;AAAA,C;;;QAtBrC,mB;AAAmB,EAAA,SAAA,EAAA,CAAA,CAAA,sBAAA,CAAA,C;AAAA,EAAA,MAAA,EAAA;AAAA,IAAA,WAAA,EAAA;AAAA,G;AAAA,EAAA,OAAA,EAAA;AAAA,IAAA,SAAA,EAAA;AAAA,G;AAAA,EAAA,QAAA,EAAA,CAAA,EAAA,CAAA,kBAAA,CAFnB,CAAG,iBAAH,CAEmB,CAAA,C;AAFE,EAAA,KAAA,EAAA,E;AAAA,EAAA,IAAA,EAAA,C;AAAA,EAAA,MAAA,EAAA,CAAA,CAAA,cAAA,EAAA,IAAA,CAAA,EAAA,CAAA,CAAA,EAAA,KAAA,CAAA,EAAA,CAAA,CAAA,EAAA,UAAA,CAAA,EAAA,CAAA,YAAA,EAAA,MAAA,CAAA,EAAA,CAAA,CAAA,EAAA,OAAA,EAAA,aAAA,EAAA,iBAAA,CAAA,EAAA,CAAA,CAAA,EAAA,OAAA,EAAA,CAAA,EAAA,OAAA,EAAA,SAAA,CAAA,EAAA,CAAA,CAAA,EAAA,WAAA,CAAA,EAAA,CAAA,gBAAA,EAAA,OAAA,EAAA,CAAA,EAAA,eAAA,EAAA,qBAAA,CAAA,EAAA,CAAA,OAAA,EAAA,UAAA,CAAA,EAAA,CAAA,CAAA,EAAA,kBAAA,CAAA,EAAA,CAAA,CAAA,EAAA,UAAA,CAAA,EAAA,CAAA,CAAA,EAAA,YAAA,EAAA,aAAA,CAAA,EAAA,CAAA,mBAAA,EAAA,EAAA,EAAA,oBAAA,EAAA,EAAA,EAAA,CAAA,EAAA,gBAAA,CAAA,EAAA,CAAA,oBAAA,EAAA,EAAA,EAAA,CAAA,EAAA,gBAAA,EAAA,oBAAA,CAAA,EAAA,CAAA,CAAA,EAAA,UAAA,CAAA,EAAA,CAAA,mBAAA,EAAA,EAAA,EAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,OAAA,CAAA,EAAA,CAAA,OAAA,EAAA,cAAA,CAAA,EAAA,CAAA,CAAA,EAAA,UAAA,CAAA,EAAA,CAAA,CAAA,EAAA,UAAA,CAAA,EAAA,CAAA,aAAA,EAAA,EAAA,EAAA,CAAA,EAAA,cAAA,EAAA,CAAA,EAAA,oBAAA,CAAA,EAAA,CAAA,OAAA,EAAA,aAAA,EAAA,SAAA,EAAA,EAAA,EAAA,CAAA,EAAA,OAAA,EAAA,SAAA,CAAA,EAAA,CAAA,CAAA,EAAA,OAAA,CAAA,EAAA,CAAA,mBAAA,EAAA,EAAA,EAAA,oBAAA,EAAA,EAAA,CAAA,EAAA,CAAA,iBAAA,EAAA,EAAA,EAAA,UAAA,EAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA,qBAAA,EAAA,CAAA,EAAA,SAAA,EAAA,QAAA,CAAA,EAAA,CAAA,iBAAA,EAAA,EAAA,EAAA,CAAA,EAAA,OAAA,EAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,iBAAA,EAAA,EAAA,EAAA,CAAA,EAAA,OAAA,CAAA,EAAA,CAAA,oBAAA,EAAA,EAAA,CAAA,EAAA,CAAA,UAAA,EAAA,EAAA,EAAA,aAAA,EAAA,aAAA,CAAA,EAAA,CAAA,WAAA,EAAA,EAAA,CAAA,EAAA,CAAA,gBAAA,EAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA,UAAA,CAAA,EAAA,CAAA,YAAA,EAAA,EAAA,EAAA,CAAA,EAAA,OAAA,CAAA,EAAA,CAAA,iBAAA,EAAA,EAAA,EAAA,mBAAA,EAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA,qBAAA,CAAA,EAAA,CAAA,CAAA,EAAA,SAAA,EAAA,eAAA,EAAA,QAAA,CAAA,EAAA,CAAA,SAAA,EAAA,EAAA,EAAA,CAAA,EAAA,aAAA,CAAA,EAAA,CAAA,OAAA,EAAA,4BAAA,EAAA,CAAA,EAAA,oBAAA,CAAA,EAAA,CAAA,CAAA,EAAA,4BAAA,CAAA,C;AAAA,EAAA,QAAA,EAAA,SAAA,4BAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;AC1ElC,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,MAAA,EAAA,CAAA;AACE,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA;AACE,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA;AACE,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,gBAAA,EAAA,CAAA;AACE,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,WAAA;AAAW,MAAA,EAAA,CAAA,MAAA,CAAA,CAAA,EAAA,aAAA;AAAW,MAAA,EAAA,CAAA,YAAA;AACtB,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,YAAA,EAAA,CAAA;AAAY,MAAA,EAAA,CAAA,UAAA,CAAA,aAAA,EAAA,SAAA,8DAAA,CAAA,MAAA,EAAA;AAAA,eAAA,GAAA,CAAA,cAAA,GAAA,MAAA;AAAA,OAAA,EAA0B,iBAA1B,EAA0B,SAAA,kEAAA,CAAA,MAAA,EAAA;AAAA,eACjB,GAAA,CAAA,eAAA,CAAA,MAAA,CADiB;AAAA,OAA1B;AAEV,MAAA,EAAA,CAAA,UAAA,CAAA,CAAA,EAAA,yCAAA,EAAA,CAAA,EAAA,CAAA,EAAA,YAAA,EAAA,CAAA;AAGF,MAAA,EAAA,CAAA,YAAA;AACF,MAAA,EAAA,CAAA,YAAA;AAEF,MAAA,EAAA,CAAA,YAAA;AACF,MAAA,EAAA,CAAA,YAAA;AACI,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA;AACE,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA;AACE,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,eAAA,EAAA,CAAA;AAAsC,MAAA,EAAA,CAAA,UAAA,CAAA,qBAAA,EAAA,SAAA,0EAAA,CAAA,MAAA,EAAA;AAAA,eAAA,GAAA,CAAA,WAAA,CAAA,OAAA,GAAA,MAAA;AAAA,OAAA,EAA4C,qBAA5C,EAA4C,SAAA,0EAAA,CAAA,MAAA,EAAA;AAAA,eAAyB,GAAA,CAAA,SAAA,CAAA,MAAA,CAAzB;AAAA,OAA5C;AACpC,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,SAAA,EAAA,CAAA;AACE,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,KAAA,EAAA,CAAA;AACE,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,KAAA,EAAA,CAAA;AACM,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,KAAA,EAAA,EAAA;AACE,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,UAAA,EAAA,EAAA;AACE,MAAA,EAAA,CAAA,UAAA,CAAA,EAAA,EAAA,6CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,eAAA,EAAA,EAAA;AAYA,MAAA,EAAA,CAAA,UAAA,CAAA,EAAA,EAAA,6CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,eAAA,EAAA,EAAA;AA2BA,MAAA,EAAA,CAAA,UAAA,CAAA,EAAA,EAAA,6CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,eAAA,EAAA,EAAA;AAcF,MAAA,EAAA,CAAA,YAAA;AACF,MAAA,EAAA,CAAA,YAAA;AACA,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,KAAA,EAAA,EAAA;AACE,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,QAAA,EAAA,EAAA;AAAsC,MAAA,EAAA,CAAA,UAAA,CAAA,OAAA,EAAA,SAAA,qDAAA,GAAA;AAAA,eAAS,GAAA,CAAA,WAAA,EAAT;AAAsB,OAAtB;AAAwB,MAAA,EAAA,CAAA,MAAA,CAAA,EAAA,EAAA,iCAAA;AAAqB,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,UAAA;AAAU,MAAA,EAAA,CAAA,MAAA,CAAA,EAAA,EAAA,mBAAA;AAAiB,MAAA,EAAA,CAAA,YAAA;AAAW,MAAA,EAAA,CAAA,YAAA;AACzH,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,QAAA,EAAA,EAAA;AAAsC,MAAA,EAAA,CAAA,UAAA,CAAA,OAAA,EAAA,SAAA,qDAAA,GAAA;AAAA,eAAS,GAAA,CAAA,YAAA,EAAT;AAAuB,OAAvB;AAAyB,MAAA,EAAA,CAAA,MAAA,CAAA,EAAA,EAAA,kCAAA;AAAsB,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,UAAA;AAAU,MAAA,EAAA,CAAA,MAAA,CAAA,EAAA,EAAA,MAAA;AAAI,MAAA,EAAA,CAAA,YAAA;AAAW,MAAA,EAAA,CAAA,YAAA;AAChH,MAAA,EAAA,CAAA,YAAA;AACH,MAAA,EAAA,CAAA,YAAA;AACF,MAAA,EAAA,CAAA,YAAA;AACL,MAAA,EAAA,CAAA,YAAA;AACA,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,SAAA,EAAA,EAAA;AACE,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,KAAA,EAAA,CAAA;AACE,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,KAAA,EAAA,CAAA;AACE,MAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,KAAA,EAAA,CAAA;AACA,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,KAAA,EAAA,EAAA;AACE,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,QAAA,EAAA,EAAA;AAAsC,MAAA,EAAA,CAAA,UAAA,CAAA,OAAA,EAAA,SAAA,qDAAA,GAAA;AAAA,eAAS,GAAA,CAAA,mBAAA,EAAT;AAA8B,OAA9B;AAAgC,MAAA,EAAA,CAAA,MAAA,CAAA,EAAA,EAAA,SAAA;AAAO,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,UAAA;AAAU,MAAA,EAAA,CAAA,MAAA,CAAA,EAAA,EAAA,MAAA;AAAI,MAAA,EAAA,CAAA,YAAA;AAAW,MAAA,EAAA,CAAA,YAAA;AACxG,MAAA,EAAA,CAAA,YAAA;AACA,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,KAAA,EAAA,EAAA;AAEI,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,KAAA,EAAA,EAAA;AAAsC,MAAA,EAAA,CAAA,UAAA,CAAA,oBAAA,EAAA,SAAA,+DAAA,CAAA,MAAA,EAAA;AAAA,eAAsB,GAAA,CAAA,IAAA,CAAA,MAAA,CAAtB;AAAkC,OAAlC;AACpC,MAAA,EAAA,CAAA,UAAA,CAAA,EAAA,EAAA,mCAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA;AAIF,MAAA,EAAA,CAAA,YAAA;AACJ,MAAA,EAAA,CAAA,YAAA;AAEF,MAAA,EAAA,CAAA,YAAA;AACF,MAAA,EAAA,CAAA,YAAA;AACF,MAAA,EAAA,CAAA,YAAA;AACF,MAAA,EAAA,CAAA,YAAA;AACD,MAAA,EAAA,CAAA,YAAA;AACH,MAAA,EAAA,CAAA,YAAA;AAEN,MAAA,EAAA,CAAA,YAAA;;;;AAxGoB,MAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,MAAA,EAAA,CAAA,UAAA,CAAA,OAAA,EAAA,GAAA,CAAA,cAAA;AAEkB,MAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,MAAA,EAAA,CAAA,UAAA,CAAA,SAAA,EAAA,GAAA,CAAA,SAAA;AAUU,MAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,MAAA,EAAA,CAAA,UAAA,CAAA,eAAA,EAAA,GAAA,CAAA,WAAA,CAAA,OAAA;AAKd,MAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,MAAA,EAAA,CAAA,UAAA,CAAA,YAAA,EAAA,GAAA,CAAA,UAAA,EAAyB,aAAzB,EAAyB,GAAA,CAAA,WAAzB;AAakC,MAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,MAAA,EAAA,CAAA,UAAA,CAAA,oBAAA,EAAA,GAAA,CAAA,YAAA;AA2BA,MAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,MAAA,EAAA,CAAA,UAAA,CAAA,oBAAA,EAAA,GAAA,CAAA,QAAA;AAiCH,MAAA,EAAA,CAAA,SAAA,CAAA,EAAA;AAAA,MAAA,EAAA,CAAA,UAAA,CAAA,SAAA,EAAA,GAAA,CAAA,WAAA","sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output, Inject, Injectable } from '@angular/core';\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { OpcionService } from '@modules/seguridad/services/opcion.service';\r\nimport { RolesDto } from '@core/models/seguridad/RolesDto';\r\nimport { BootstrapNotifyBarService } from \"@shared/services/bootstrap-notify.service\";\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FormGroup, FormBuilder, Validators, FormControl, FormArray, ValidatorFn, AbstractControl } from '@angular/forms';\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {FlatTreeControl} from '@angular/cdk/tree';\r\nimport {MatTreeFlatDataSource, MatTreeFlattener} from '@angular/material/tree';\r\nimport {BehaviorSubject} from 'rxjs';\r\nimport { DialogoConfirmacionComponent } from '@shared/components/dialogo-confirmacion/dialogo-confirmacion.component';\r\nimport { AplicacionService } from '@modules/seguridad/services/aplicacion.service';\r\nimport { ModuloDelSistemaComponent } from '../modulo-del-sistema/modulo-del-sistema.component';\r\nimport { StepTabService } from '@modules/contra/services/StepTabService';\r\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\r\n\r\n/**\r\n * Node for to-do item\r\n */\r\nexport class TodoItemNode {\r\n  children: TodoItemNode[];\r\n  title: string;\r\n}\r\n/** Flat to-do item node with expandable and level information */\r\nexport class TodoItemFlatNode {\r\n  title: string;\r\n  level: number;\r\n  expandable: boolean;\r\n  isboton : boolean;\r\n}\r\n/**\r\n * Checklist database, it can build a tree structured Json object.\r\n * Each node in Json object represents a to-do item or a category.\r\n * If a node is a category, it has children ite|s and new items can be added under the category.\r\n */\r\n @Injectable()\r\n export class ChecklistDatabase {\r\n   dataChange = new BehaviorSubject<TodoItemNode[]>([]);   \r\n   get data(): TodoItemNode[] {\r\n     return this.dataChange.value;\r\n   }\r\n \r\n   constructor(private opcionService: OpcionService,\r\n               private aplicacionService: AplicacionService) {\r\n     this.initialize();\r\n   }\r\n   initialize() {    \r\n    \r\n   }\r\n   listarOpciones(idAplicacion:number,version:number){    \r\n    this.opcionService.listarOpcionesxAppVersion(idAplicacion,version).then((data: any[]) => {                  \r\n      this.dataChange.next(data);  \r\n    });     \r\n   }\r\n   /** Add an item to to-do list */\r\n   insertItem(parent: TodoItemNode, name: string) {    \r\n    //  if (parent.children) {\r\n       parent.children.push({title: name} as TodoItemNode);\r\n       this.dataChange.next(this.data);\r\n    //  }\r\n   }\r\n \r\n   updateItem(node: TodoItemNode, name: string) {\r\n     node.title = name;\r\n     this.dataChange.next(this.data);\r\n   }\r\n }\r\n\r\n@Component({\r\n  selector: 'app-form-opcion-page',\r\n  templateUrl: './form-opcion-page.component.html',\r\n  styleUrls:['./form-opcion-page.component.css']\r\n  ,\r\n  providers: [  ChecklistDatabase]\r\n})\r\nexport class FormOpcionComponent implements OnInit {  \r\n  opcionOrder: any[] ;\r\n\r\n  @Input() objRegistro: any;\r\n  @Output() onGuardar: EventEmitter<any> = new EventEmitter();    \r\n  versiones: any [];\r\n  versionDefault : any;\r\n  /** Map from flat node to nested node. This helps us finding the nested node to be modified */\r\n  flatNodeMap = new Map<TodoItemFlatNode, TodoItemNode>();\r\n  /** Map from nested node to flattened node. This helps us to keep the same object for selection */\r\n  nestedNodeMap = new Map<TodoItemNode, TodoItemFlatNode>();\r\n  /** A selected parent node to be inserted */\r\n  selectedParent: TodoItemFlatNode | null = null;\r\n  /** The new item's name */\r\n  newItemName = '';\r\n  treeControl: FlatTreeControl<TodoItemFlatNode>;\r\n  treeFlattener: MatTreeFlattener<TodoItemNode, TodoItemFlatNode>;\r\n  dataSource: MatTreeFlatDataSource<TodoItemNode, TodoItemFlatNode>;\r\n  /** The selection for checklist */\r\n  checklistSelection = new SelectionModel<TodoItemFlatNode>(true /* multiple */);\r\n  decryptedMessage : string;\r\n\r\n  constructor(private _database: ChecklistDatabase,\r\n              public dialogo: MatDialog,\r\n              private fb: FormBuilder,\r\n              private aplicacionService: AplicacionService,\r\n              public dialog: MatDialog,\r\n              private notificador: BootstrapNotifyBarService,\r\n              public stepService: StepTabService,\r\n              private objService:OpcionService) {         \r\n  this.treeFlattener = new MatTreeFlattener(this.transformer,this.getLevel,this.isExpandable,this.getChildren);\r\n  this.treeControl = new FlatTreeControl<TodoItemFlatNode>(this.getLevel, this.isExpandable);\r\n\r\n  this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\r\n    _database.dataChange.subscribe(data => {\r\n      this.dataSource.data = data;      \r\n    });    \r\n  }  \r\n  drop(event: CdkDragDrop<string[]>) {\r\n    \r\n    moveItemInArray(this.opcionOrder, event.previousIndex, event.currentIndex);\r\n    \r\n  }\r\n  changeTab(index: number){\r\n    // if(index==0)\r\n    //   this._database.listarOpciones(this.objRegistro,this.versionDefault);\r\n    // else\r\n     if(index==1){\r\n      var menuSelect : any[] = this.checklistSelection.selected;\r\n      console.log(menuSelect);\r\n      if(menuSelect.length==0)\r\n        this.listarOrdenamiento();\r\n      else if(menuSelect.length==1)\r\n        this.listarOrdenamiento(menuSelect[0].id);\r\n      else \r\n      this.notificador.notifyDanger(\"Debe seleccionar solo 1  opción para ver sus subOpciones\");\r\n    }\r\n    \r\n  }\r\n  guardarOrdenamiento(){\r\n   let req: any[]=[];\r\n   let ordenamiento:number=0;\r\n   this.opcionOrder.map(x => { req.push({Id:x.Id,Orden:ordenamiento++})});\r\n   \r\n    this.objService.actualizarOrden(req).subscribe((data: any) => {\r\n      if(data.tipoResultado==1){\r\n        this.notificador.notifySuccess(data.mensaje);        \r\n      }else{\r\n        this.notificador.notifyWarning(data.mensaje);\r\n      }   \r\n    }); \r\n  }\r\n  async ngOnInit() {    \r\n    this.aplicacionService.listarVersiones(this.objRegistro).then((data: any[]) => {      \r\n      this.versionDefault = data[0].Version;\r\n      this.versiones = data;      \r\n      this._database.listarOpciones(this.objRegistro,this.versionDefault);      \r\n    });         \r\n  } \r\n  onVersionChange(tr: { value: any; }){\r\n    this.versionDefault=this.objRegistro,tr.value;\r\n    this._database.listarOpciones(this.objRegistro,this.versionDefault);\r\n    this.listarOrdenamiento();\r\n  }\r\n  getLevel = (node: TodoItemFlatNode) => node.level;\r\n\r\n  isExpandable = (node: TodoItemFlatNode) => node.expandable;\r\n\r\n  getChildren = (node: TodoItemNode): TodoItemNode[] => node.children;\r\n\r\n  hasChild = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.expandable;\r\n\r\n  hasNoContent = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.title === '';\r\n\r\n  transformer = (node: any, level: number) => {\r\n       \r\n    const existingNode = this.nestedNodeMap.get(node) as any;\r\n    const flatNode = existingNode && existingNode.title === node.title ? existingNode : new TodoItemFlatNode();\r\n    flatNode.title = node.title;\r\n    flatNode.level = level;\r\n    flatNode.expandable = true;// !!node.children?.length;\r\n    flatNode.id=node.id;\r\n    flatNode.isboton=node.isboton;\r\n    flatNode.parentId=node.parentId;\r\n    flatNode.isSelected=node.isSelected;\r\n\r\n    this.flatNodeMap.set(flatNode, node);\r\n    this.nestedNodeMap.set(node, flatNode);\r\n    \r\n    \r\n    return flatNode;\r\n  };\r\n\r\n  /** Whether all the descendants of the node are selected. */\r\n  descendantsAllSelected(node: TodoItemFlatNode): boolean {\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    const descAllSelected =\r\n      descendants.length > 0 &&\r\n      descendants.every(child => {\r\n        return this.checklistSelection.isSelected(child);\r\n      });\r\n    return descAllSelected;\r\n  }\r\n\r\n  // /** Whether part of the descendants are selected */\r\n  descendantsPartiallySelected(node: TodoItemFlatNode): boolean {\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    const result = descendants.some(child => this.checklistSelection.isSelected(child));\r\n    return result && !this.descendantsAllSelected(node);\r\n  }\r\n\r\n  /** Toggle the to-do item selection. Select/deselect all the descendants node */\r\n  todoItemSelectionToggle(node: TodoItemFlatNode): void {\r\n    this.checklistSelection.toggle(node);\r\n    // const descendants = this.treeControl.getDescendants(node);\r\n    // console.log(descendants);\r\n    // this.checklistSelection.isSelected(node)\r\n    //   ? this.checklistSelection.select(...descendants)\r\n    //   : this.checklistSelection.deselect(...descendants);\r\n\r\n    // Force update for the parent\r\n    // descendants.forEach(child => this.checklistSelection.isSelected(child));\r\n    this.checkAllParentsSelection(node);\r\n  }\r\n\r\n  /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */\r\n  todoLeafItemSelectionToggle(node: TodoItemFlatNode): void {    \r\n    this.checklistSelection.toggle(node);\r\n    this.checkAllParentsSelection(node);\r\n  }\r\n\r\n  /* Checks all the parents when a leaf node is selected/unselected */\r\n  checkAllParentsSelection(node: TodoItemFlatNode): void {\r\n    let parent: TodoItemFlatNode | null = this.getParentNode(node);\r\n    while (parent) {\r\n      this.checkRootNodeSelection(parent);\r\n      parent = this.getParentNode(parent);\r\n    }\r\n  }\r\n\r\n  /** Check root node checked state and change it accordingly */\r\n  checkRootNodeSelection(node: TodoItemFlatNode): void {\r\n    const nodeSelected = this.checklistSelection.isSelected(node);\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    const descAllSelected =\r\n      descendants.length > 0 &&\r\n      descendants.every(child => {\r\n        return this.checklistSelection.isSelected(child);\r\n      });\r\n    if (nodeSelected && !descAllSelected) {\r\n      this.checklistSelection.deselect(node);\r\n    } else if (!nodeSelected && descAllSelected) {\r\n      this.checklistSelection.select(node);\r\n    }\r\n  }\r\n\r\n  /* Get the parent node of a node */\r\n  getParentNode(node: TodoItemFlatNode): TodoItemFlatNode | null {\r\n    const currentLevel = this.getLevel(node);\r\n\r\n    if (currentLevel < 1) {\r\n      return null;\r\n    }\r\n\r\n    const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\r\n\r\n    for (let i = startIndex; i >= 0; i--) {\r\n      const currentNode = this.treeControl.dataNodes[i];\r\n\r\n      if (this.getLevel(currentNode) < currentLevel) {\r\n        return currentNode;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Select the category so we can insert the new item. */\r\n  addNewOption(node: TodoItemFlatNode) {        \r\n    const parentNode = this.flatNodeMap.get(node);    \r\n    this._database.insertItem(parentNode!, '');    \r\n    this.treeControl.expand(node);\r\n  }\r\n  addNewAction(node: TodoItemFlatNode) {    \r\n    const parentNode = this.flatNodeMap.get(node);\r\n    this._database.insertItem(parentNode!, '');\r\n    console.log(node);\r\n    this.treeControl.expand(node);\r\n  }\r\n\r\n  /** Save the node to database */\r\n  saveNode(node: TodoItemFlatNode, itemValue: string) {\r\n    const nestedNode = this.flatNodeMap.get(node);\r\n    this._database.updateItem(nestedNode!, itemValue);\r\n  }\r\n  crearOpcion(){\r\n    var menuSelect : any[] = this.checklistSelection.selected;\r\n    \r\n    let mensaje:string=\"\";\r\n    let _idPadre = null;\r\n    let _stPadre = null;\r\n    if(menuSelect.length==0)\r\n       mensaje=\"Está seguro de no asociar la nueva opción a una opción padre?\";\r\n    else if(menuSelect.length==1){\r\n      _idPadre=menuSelect[0].id;\r\n      _stPadre=menuSelect[0].title;\r\n      mensaje=\"Está seguro asociar la nueva opción a \"+_stPadre+\"?\";\r\n    }\r\n\r\n    if(mensaje!=\"\"){\r\n          this.dialogo.open(DialogoConfirmacionComponent, { maxWidth: '25vw', maxHeight: 'auto', height: 'auto', width: '25%', disableClose: true,\r\n            data: { titulo: `Registro de Opciones`, mensaje: mensaje }\r\n          }).afterClosed().subscribe(async (Ok: Boolean) => {\r\n              if (Ok) {                                                \r\n                this.dialog.open(ModuloDelSistemaComponent  , {\r\n                  maxWidth: '50vw',\r\n                  maxHeight: '50vw',\r\n                  height: 'auto',\r\n                  width: '80%',\r\n                  disableClose: false,\r\n                  data: { version: this.versionDefault,idPadre:_idPadre, stPadre :_stPadre, id:null },\r\n                });\r\n              }\r\n          });\r\n    }\r\n    else\r\n    this.notificador.notifyDanger(\"Debe seleccionar solo 1  opción\");\r\n  }\r\n  EditarModulo(){\r\n    var menuSelect : any[] = this.checklistSelection.selected;\r\n    if(menuSelect.length==1){\r\n      this.dialog.open(ModuloDelSistemaComponent  , {\r\n        maxWidth: '50vw',\r\n        maxHeight: '50vw',\r\n        height: 'auto',\r\n        width: '80%',\r\n        disableClose: false,\r\n        data: { version: this.versionDefault, id: menuSelect[0].id },\r\n      });\r\n    }else{\r\n      this.notificador.notifyDanger(\"Debe seleccionar 1  opción\");\r\n    }   \r\n  }\r\n  listarOrdenamiento(idPadre:number=0){\r\n    if(idPadre==0){\r\n      this.objService.listarModulos(parseInt(localStorage.getItem(\"App\")),this.versionDefault).subscribe((data: any) => {\r\n        this.opcionOrder = data;      \r\n      });    \r\n    }else{\r\n      this.objService.listarxIdPadre(idPadre).subscribe((data: any) => {\r\n        this.opcionOrder = data;      \r\n      });    \r\n    }\r\n  }\r\n}","<form autocomplete=\"on\" >  \r\n  <div class=\"row\">\r\n    <div class=\"col-md-3\">\r\n      <mat-form-field appearance=\"fill\">\r\n        <mat-label>Version app</mat-label>\r\n        <mat-select [(value)]=\"versionDefault\" \r\n          (selectionChange)=\"onVersionChange($event)\">\r\n          <mat-option *ngFor=\"let ver of versiones\" [value]=\"ver.Version\">\r\n            {{ver.Nombre}}\r\n          </mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n\r\n    </div>\r\n  </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n          <mat-tab-group mat-align-tabs=\"start\" [(selectedIndex)]=\"this.stepService.StepTab\"  (selectedIndexChange)=\"changeTab($event)\">\r\n            <mat-tab label=\"Opciones\">        \r\n              <div class=\"contrainer-fluid\">                                    \r\n                <div class=\"row\">\r\n                      <div class=\"col-md-4\">                        \r\n                        <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\r\n                          <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodeToggle matTreeNodePadding>\r\n                            <button mat-icon-button disabled></button>\r\n                            <!-- {{node.title}} -->\r\n                            <mat-checkbox class=\"checklist-leaf-node\"\r\n                                          [checked]=\"checklistSelection.isSelected(node)\"\r\n                                          (change)=\"todoLeafItemSelectionToggle(node)\">{{node.title}}</mat-checkbox>\r\n\r\n                            <button mat-icon-button (click)=\"addNewOption(node)\" *ngIf=\"!node.isboton\" ><mat-icon>note_add</mat-icon></button>\r\n                            <button mat-icon-button (click)=\"addNewOption(node)\" > <mat-icon>add</mat-icon></button>                \r\n\r\n                          </mat-tree-node>            \r\n                          \r\n                          <mat-tree-node *matTreeNodeDef=\"let node; when: hasNoContent\" matTreeNodePadding>\r\n                            <button mat-icon-button disabled></button>\r\n                            <div class=\"row\">                  \r\n                              <div class=\"col-md-2\">\r\n                                <mat-form-field appearance=\"fill\">\r\n                                  <mat-label>Nombre</mat-label>\r\n                                  <input matInput #NombreNvo placeholder=\"Ex. Lettuce\">\r\n                                </mat-form-field>\r\n                              </div>                    \r\n                              <div class=\"col-md-4\">\r\n                                <mat-form-field appearance=\"fill\">\r\n                                  <mat-label>Ruta</mat-label>\r\n                                  <input matInput #DescripcionNvo placeholder=\"Ex. Lettuce\">\r\n                                </mat-form-field>\r\n                              </div>\r\n                              <div class=\"col-md-2\">\r\n                                <mat-form-field appearance=\"fill\">\r\n                                  <mat-label>Version</mat-label>\r\n                                  <input matInput #NombreNvo placeholder=\"Ex. Lettuce\">\r\n                                </mat-form-field>\r\n                              </div>  \r\n                              <div class=\"col-md-1\">\r\n                                <button mat-button (click)=\"saveNode(node, NombreNvo.value)\">Grabar</button>\r\n                              </div>\r\n                            </div>                \r\n                          </mat-tree-node>\r\n                        \r\n                          <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\r\n                            <button mat-icon-button matTreeNodeToggle\r\n                                    [attr.aria-label]=\"'Toggle ' + node.title\">\r\n                              <mat-icon class=\"mat-icon-rtl-mirror\">\r\n                                {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\r\n                              </mat-icon>\r\n                            </button>\r\n                            <!-- {{node.title}} -->\r\n                            <mat-checkbox [checked]=\"descendantsAllSelected(node)\"\r\n                                          [indeterminate]=\"descendantsPartiallySelected(node)\"\r\n                                          (change)=\"todoItemSelectionToggle(node)\">{{node.title}}</mat-checkbox>\r\n\r\n                            <button mat-icon-button (click)=\"addNewOption(node)\" *ngIf=\"!node.isboton\" ><mat-icon>note_add</mat-icon></button>\r\n                          </mat-tree-node>\r\n                        </mat-tree>\r\n                      </div>\r\n                      <div class=\"col-md-8\">\r\n                        <button mat-raised-button class=\"btn\" (click)=\"crearOpcion()\">Crear módulo o opción<mat-icon>create_new_folder</mat-icon></button>\r\n                        <button mat-raised-button class=\"btn\" (click)=\"EditarModulo()\">Editar módulo o opción<mat-icon>edit</mat-icon></button>\r\n                      </div>\r\n                   </div>\r\n                 </div>\r\n            </mat-tab>\r\n            <mat-tab label=\"Ordenamiento\">\r\n              <div class=\"contrainer-fluid\">                                    \r\n                <div class=\"row\">\r\n                  <div class=\"col-md-3\"></div>\r\n                  <div class=\"col-md-2\">\r\n                    <button mat-raised-button class=\"btn\" (click)=\"guardarOrdenamiento()\">Guardar<mat-icon>save</mat-icon></button>\r\n                  </div>\r\n                  <div class=\"col-md-5\">\r\n                  \r\n                      <div cdkDropList class=\"example-list\" (cdkDropListDropped)=\"drop($event)\">\r\n                        <div class=\"example-box\" *ngFor=\"let obj of opcionOrder\" cdkDrag>\r\n                          <div class=\"example-custom-placeholder\" *cdkDragPlaceholder></div>\r\n                          {{obj.Nombre}}\r\n                        </div>\r\n                      </div>\r\n                  </div>\r\n                  \r\n                </div>\r\n              </div>\r\n            </mat-tab>\r\n          </mat-tab-group>\r\n         </div>\r\n      </div>\r\n    \r\n</form>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}