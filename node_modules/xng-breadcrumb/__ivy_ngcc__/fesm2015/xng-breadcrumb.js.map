{"version":3,"file":"xng-breadcrumb.js","sources":["../../../../libs/xng-breadcrumb/src/lib/breadcrumb-item.directive.ts","../../../../libs/xng-breadcrumb/src/lib/breadcrumb.service.ts","../../../../libs/xng-breadcrumb/src/lib/breadcrumb.component.ts","../../../../libs/xng-breadcrumb/src/lib/breadcrumb.module.ts","../../../../libs/xng-breadcrumb/src/index.ts","../../../../libs/xng-breadcrumb/src/xng-breadcrumb.ts"],"names":[],"mappings":"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","sourcesContent":["import { Directive } from '@angular/core';\n\n/**\n * This directive is used to customize the breadcrumb label behavior\n * *xngBreadcrumbItem directive can be used in the child element of xng-breadcrumb\n * Usage: refer to the demo - app.component.html\n */\n@Directive({\n  selector: '[xngBreadcrumbItem]',\n})\nexport class BreadcrumbItemDirective {}\n","import { Injectable } from '@angular/core';\nimport {\n  ActivatedRoute,\n  ActivatedRouteSnapshot,\n  GuardsCheckEnd,\n  Router,\n} from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Breadcrumb } from './types/breadcrumb';\nimport {\n  BreadcrumbFunction,\n  BreadcrumbObject,\n} from './types/breadcrumb.config';\n\ntype BreadcrumbConfig = BreadcrumbObject | BreadcrumbFunction | string;\ntype StoreMatcherKey = 'routeLink' | 'routeRegex' | 'alias';\nexport type BreadcrumbDefinition = Breadcrumb & BreadcrumbObject;\nconst PATH_PARAM = {\n  PREFIX: ':',\n  REGEX_IDENTIFIER: '/:[^/]+',\n  REGEX_REPLACER: '/[^/]+',\n};\nconst ALIAS_PREFIX = '@';\nconst isNonEmpty = (obj: unknown): boolean => {\n  return obj && Object.keys(obj).length > 0;\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbService {\n  private baseHref = '/';\n\n  /**\n   * dynamicBreadcrumbStore holds information about dynamically updated breadcrumbs.\n   * Breadcrumbs can be set from anywhere (component, service) in the app.\n   * On every breadcrumb update check this store and use the info if available.\n   */\n  private dynamicBreadcrumbStore: BreadcrumbDefinition[] = [];\n\n  /**\n   * breadcrumbList for the current route\n   * When breadcrumb info is changed dynamically, check if the currentBreadcrumbs is effected\n   * If effected, update the change and emit a new stream\n   */\n  private currentBreadcrumbs: BreadcrumbDefinition[] = [];\n  private previousBreadcrumbs: BreadcrumbDefinition[] = [];\n\n  /**\n   * Breadcrumbs observable to be subscribed by BreadcrumbComponent\n   * Emits on every route change OR dynamic update of breadcrumb\n   */\n  private breadcrumbs = new BehaviorSubject<BreadcrumbDefinition[]>([]);\n  public breadcrumbs$ = this.breadcrumbs.asObservable();\n\n  constructor(private activatedRoute: ActivatedRoute, private router: Router) {\n    this.detectRouteChanges();\n  }\n\n  /**\n   * Whenever route changes build breadcrumb list again\n   */\n  private detectRouteChanges() {\n    // Special case where breadcrumb service & component instantiates after a route is navigated.\n    // Ex: put breadcrumbs within *ngIf and this.router.events would be empty\n    if (this.router.navigated) {\n      this.setupBreadcrumbs(this.activatedRoute.snapshot);\n    }\n\n    this.router.events\n      .pipe(filter((event) => event instanceof GuardsCheckEnd))\n      .subscribe((event) => {\n        // activatedRoute doesn't carry data when shouldReuseRoute returns false\n        // use the event data with RoutesRecognized as workaround\n        if (event instanceof GuardsCheckEnd && event.shouldActivate) {\n          this.setupBreadcrumbs(event.state.root);\n        }\n      });\n  }\n\n  private setupBreadcrumbs(activatedRouteSnapshot: ActivatedRouteSnapshot) {\n    this.previousBreadcrumbs = this.currentBreadcrumbs;\n    // breadcrumb label for base OR root path. Usually, this can be set as 'Home'\n    const rootBreadcrumb = this.getRootBreadcrumb();\n    this.currentBreadcrumbs = rootBreadcrumb ? [rootBreadcrumb] : [];\n    this.prepareBreadcrumbList(activatedRouteSnapshot, this.baseHref);\n  }\n\n  private getRootBreadcrumb() {\n    const rootConfig = this.router.config.find((config) => config.path === '');\n    const rootBreadcrumb = this.extractObject(rootConfig?.data?.breadcrumb);\n    const storeItem = this.getFromStore(rootBreadcrumb.alias, '/');\n\n    if (isNonEmpty(rootBreadcrumb) || isNonEmpty(storeItem)) {\n      return {\n        ...storeItem,\n        ...rootBreadcrumb,\n        routeLink: this.baseHref,\n        ...this.getQueryParamsFromPreviousList('/'),\n      };\n    }\n  }\n\n  private prepareBreadcrumbItem(\n    activatedRouteSnapshot: ActivatedRouteSnapshot,\n    routeLinkPrefix: string\n  ): BreadcrumbDefinition {\n    const { path, breadcrumb } = this.parseRouteData(\n      activatedRouteSnapshot.routeConfig\n    );\n    const resolvedSegment = this.resolvePathSegment(\n      path,\n      activatedRouteSnapshot\n    );\n    const routeLink = `${routeLinkPrefix}${resolvedSegment}`;\n    const storeItem = this.getFromStore(breadcrumb.alias, routeLink);\n\n    const label = this.extractLabel(\n      storeItem?.label || breadcrumb?.label,\n      resolvedSegment\n    );\n    let isAutoGeneratedLabel = false;\n    let autoGeneratedLabel = '';\n    if (!label) {\n      isAutoGeneratedLabel = true;\n      autoGeneratedLabel = resolvedSegment;\n    }\n\n    return {\n      ...storeItem,\n      ...breadcrumb,\n      label: isAutoGeneratedLabel ? autoGeneratedLabel : label,\n      routeLink,\n      isAutoGeneratedLabel,\n      ...this.getQueryParamsFromPreviousList(routeLink),\n    };\n  }\n\n  private prepareBreadcrumbList(\n    activatedRouteSnapshot: ActivatedRouteSnapshot,\n    routeLinkPrefix: string\n  ): Breadcrumb[] {\n    if (activatedRouteSnapshot.routeConfig?.path) {\n      const breadcrumbItem = this.prepareBreadcrumbItem(\n        activatedRouteSnapshot,\n        routeLinkPrefix\n      );\n      this.currentBreadcrumbs.push(breadcrumbItem);\n\n      if (activatedRouteSnapshot.firstChild) {\n        return this.prepareBreadcrumbList(\n          activatedRouteSnapshot.firstChild,\n          breadcrumbItem.routeLink + '/'\n        );\n      }\n    } else if (activatedRouteSnapshot.firstChild) {\n      return this.prepareBreadcrumbList(\n        activatedRouteSnapshot.firstChild,\n        routeLinkPrefix\n      );\n    }\n    const lastCrumb =\n      this.currentBreadcrumbs[this.currentBreadcrumbs.length - 1];\n    this.setQueryParamsForActiveBreadcrumb(lastCrumb, activatedRouteSnapshot);\n\n    // remove breadcrumb items that needs to be hidden\n    const breadcrumbsToShow = this.currentBreadcrumbs.filter(\n      (item) => !item.skip\n    );\n\n    this.breadcrumbs.next(breadcrumbsToShow);\n  }\n\n  private getFromStore(alias: string, routeLink: string): BreadcrumbDefinition {\n    return this.dynamicBreadcrumbStore.find((item) => {\n      return (\n        (alias && alias === item.alias) ||\n        (routeLink && routeLink === item.routeLink) ||\n        this.matchRegex(routeLink, item.routeRegex)\n      );\n    });\n  }\n\n  /**\n   * use exact match instead of regexp.test\n   * for /mentor/[^/]+ we should match '/mentor/12' but not '/mentor/12/abc'\n   */\n  private matchRegex(routeLink: string, routeRegex: string) {\n    const match = routeLink.match(new RegExp(routeRegex));\n    return match?.[0] === routeLink;\n  }\n\n  /**\n   * if the path segment has route params, read the param value from url\n   * for each segment of route this gets called\n   *\n   * for mentor/:id/view - it gets called with mentor, :id, view 3 times\n   */\n  private resolvePathSegment(\n    segment: string,\n    activatedRouteSnapshot: ActivatedRouteSnapshot\n  ) {\n    //quirk -segment can be defined as view/:id in route config in which case you need to make it view/<resolved-param>\n    if (segment.includes(PATH_PARAM.PREFIX)) {\n      Object.entries(activatedRouteSnapshot.params).forEach(([key, value]) => {\n        segment = segment.replace(`:${key}`, `${value}`);\n      });\n    }\n    return segment;\n  }\n\n  /**\n   * queryParams & fragments for previous breadcrumb path are copied over to new list\n   */\n  private getQueryParamsFromPreviousList(routeLink: string): Breadcrumb {\n    const { queryParams, fragment } =\n      this.previousBreadcrumbs.find((item) => item.routeLink === routeLink) ||\n      {};\n    return { queryParams, fragment };\n  }\n\n  /**\n   * set current activated route query params to the last breadcrumb item\n   */\n  private setQueryParamsForActiveBreadcrumb(\n    lastItem: Breadcrumb,\n    activatedRouteSnapshot: ActivatedRouteSnapshot\n  ) {\n    if (lastItem) {\n      const { queryParams, fragment } = activatedRouteSnapshot;\n      lastItem.queryParams = queryParams ? { ...queryParams } : undefined;\n      lastItem.fragment = fragment;\n    }\n  }\n\n  /**\n   * For a specific route, breadcrumb can be defined either on parent OR it's child(which has empty path)\n   * When both are defined, child takes precedence\n   *\n   * Ex: Below we are setting breadcrumb on both parent and child.\n   * So, child takes precedence and \"Defined On Child\" is displayed for the route 'home'\n   * { path: 'home', loadChildren: './home/home.module#HomeModule' , data: {breadcrumb: \"Defined On Module\"}}\n   *                                                AND\n   * children: [\n   *   { path: '', component: ShowUserComponent, data: {breadcrumb: \"Defined On Child\" }\n   * ]\n   */\n  private parseRouteData(routeConfig) {\n    const { path, data } = routeConfig;\n    const breadcrumb = this.mergeWithBaseChildData(\n      routeConfig,\n      data?.breadcrumb\n    );\n\n    return { path, breadcrumb };\n  }\n\n  /**\n   * get empty children of a module or Component. Empty child is the one with path: ''\n   * When parent and it's children (that has empty route path) define data merge them both with child taking precedence\n   */\n  private mergeWithBaseChildData(\n    routeConfig,\n    config: BreadcrumbConfig\n  ): BreadcrumbObject {\n    if (!routeConfig) {\n      return this.extractObject(config);\n    }\n\n    let baseChild;\n    if (routeConfig.loadChildren) {\n      // To handle a module with empty child route\n      baseChild = routeConfig._loadedConfig.routes.find(\n        (route) => route.path === ''\n      );\n    } else if (routeConfig.children) {\n      // To handle a component with empty child route\n      baseChild = routeConfig.children.find((route) => route.path === '');\n    }\n\n    const childConfig = baseChild?.data?.breadcrumb;\n    return childConfig\n      ? this.mergeWithBaseChildData(baseChild, {\n          ...this.extractObject(config),\n          ...this.extractObject(childConfig),\n        })\n      : this.extractObject(config);\n  }\n\n  /**\n   * Update breadcrumb dynamically\n   *\n   * key can be a path | alias\n   *\n   * 1) Using complete route path. route can be passed the same way you define angular routes\n   * - path can be passed as 'exact path(routeLink)' or 'path with params(routeRegex)'\n   * - update label Ex: set('/mentor', 'Mentor'), set('/mentor/:id', 'Mentor Details')\n   * - change visibility Ex: set('/mentor/:id/edit', { skip: true })\n   * ------------------------------------------ OR ------------------------------------------\n   * 2) Using route alias (prefixed with '@'). alias should be unique for a route\n   * - update label Ex: set('@mentor', 'Enabler')\n   * - change visibility Ex: set('@mentorEdit', { skip: true })\n   *\n   *\n   * value can be string | BreadcrumbObject | BreadcrumbFunction\n   */\n  set(key: string, breadcrumb: string | BreadcrumbObject) {\n    const breadcrumbObject = this.extractObject(breadcrumb);\n    let updateArgs: [StoreMatcherKey, BreadcrumbDefinition];\n\n    if (key.startsWith(ALIAS_PREFIX)) {\n      updateArgs = ['alias', { ...breadcrumbObject, alias: key.slice(1) }];\n    } else if (key.includes(PATH_PARAM.PREFIX)) {\n      updateArgs = [\n        'routeRegex',\n        { ...breadcrumbObject, routeRegex: this.buildRegex(key) },\n      ];\n    } else {\n      updateArgs = [\n        'routeLink',\n        { ...breadcrumbObject, routeLink: this.ensureLeadingSlash(key) },\n      ];\n    }\n\n    // For this route if previously a breadcrumb is not defined that sets isAutoGeneratedLabel: true\n    // change it to false since this is user supplied value\n    updateArgs[1].isAutoGeneratedLabel = false;\n\n    this.updateStore(...updateArgs);\n    this.updateCurrentBreadcrumbs(...updateArgs);\n  }\n\n  /**\n   * Update the store to reuse for dynamic declarations\n   * If the store already has this route definition update it, else add\n   */\n  private updateStore(key: string, breadcrumb: BreadcrumbDefinition) {\n    const storeItemIndex = this.dynamicBreadcrumbStore.findIndex((item) => {\n      return breadcrumb[key] === item[key];\n    });\n    if (storeItemIndex > -1) {\n      this.dynamicBreadcrumbStore[storeItemIndex] = {\n        ...this.dynamicBreadcrumbStore[storeItemIndex],\n        ...breadcrumb,\n      };\n    } else {\n      this.dynamicBreadcrumbStore.push({ ...breadcrumb });\n    }\n  }\n\n  /**\n   * If breadcrumb is present in current breadcrumbs update it and emit new stream\n   */\n  private updateCurrentBreadcrumbs(\n    key: string,\n    breadcrumb: BreadcrumbDefinition\n  ) {\n    const itemIndex = this.currentBreadcrumbs.findIndex((item) => {\n      return key === 'routeRegex'\n        ? this.matchRegex(item.routeLink, breadcrumb[key])\n        : breadcrumb[key] === item[key];\n    });\n    if (itemIndex > -1) {\n      this.currentBreadcrumbs[itemIndex] = {\n        ...this.currentBreadcrumbs[itemIndex],\n        ...breadcrumb,\n      };\n      const breadcrumbsToShow = this.currentBreadcrumbs.filter(\n        (item) => !item.skip\n      );\n      this.breadcrumbs.next([...breadcrumbsToShow]);\n    }\n  }\n\n  /**\n   * For a route with path param, we create regex dynamically from angular route syntax\n   * '/mentor/:id' becomes '/mentor/[^/]',\n   * breadcrumbService.set('/mentor/:id', 'Uday') should update 'Uday' as label for '/mentor/2' OR 'mentor/ada'\n   */\n  private buildRegex(path: string) {\n    return this.ensureLeadingSlash(path).replace(\n      new RegExp(PATH_PARAM.REGEX_IDENTIFIER, 'g'),\n      PATH_PARAM.REGEX_REPLACER\n    );\n  }\n\n  private ensureLeadingSlash(path: string) {\n    return path.startsWith('/') ? path : `/${path}`;\n  }\n\n  /**\n   * In App's RouteConfig, breadcrumb can be defined as a string OR a function OR an object\n   *\n   * string: simple static breadcrumb label for a path\n   * function: callback that gets invoked with resolved path param\n   * object: additional data defined along with breadcrumb label that gets passed to *xngBreadcrumbItem directive\n   */\n  private extractLabel(config: BreadcrumbConfig, resolvedParam?: string) {\n    const label = typeof config === 'object' ? config.label : config;\n    if (typeof label === 'function') {\n      return label(resolvedParam);\n    }\n    return label;\n  }\n\n  private extractObject(config: BreadcrumbConfig): BreadcrumbObject {\n    // don't include {label} if config is undefined. This is important since we merge the configs\n    if (\n      config &&\n      (typeof config === 'string' || typeof config === 'function')\n    ) {\n      return { label: config };\n    }\n    return (config as BreadcrumbObject) || {};\n  }\n}\n","import {\n  Component,\n  ContentChild,\n  Input,\n  OnInit,\n  TemplateRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BreadcrumbItemDirective } from './breadcrumb-item.directive';\nimport { BreadcrumbDefinition, BreadcrumbService } from './breadcrumb.service';\n\n@Component({\n  selector: 'xng-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  styleUrls: ['./breadcrumb.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class BreadcrumbComponent implements OnInit {\n  subscription: Subscription;\n  breadcrumbs$: Observable<BreadcrumbDefinition[]>;\n  separatorTemplate: TemplateRef<void>;\n  private _separator = '/';\n\n  /**\n   * Breadcrumb item can be customized with this template\n   * Template context is provided label, additional info, first and last indexes\n   * Use cases:\n   * 1) Add an icon along with label\n   * 2) i18n. {{breadcrumb | translate}} or {{breadcrumb | transloco}}\n   * 3) Change text case {{breadcrumb | titlecase}}\n   */\n  @ContentChild(BreadcrumbItemDirective, { static: false, read: TemplateRef })\n  itemTemplate;\n\n  /**\n   * If true, breadcrumb is auto generated even without any mapping label\n   * Default label is same as route segment\n   */\n  @Input() autoGenerate = true;\n\n  /**\n   * By default query params will be preserved with breadcrumbs\n   */\n  @Input() preserveQueryParams = true;\n\n  /**\n   * By default query fragments will be preserved with breadcrumbs\n   */\n  @Input() preserveFragment = true;\n\n  /**\n   * custom class provided by consumer to increase specificity\n   * This will benefit to override styles that are conflicting\n   */\n  @Input() class = '';\n\n  /**\n   * anchorTarget = \"_blank\" makes the breadcrumb link open in a new tab\n   */\n  @Input() anchorTarget: '_blank' | undefined;\n\n  /**\n   * separator between breadcrumbs, defaults to '/'.\n   * User can customize separator either by passing a String or Template\n   *\n   * String --> Ex: <xng-breadcrumb separator=\"-\"> </xng-breadcrumb>\n   *\n   * Template --> Ex: <xng-breadcrumb [separator]=\"separatorTemplate\"> </xng-breadcrumb>\n   * <ng-template #separatorTemplate><mat-icon>arrow_right</mat-icon></ng-template>\n   */\n  @Input('separator')\n  set separator(value: string | TemplateRef<void>) {\n    if (value instanceof TemplateRef) {\n      this.separatorTemplate = value;\n      this._separator = undefined;\n    } else {\n      this.separatorTemplate = undefined;\n      this._separator = value || '/';\n    }\n  }\n  get separator() {\n    return this._separator;\n  }\n\n  setupMessage = 'not set up yet';\n  someParameterValue = null;\n\n  constructor(\n    private breadcrumbService: BreadcrumbService,\n    activateRoute: ActivatedRoute\n  ) {\n    activateRoute.params.subscribe((params) => {\n      this.setupComponent(params['someParam']);\n    });\n  }\n\n  setupComponent(someParam) {\n    this.setupMessage = 'set up at ' + new Date();\n    this.someParameterValue = someParam;\n  }\n\n  ngOnInit() {\n    this.breadcrumbs$ = this.breadcrumbService.breadcrumbs$.pipe(\n      map((breadcrumbs: BreadcrumbDefinition[]) => {\n        return breadcrumbs\n          .filter((breadcrumb: BreadcrumbDefinition) => {\n            // Usually, breadcrumb list can contain a combination of auto generated and user specified labels\n            // this filters autogenerated labels in case of \"[autoGenerate]: false\"\n            if (this.autoGenerate) {\n              return true;\n            }\n            return !breadcrumb.isAutoGeneratedLabel;\n          })\n          .map((breadcrumb: BreadcrumbDefinition) => {\n            // Do not mutate breadcrumb as its source of truth.\n            // There can be scenarios where we can have multiple xng-breadcrumb instances in page\n            const { routeInterceptor, routeLink } = breadcrumb;\n            return {\n              ...breadcrumb,\n              routeLink: routeInterceptor?.(routeLink, breadcrumb) || routeLink,\n            };\n          });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { BreadcrumbItemDirective } from './breadcrumb-item.directive';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  declarations: [BreadcrumbComponent, BreadcrumbItemDirective],\n  imports: [CommonModule, RouterModule],\n  exports: [BreadcrumbComponent, BreadcrumbItemDirective],\n})\nexport class BreadcrumbModule {}\n","/*\n * Public API Surface of xng-breadcrumb\n */\n\nexport * from './lib/breadcrumb-item.directive';\nexport * from './lib/breadcrumb.component';\nexport * from './lib/breadcrumb.module';\nexport * from './lib/breadcrumb.service';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}